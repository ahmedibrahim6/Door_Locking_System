
Door_Locking_System_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000270a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  0000270a  0000279e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000be  008000be  000027fc  2**0
                  ALLOC
  3 .stab         000020f4  00000000  00000000  000027fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf2  00000000  00000000  000048f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000055e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005722  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005892  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000074db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000083c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009174  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000092d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009561  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009d2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 83 13 	jmp	0x2706	; 0x2706 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 eb       	ldi	r26, 0xB6	; 182
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 eb       	ldi	r24, 0xB6	; 182
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 *g_password;



int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	UART_init();
     b50:	0e 94 52 12 	call	0x24a4	; 0x24a4 <UART_init>
	LCD_init();
     b54:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_init>

	OPTION1_setNewPassword();
     b58:	0e 94 cd 05 	call	0xb9a	; 0xb9a <OPTION1_setNewPassword>
	uint8 pressedKey;

	while(1)
	{
		LCD_clearScreen();
     b5c:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"+ : Change Pass");
     b60:	20 e6       	ldi	r18, 0x60	; 96
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	a9 01       	movw	r20, r18
     b6a:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"- : Open Door");
     b6e:	20 e7       	ldi	r18, 0x70	; 112
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	a9 01       	movw	r20, r18
     b78:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayStringRowColumn>

		pressedKey = KeyPad_getPressedKey();
     b7c:	0e 94 90 0c 	call	0x1920	; 0x1920 <KeyPad_getPressedKey>
     b80:	89 83       	std	Y+1, r24	; 0x01

		if( pressedKey == CHANGE_PASS_KEY )
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	8b 32       	cpi	r24, 0x2B	; 43
     b86:	19 f4       	brne	.+6      	; 0xb8e <main+0x48>
		{
			OPTION2_ChangePassword();
     b88:	0e 94 03 0a 	call	0x1406	; 0x1406 <OPTION2_ChangePassword>
     b8c:	e7 cf       	rjmp	.-50     	; 0xb5c <main+0x16>
		}

		else if( pressedKey == OPEN_DOOR_KEY )
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	8d 32       	cpi	r24, 0x2D	; 45
     b92:	21 f7       	brne	.-56     	; 0xb5c <main+0x16>
		{
			OPTION3_openDoor();
     b94:	0e 94 15 0a 	call	0x142a	; 0x142a <OPTION3_openDoor>
     b98:	e1 cf       	rjmp	.-62     	; 0xb5c <main+0x16>

00000b9a <OPTION1_setNewPassword>:




void OPTION1_setNewPassword(void)
{
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	cb 56       	subi	r28, 0x6B	; 107
     ba8:	d0 40       	sbci	r29, 0x00	; 0
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
	uint8 key,counter =0,cmp = 0;
     bb4:	fe 01       	movw	r30, r28
     bb6:	e6 5a       	subi	r30, 0xA6	; 166
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	10 82       	st	Z, r1
     bbc:	fe 01       	movw	r30, r28
     bbe:	e7 5a       	subi	r30, 0xA7	; 167
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	10 82       	st	Z, r1
	uint8 Str_password1[8],Str_password2[8];
	uint8 *str1 = Str_password1 ;
     bc4:	fe 01       	movw	r30, r28
     bc6:	e9 5a       	subi	r30, 0xA9	; 169
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	ce 01       	movw	r24, r28
     bcc:	84 5a       	subi	r24, 0xA4	; 164
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	91 83       	std	Z+1, r25	; 0x01
     bd2:	80 83       	st	Z, r24
	uint8 *str2 = Str_password2 ;
     bd4:	fe 01       	movw	r30, r28
     bd6:	eb 5a       	subi	r30, 0xAB	; 171
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	ce 01       	movw	r24, r28
     bdc:	8c 59       	subi	r24, 0x9C	; 156
     bde:	9f 4f       	sbci	r25, 0xFF	; 255
     be0:	91 83       	std	Z+1, r25	; 0x01
     be2:	80 83       	st	Z, r24
	LCD_clearScreen();
     be4:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"New Pass :");
     be8:	2e e7       	ldi	r18, 0x7E	; 126
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	a9 01       	movw	r20, r18
     bf2:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayStringRowColumn>

	key = KeyPad_getPressedKey();
     bf6:	0e 94 90 0c 	call	0x1920	; 0x1920 <KeyPad_getPressedKey>
     bfa:	fe 01       	movw	r30, r28
     bfc:	e5 5a       	subi	r30, 0xA5	; 165
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	80 83       	st	Z, r24
     c02:	df c0       	rjmp	.+446    	; 0xdc2 <OPTION1_setNewPassword+0x228>

	while( key != ENTER_KEY)
	{

		LCD_displayStringRowColumn(1,counter,"*");
     c04:	fe 01       	movw	r30, r28
     c06:	e6 5a       	subi	r30, 0xA6	; 166
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	29 e8       	ldi	r18, 0x89	; 137
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	60 81       	ld	r22, Z
     c12:	a9 01       	movw	r20, r18
     c14:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayStringRowColumn>
		str1 [counter] = key;
     c18:	fe 01       	movw	r30, r28
     c1a:	e6 5a       	subi	r30, 0xA6	; 166
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	80 81       	ld	r24, Z
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	fe 01       	movw	r30, r28
     c26:	e9 5a       	subi	r30, 0xA9	; 169
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	80 81       	ld	r24, Z
     c2c:	91 81       	ldd	r25, Z+1	; 0x01
     c2e:	dc 01       	movw	r26, r24
     c30:	a2 0f       	add	r26, r18
     c32:	b3 1f       	adc	r27, r19
     c34:	fe 01       	movw	r30, r28
     c36:	e5 5a       	subi	r30, 0xA5	; 165
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	80 81       	ld	r24, Z
     c3c:	8c 93       	st	X, r24
     c3e:	fe 01       	movw	r30, r28
     c40:	ef 5a       	subi	r30, 0xAF	; 175
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	aa e7       	ldi	r26, 0x7A	; 122
     c4a:	b3 e4       	ldi	r27, 0x43	; 67
     c4c:	80 83       	st	Z, r24
     c4e:	91 83       	std	Z+1, r25	; 0x01
     c50:	a2 83       	std	Z+2, r26	; 0x02
     c52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c54:	8e 01       	movw	r16, r28
     c56:	03 5b       	subi	r16, 0xB3	; 179
     c58:	1f 4f       	sbci	r17, 0xFF	; 255
     c5a:	fe 01       	movw	r30, r28
     c5c:	ef 5a       	subi	r30, 0xAF	; 175
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	60 81       	ld	r22, Z
     c62:	71 81       	ldd	r23, Z+1	; 0x01
     c64:	82 81       	ldd	r24, Z+2	; 0x02
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	4a e7       	ldi	r20, 0x7A	; 122
     c6e:	53 e4       	ldi	r21, 0x43	; 67
     c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	f8 01       	movw	r30, r16
     c7a:	80 83       	st	Z, r24
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	a2 83       	std	Z+2, r26	; 0x02
     c80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c82:	fe 01       	movw	r30, r28
     c84:	e3 5b       	subi	r30, 0xB3	; 179
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	60 81       	ld	r22, Z
     c8a:	71 81       	ldd	r23, Z+1	; 0x01
     c8c:	82 81       	ldd	r24, Z+2	; 0x02
     c8e:	93 81       	ldd	r25, Z+3	; 0x03
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e8       	ldi	r20, 0x80	; 128
     c96:	5f e3       	ldi	r21, 0x3F	; 63
     c98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c9c:	88 23       	and	r24, r24
     c9e:	44 f4       	brge	.+16     	; 0xcb0 <OPTION1_setNewPassword+0x116>
		__ticks = 1;
     ca0:	fe 01       	movw	r30, r28
     ca2:	e5 5b       	subi	r30, 0xB5	; 181
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	91 83       	std	Z+1, r25	; 0x01
     cac:	80 83       	st	Z, r24
     cae:	64 c0       	rjmp	.+200    	; 0xd78 <OPTION1_setNewPassword+0x1de>
	else if (__tmp > 65535)
     cb0:	fe 01       	movw	r30, r28
     cb2:	e3 5b       	subi	r30, 0xB3	; 179
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	60 81       	ld	r22, Z
     cb8:	71 81       	ldd	r23, Z+1	; 0x01
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	3f ef       	ldi	r19, 0xFF	; 255
     cc2:	4f e7       	ldi	r20, 0x7F	; 127
     cc4:	57 e4       	ldi	r21, 0x47	; 71
     cc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cca:	18 16       	cp	r1, r24
     ccc:	0c f0       	brlt	.+2      	; 0xcd0 <OPTION1_setNewPassword+0x136>
     cce:	43 c0       	rjmp	.+134    	; 0xd56 <OPTION1_setNewPassword+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd0:	fe 01       	movw	r30, r28
     cd2:	ef 5a       	subi	r30, 0xAF	; 175
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	60 81       	ld	r22, Z
     cd8:	71 81       	ldd	r23, Z+1	; 0x01
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e2       	ldi	r20, 0x20	; 32
     ce4:	51 e4       	ldi	r21, 0x41	; 65
     ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	8e 01       	movw	r16, r28
     cf0:	05 5b       	subi	r16, 0xB5	; 181
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
     cf4:	bc 01       	movw	r22, r24
     cf6:	cd 01       	movw	r24, r26
     cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	f8 01       	movw	r30, r16
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
     d06:	1f c0       	rjmp	.+62     	; 0xd46 <OPTION1_setNewPassword+0x1ac>
     d08:	fe 01       	movw	r30, r28
     d0a:	e7 5b       	subi	r30, 0xB7	; 183
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	89 e1       	ldi	r24, 0x19	; 25
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d16:	fe 01       	movw	r30, r28
     d18:	e7 5b       	subi	r30, 0xB7	; 183
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	80 81       	ld	r24, Z
     d1e:	91 81       	ldd	r25, Z+1	; 0x01
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <OPTION1_setNewPassword+0x186>
     d24:	fe 01       	movw	r30, r28
     d26:	e7 5b       	subi	r30, 0xB7	; 183
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2e:	de 01       	movw	r26, r28
     d30:	a5 5b       	subi	r26, 0xB5	; 181
     d32:	bf 4f       	sbci	r27, 0xFF	; 255
     d34:	fe 01       	movw	r30, r28
     d36:	e5 5b       	subi	r30, 0xB5	; 181
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	11 96       	adiw	r26, 0x01	; 1
     d42:	9c 93       	st	X, r25
     d44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d46:	fe 01       	movw	r30, r28
     d48:	e5 5b       	subi	r30, 0xB5	; 181
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	d1 f6       	brne	.-76     	; 0xd08 <OPTION1_setNewPassword+0x16e>
     d54:	27 c0       	rjmp	.+78     	; 0xda4 <OPTION1_setNewPassword+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d56:	8e 01       	movw	r16, r28
     d58:	05 5b       	subi	r16, 0xB5	; 181
     d5a:	1f 4f       	sbci	r17, 0xFF	; 255
     d5c:	fe 01       	movw	r30, r28
     d5e:	e3 5b       	subi	r30, 0xB3	; 179
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	f8 01       	movw	r30, r16
     d74:	91 83       	std	Z+1, r25	; 0x01
     d76:	80 83       	st	Z, r24
     d78:	de 01       	movw	r26, r28
     d7a:	a9 5b       	subi	r26, 0xB9	; 185
     d7c:	bf 4f       	sbci	r27, 0xFF	; 255
     d7e:	fe 01       	movw	r30, r28
     d80:	e5 5b       	subi	r30, 0xB5	; 181
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	80 81       	ld	r24, Z
     d86:	91 81       	ldd	r25, Z+1	; 0x01
     d88:	8d 93       	st	X+, r24
     d8a:	9c 93       	st	X, r25
     d8c:	fe 01       	movw	r30, r28
     d8e:	e9 5b       	subi	r30, 0xB9	; 185
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	80 81       	ld	r24, Z
     d94:	91 81       	ldd	r25, Z+1	; 0x01
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <OPTION1_setNewPassword+0x1fc>
     d9a:	fe 01       	movw	r30, r28
     d9c:	e9 5b       	subi	r30, 0xB9	; 185
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	80 83       	st	Z, r24
		_delay_ms(250); /* Press time */
		counter++;
     da4:	de 01       	movw	r26, r28
     da6:	a6 5a       	subi	r26, 0xA6	; 166
     da8:	bf 4f       	sbci	r27, 0xFF	; 255
     daa:	fe 01       	movw	r30, r28
     dac:	e6 5a       	subi	r30, 0xA6	; 166
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	80 81       	ld	r24, Z
     db2:	8f 5f       	subi	r24, 0xFF	; 255
     db4:	8c 93       	st	X, r24
		key = KeyPad_getPressedKey(); /* get the pressed key number */
     db6:	0e 94 90 0c 	call	0x1920	; 0x1920 <KeyPad_getPressedKey>
     dba:	fe 01       	movw	r30, r28
     dbc:	e5 5a       	subi	r30, 0xA5	; 165
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	80 83       	st	Z, r24
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"New Pass :");

	key = KeyPad_getPressedKey();

	while( key != ENTER_KEY)
     dc2:	fe 01       	movw	r30, r28
     dc4:	e5 5a       	subi	r30, 0xA5	; 165
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 81       	ld	r24, Z
     dca:	8d 30       	cpi	r24, 0x0D	; 13
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <OPTION1_setNewPassword+0x236>
     dce:	1a cf       	rjmp	.-460    	; 0xc04 <OPTION1_setNewPassword+0x6a>
		str1 [counter] = key;
		_delay_ms(250); /* Press time */
		counter++;
		key = KeyPad_getPressedKey(); /* get the pressed key number */
	}
	str1 [counter] = '#';
     dd0:	fe 01       	movw	r30, r28
     dd2:	e6 5a       	subi	r30, 0xA6	; 166
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	80 81       	ld	r24, Z
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	fe 01       	movw	r30, r28
     dde:	e9 5a       	subi	r30, 0xA9	; 169
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	fc 01       	movw	r30, r24
     de8:	e2 0f       	add	r30, r18
     dea:	f3 1f       	adc	r31, r19
     dec:	83 e2       	ldi	r24, 0x23	; 35
     dee:	80 83       	st	Z, r24
	str1 [counter+1] = '\0';
     df0:	fe 01       	movw	r30, r28
     df2:	e6 5a       	subi	r30, 0xA6	; 166
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	80 81       	ld	r24, Z
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	9c 01       	movw	r18, r24
     dfe:	2f 5f       	subi	r18, 0xFF	; 255
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
     e02:	fe 01       	movw	r30, r28
     e04:	e9 5a       	subi	r30, 0xA9	; 169
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	fc 01       	movw	r30, r24
     e0e:	e2 0f       	add	r30, r18
     e10:	f3 1f       	adc	r31, r19
     e12:	10 82       	st	Z, r1
	///////////////////////////////////////
	counter =0;
     e14:	fe 01       	movw	r30, r28
     e16:	e6 5a       	subi	r30, 0xA6	; 166
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	10 82       	st	Z, r1
	LCD_clearScreen();
     e1c:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Re-enter Pass :");
     e20:	2b e8       	ldi	r18, 0x8B	; 139
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	a9 01       	movw	r20, r18
     e2a:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayStringRowColumn>

	key = KeyPad_getPressedKey();
     e2e:	0e 94 90 0c 	call	0x1920	; 0x1920 <KeyPad_getPressedKey>
     e32:	fe 01       	movw	r30, r28
     e34:	e5 5a       	subi	r30, 0xA5	; 165
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	80 83       	st	Z, r24
     e3a:	b1 c0       	rjmp	.+354    	; 0xf9e <OPTION1_setNewPassword+0x404>
	while( key != ENTER_KEY)
	{

		LCD_displayStringRowColumn(1,counter,"*");
     e3c:	fe 01       	movw	r30, r28
     e3e:	e6 5a       	subi	r30, 0xA6	; 166
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	29 e8       	ldi	r18, 0x89	; 137
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	60 81       	ld	r22, Z
     e4a:	a9 01       	movw	r20, r18
     e4c:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayStringRowColumn>
		str2 [counter] = key;
     e50:	fe 01       	movw	r30, r28
     e52:	e6 5a       	subi	r30, 0xA6	; 166
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	80 81       	ld	r24, Z
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	fe 01       	movw	r30, r28
     e5e:	eb 5a       	subi	r30, 0xAB	; 171
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	dc 01       	movw	r26, r24
     e68:	a2 0f       	add	r26, r18
     e6a:	b3 1f       	adc	r27, r19
     e6c:	fe 01       	movw	r30, r28
     e6e:	e5 5a       	subi	r30, 0xA5	; 165
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 81       	ld	r24, Z
     e74:	8c 93       	st	X, r24
     e76:	fe 01       	movw	r30, r28
     e78:	ed 5b       	subi	r30, 0xBD	; 189
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	aa e7       	ldi	r26, 0x7A	; 122
     e82:	b3 e4       	ldi	r27, 0x43	; 67
     e84:	80 83       	st	Z, r24
     e86:	91 83       	std	Z+1, r25	; 0x01
     e88:	a2 83       	std	Z+2, r26	; 0x02
     e8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8c:	8e 01       	movw	r16, r28
     e8e:	01 5c       	subi	r16, 0xC1	; 193
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	fe 01       	movw	r30, r28
     e94:	ed 5b       	subi	r30, 0xBD	; 189
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	4a e7       	ldi	r20, 0x7A	; 122
     ea6:	53 e4       	ldi	r21, 0x43	; 67
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	f8 01       	movw	r30, r16
     eb2:	80 83       	st	Z, r24
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	a2 83       	std	Z+2, r26	; 0x02
     eb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eba:	fe 01       	movw	r30, r28
     ebc:	ff 96       	adiw	r30, 0x3f	; 63
     ebe:	60 81       	ld	r22, Z
     ec0:	71 81       	ldd	r23, Z+1	; 0x01
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	93 81       	ldd	r25, Z+3	; 0x03
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e8       	ldi	r20, 0x80	; 128
     ecc:	5f e3       	ldi	r21, 0x3F	; 63
     ece:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed2:	88 23       	and	r24, r24
     ed4:	2c f4       	brge	.+10     	; 0xee0 <OPTION1_setNewPassword+0x346>
		__ticks = 1;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9e af       	std	Y+62, r25	; 0x3e
     edc:	8d af       	std	Y+61, r24	; 0x3d
     ede:	46 c0       	rjmp	.+140    	; 0xf6c <OPTION1_setNewPassword+0x3d2>
	else if (__tmp > 65535)
     ee0:	fe 01       	movw	r30, r28
     ee2:	ff 96       	adiw	r30, 0x3f	; 63
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	3f ef       	ldi	r19, 0xFF	; 255
     ef0:	4f e7       	ldi	r20, 0x7F	; 127
     ef2:	57 e4       	ldi	r21, 0x47	; 71
     ef4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef8:	18 16       	cp	r1, r24
     efa:	64 f5       	brge	.+88     	; 0xf54 <OPTION1_setNewPassword+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efc:	fe 01       	movw	r30, r28
     efe:	ed 5b       	subi	r30, 0xBD	; 189
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e2       	ldi	r20, 0x20	; 32
     f10:	51 e4       	ldi	r21, 0x41	; 65
     f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	bc 01       	movw	r22, r24
     f1c:	cd 01       	movw	r24, r26
     f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	9e af       	std	Y+62, r25	; 0x3e
     f28:	8d af       	std	Y+61, r24	; 0x3d
     f2a:	0f c0       	rjmp	.+30     	; 0xf4a <OPTION1_setNewPassword+0x3b0>
     f2c:	89 e1       	ldi	r24, 0x19	; 25
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9c af       	std	Y+60, r25	; 0x3c
     f32:	8b af       	std	Y+59, r24	; 0x3b
     f34:	8b ad       	ldd	r24, Y+59	; 0x3b
     f36:	9c ad       	ldd	r25, Y+60	; 0x3c
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <OPTION1_setNewPassword+0x39e>
     f3c:	9c af       	std	Y+60, r25	; 0x3c
     f3e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f40:	8d ad       	ldd	r24, Y+61	; 0x3d
     f42:	9e ad       	ldd	r25, Y+62	; 0x3e
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	9e af       	std	Y+62, r25	; 0x3e
     f48:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4a:	8d ad       	ldd	r24, Y+61	; 0x3d
     f4c:	9e ad       	ldd	r25, Y+62	; 0x3e
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	69 f7       	brne	.-38     	; 0xf2c <OPTION1_setNewPassword+0x392>
     f52:	16 c0       	rjmp	.+44     	; 0xf80 <OPTION1_setNewPassword+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f54:	fe 01       	movw	r30, r28
     f56:	ff 96       	adiw	r30, 0x3f	; 63
     f58:	60 81       	ld	r22, Z
     f5a:	71 81       	ldd	r23, Z+1	; 0x01
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9e af       	std	Y+62, r25	; 0x3e
     f6a:	8d af       	std	Y+61, r24	; 0x3d
     f6c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f6e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f70:	9a af       	std	Y+58, r25	; 0x3a
     f72:	89 af       	std	Y+57, r24	; 0x39
     f74:	89 ad       	ldd	r24, Y+57	; 0x39
     f76:	9a ad       	ldd	r25, Y+58	; 0x3a
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <OPTION1_setNewPassword+0x3de>
     f7c:	9a af       	std	Y+58, r25	; 0x3a
     f7e:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(250); /* Press time */
		counter++;
     f80:	de 01       	movw	r26, r28
     f82:	a6 5a       	subi	r26, 0xA6	; 166
     f84:	bf 4f       	sbci	r27, 0xFF	; 255
     f86:	fe 01       	movw	r30, r28
     f88:	e6 5a       	subi	r30, 0xA6	; 166
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 81       	ld	r24, Z
     f8e:	8f 5f       	subi	r24, 0xFF	; 255
     f90:	8c 93       	st	X, r24
		key = KeyPad_getPressedKey(); /* get the pressed key number */
     f92:	0e 94 90 0c 	call	0x1920	; 0x1920 <KeyPad_getPressedKey>
     f96:	fe 01       	movw	r30, r28
     f98:	e5 5a       	subi	r30, 0xA5	; 165
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 83       	st	Z, r24
	counter =0;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Re-enter Pass :");

	key = KeyPad_getPressedKey();
	while( key != ENTER_KEY)
     f9e:	fe 01       	movw	r30, r28
     fa0:	e5 5a       	subi	r30, 0xA5	; 165
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	80 81       	ld	r24, Z
     fa6:	8d 30       	cpi	r24, 0x0D	; 13
     fa8:	09 f0       	breq	.+2      	; 0xfac <OPTION1_setNewPassword+0x412>
     faa:	48 cf       	rjmp	.-368    	; 0xe3c <OPTION1_setNewPassword+0x2a2>
		str2 [counter] = key;
		_delay_ms(250); /* Press time */
		counter++;
		key = KeyPad_getPressedKey(); /* get the pressed key number */
	}
	str2 [counter] = '#';
     fac:	fe 01       	movw	r30, r28
     fae:	e6 5a       	subi	r30, 0xA6	; 166
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 81       	ld	r24, Z
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	fe 01       	movw	r30, r28
     fba:	eb 5a       	subi	r30, 0xAB	; 171
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	80 81       	ld	r24, Z
     fc0:	91 81       	ldd	r25, Z+1	; 0x01
     fc2:	fc 01       	movw	r30, r24
     fc4:	e2 0f       	add	r30, r18
     fc6:	f3 1f       	adc	r31, r19
     fc8:	83 e2       	ldi	r24, 0x23	; 35
     fca:	80 83       	st	Z, r24
	str2 [counter+1] = '\0';
     fcc:	fe 01       	movw	r30, r28
     fce:	e6 5a       	subi	r30, 0xA6	; 166
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9c 01       	movw	r18, r24
     fda:	2f 5f       	subi	r18, 0xFF	; 255
     fdc:	3f 4f       	sbci	r19, 0xFF	; 255
     fde:	fe 01       	movw	r30, r28
     fe0:	eb 5a       	subi	r30, 0xAB	; 171
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	80 81       	ld	r24, Z
     fe6:	91 81       	ldd	r25, Z+1	; 0x01
     fe8:	fc 01       	movw	r30, r24
     fea:	e2 0f       	add	r30, r18
     fec:	f3 1f       	adc	r31, r19
     fee:	10 82       	st	Z, r1

	cmp = strcmp(str1,str2);
     ff0:	fe 01       	movw	r30, r28
     ff2:	e9 5a       	subi	r30, 0xA9	; 169
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	fe 01       	movw	r30, r28
     ffc:	eb 5a       	subi	r30, 0xAB	; 171
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	20 81       	ld	r18, Z
    1002:	31 81       	ldd	r19, Z+1	; 0x01
    1004:	b9 01       	movw	r22, r18
    1006:	0e 94 35 13 	call	0x266a	; 0x266a <strcmp>
    100a:	fe 01       	movw	r30, r28
    100c:	e7 5a       	subi	r30, 0xA7	; 167
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 83       	st	Z, r24
	if (cmp != 0)
    1012:	fe 01       	movw	r30, r28
    1014:	e7 5a       	subi	r30, 0xA7	; 167
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	88 23       	and	r24, r24
    101c:	09 f4       	brne	.+2      	; 0x1020 <OPTION1_setNewPassword+0x486>
    101e:	7e c0       	rjmp	.+252    	; 0x111c <OPTION1_setNewPassword+0x582>
	{
		LCD_clearScreen();
    1020:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,1,"Mismatch Pass");
    1024:	2b e9       	ldi	r18, 0x9B	; 155
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	a9 01       	movw	r20, r18
    102e:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayStringRowColumn>
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	aa ef       	ldi	r26, 0xFA	; 250
    1038:	b4 e4       	ldi	r27, 0x44	; 68
    103a:	8d ab       	std	Y+53, r24	; 0x35
    103c:	9e ab       	std	Y+54, r25	; 0x36
    103e:	af ab       	std	Y+55, r26	; 0x37
    1040:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1042:	6d a9       	ldd	r22, Y+53	; 0x35
    1044:	7e a9       	ldd	r23, Y+54	; 0x36
    1046:	8f a9       	ldd	r24, Y+55	; 0x37
    1048:	98 ad       	ldd	r25, Y+56	; 0x38
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	4a e7       	ldi	r20, 0x7A	; 122
    1050:	53 e4       	ldi	r21, 0x43	; 67
    1052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	89 ab       	std	Y+49, r24	; 0x31
    105c:	9a ab       	std	Y+50, r25	; 0x32
    105e:	ab ab       	std	Y+51, r26	; 0x33
    1060:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1062:	69 a9       	ldd	r22, Y+49	; 0x31
    1064:	7a a9       	ldd	r23, Y+50	; 0x32
    1066:	8b a9       	ldd	r24, Y+51	; 0x33
    1068:	9c a9       	ldd	r25, Y+52	; 0x34
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e8       	ldi	r20, 0x80	; 128
    1070:	5f e3       	ldi	r21, 0x3F	; 63
    1072:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1076:	88 23       	and	r24, r24
    1078:	2c f4       	brge	.+10     	; 0x1084 <OPTION1_setNewPassword+0x4ea>
		__ticks = 1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	98 ab       	std	Y+48, r25	; 0x30
    1080:	8f a7       	std	Y+47, r24	; 0x2f
    1082:	3f c0       	rjmp	.+126    	; 0x1102 <OPTION1_setNewPassword+0x568>
	else if (__tmp > 65535)
    1084:	69 a9       	ldd	r22, Y+49	; 0x31
    1086:	7a a9       	ldd	r23, Y+50	; 0x32
    1088:	8b a9       	ldd	r24, Y+51	; 0x33
    108a:	9c a9       	ldd	r25, Y+52	; 0x34
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	3f ef       	ldi	r19, 0xFF	; 255
    1090:	4f e7       	ldi	r20, 0x7F	; 127
    1092:	57 e4       	ldi	r21, 0x47	; 71
    1094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1098:	18 16       	cp	r1, r24
    109a:	4c f5       	brge	.+82     	; 0x10ee <OPTION1_setNewPassword+0x554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109c:	6d a9       	ldd	r22, Y+53	; 0x35
    109e:	7e a9       	ldd	r23, Y+54	; 0x36
    10a0:	8f a9       	ldd	r24, Y+55	; 0x37
    10a2:	98 ad       	ldd	r25, Y+56	; 0x38
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e2       	ldi	r20, 0x20	; 32
    10aa:	51 e4       	ldi	r21, 0x41	; 65
    10ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	bc 01       	movw	r22, r24
    10b6:	cd 01       	movw	r24, r26
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	98 ab       	std	Y+48, r25	; 0x30
    10c2:	8f a7       	std	Y+47, r24	; 0x2f
    10c4:	0f c0       	rjmp	.+30     	; 0x10e4 <OPTION1_setNewPassword+0x54a>
    10c6:	89 e1       	ldi	r24, 0x19	; 25
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	9e a7       	std	Y+46, r25	; 0x2e
    10cc:	8d a7       	std	Y+45, r24	; 0x2d
    10ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    10d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <OPTION1_setNewPassword+0x538>
    10d6:	9e a7       	std	Y+46, r25	; 0x2e
    10d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10da:	8f a5       	ldd	r24, Y+47	; 0x2f
    10dc:	98 a9       	ldd	r25, Y+48	; 0x30
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	98 ab       	std	Y+48, r25	; 0x30
    10e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    10e6:	98 a9       	ldd	r25, Y+48	; 0x30
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	69 f7       	brne	.-38     	; 0x10c6 <OPTION1_setNewPassword+0x52c>
    10ec:	14 c0       	rjmp	.+40     	; 0x1116 <OPTION1_setNewPassword+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ee:	69 a9       	ldd	r22, Y+49	; 0x31
    10f0:	7a a9       	ldd	r23, Y+50	; 0x32
    10f2:	8b a9       	ldd	r24, Y+51	; 0x33
    10f4:	9c a9       	ldd	r25, Y+52	; 0x34
    10f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	98 ab       	std	Y+48, r25	; 0x30
    1100:	8f a7       	std	Y+47, r24	; 0x2f
    1102:	8f a5       	ldd	r24, Y+47	; 0x2f
    1104:	98 a9       	ldd	r25, Y+48	; 0x30
    1106:	9c a7       	std	Y+44, r25	; 0x2c
    1108:	8b a7       	std	Y+43, r24	; 0x2b
    110a:	8b a5       	ldd	r24, Y+43	; 0x2b
    110c:	9c a5       	ldd	r25, Y+44	; 0x2c
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <OPTION1_setNewPassword+0x574>
    1112:	9c a7       	std	Y+44, r25	; 0x2c
    1114:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000);
		OPTION1_setNewPassword();
    1116:	0e 94 cd 05 	call	0xb9a	; 0xb9a <OPTION1_setNewPassword>
    111a:	69 c1       	rjmp	.+722    	; 0x13ee <OPTION1_setNewPassword+0x854>
	}
	else   // Matched password so save it in eeprom
	{

		UART_sendByte(SAVE_PASSWORD_COMMAND);
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_sendByte>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a8 ec       	ldi	r26, 0xC8	; 200
    1128:	b2 e4       	ldi	r27, 0x42	; 66
    112a:	8f a3       	std	Y+39, r24	; 0x27
    112c:	98 a7       	std	Y+40, r25	; 0x28
    112e:	a9 a7       	std	Y+41, r26	; 0x29
    1130:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1132:	6f a1       	ldd	r22, Y+39	; 0x27
    1134:	78 a5       	ldd	r23, Y+40	; 0x28
    1136:	89 a5       	ldd	r24, Y+41	; 0x29
    1138:	9a a5       	ldd	r25, Y+42	; 0x2a
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	4a e7       	ldi	r20, 0x7A	; 122
    1140:	53 e4       	ldi	r21, 0x43	; 67
    1142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	8b a3       	std	Y+35, r24	; 0x23
    114c:	9c a3       	std	Y+36, r25	; 0x24
    114e:	ad a3       	std	Y+37, r26	; 0x25
    1150:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1152:	6b a1       	ldd	r22, Y+35	; 0x23
    1154:	7c a1       	ldd	r23, Y+36	; 0x24
    1156:	8d a1       	ldd	r24, Y+37	; 0x25
    1158:	9e a1       	ldd	r25, Y+38	; 0x26
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e8       	ldi	r20, 0x80	; 128
    1160:	5f e3       	ldi	r21, 0x3F	; 63
    1162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1166:	88 23       	and	r24, r24
    1168:	2c f4       	brge	.+10     	; 0x1174 <OPTION1_setNewPassword+0x5da>
		__ticks = 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	9a a3       	std	Y+34, r25	; 0x22
    1170:	89 a3       	std	Y+33, r24	; 0x21
    1172:	3f c0       	rjmp	.+126    	; 0x11f2 <OPTION1_setNewPassword+0x658>
	else if (__tmp > 65535)
    1174:	6b a1       	ldd	r22, Y+35	; 0x23
    1176:	7c a1       	ldd	r23, Y+36	; 0x24
    1178:	8d a1       	ldd	r24, Y+37	; 0x25
    117a:	9e a1       	ldd	r25, Y+38	; 0x26
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	3f ef       	ldi	r19, 0xFF	; 255
    1180:	4f e7       	ldi	r20, 0x7F	; 127
    1182:	57 e4       	ldi	r21, 0x47	; 71
    1184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1188:	18 16       	cp	r1, r24
    118a:	4c f5       	brge	.+82     	; 0x11de <OPTION1_setNewPassword+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118c:	6f a1       	ldd	r22, Y+39	; 0x27
    118e:	78 a5       	ldd	r23, Y+40	; 0x28
    1190:	89 a5       	ldd	r24, Y+41	; 0x29
    1192:	9a a5       	ldd	r25, Y+42	; 0x2a
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e2       	ldi	r20, 0x20	; 32
    119a:	51 e4       	ldi	r21, 0x41	; 65
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	9a a3       	std	Y+34, r25	; 0x22
    11b2:	89 a3       	std	Y+33, r24	; 0x21
    11b4:	0f c0       	rjmp	.+30     	; 0x11d4 <OPTION1_setNewPassword+0x63a>
    11b6:	89 e1       	ldi	r24, 0x19	; 25
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	98 a3       	std	Y+32, r25	; 0x20
    11bc:	8f 8f       	std	Y+31, r24	; 0x1f
    11be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11c0:	98 a1       	ldd	r25, Y+32	; 0x20
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <OPTION1_setNewPassword+0x628>
    11c6:	98 a3       	std	Y+32, r25	; 0x20
    11c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ca:	89 a1       	ldd	r24, Y+33	; 0x21
    11cc:	9a a1       	ldd	r25, Y+34	; 0x22
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	9a a3       	std	Y+34, r25	; 0x22
    11d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d4:	89 a1       	ldd	r24, Y+33	; 0x21
    11d6:	9a a1       	ldd	r25, Y+34	; 0x22
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	69 f7       	brne	.-38     	; 0x11b6 <OPTION1_setNewPassword+0x61c>
    11dc:	14 c0       	rjmp	.+40     	; 0x1206 <OPTION1_setNewPassword+0x66c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11de:	6b a1       	ldd	r22, Y+35	; 0x23
    11e0:	7c a1       	ldd	r23, Y+36	; 0x24
    11e2:	8d a1       	ldd	r24, Y+37	; 0x25
    11e4:	9e a1       	ldd	r25, Y+38	; 0x26
    11e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	9a a3       	std	Y+34, r25	; 0x22
    11f0:	89 a3       	std	Y+33, r24	; 0x21
    11f2:	89 a1       	ldd	r24, Y+33	; 0x21
    11f4:	9a a1       	ldd	r25, Y+34	; 0x22
    11f6:	9e 8f       	std	Y+30, r25	; 0x1e
    11f8:	8d 8f       	std	Y+29, r24	; 0x1d
    11fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <OPTION1_setNewPassword+0x664>
    1202:	9e 8f       	std	Y+30, r25	; 0x1e
    1204:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		if( UART_recieveByte() == SAVE_PASSWORD_COMMAND)
    1206:	0e 94 83 12 	call	0x2506	; 0x2506 <UART_recieveByte>
    120a:	88 23       	and	r24, r24
    120c:	09 f0       	breq	.+2      	; 0x1210 <OPTION1_setNewPassword+0x676>
    120e:	79 c0       	rjmp	.+242    	; 0x1302 <OPTION1_setNewPassword+0x768>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a8 ec       	ldi	r26, 0xC8	; 200
    1216:	b2 e4       	ldi	r27, 0x42	; 66
    1218:	89 8f       	std	Y+25, r24	; 0x19
    121a:	9a 8f       	std	Y+26, r25	; 0x1a
    121c:	ab 8f       	std	Y+27, r26	; 0x1b
    121e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1220:	69 8d       	ldd	r22, Y+25	; 0x19
    1222:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1224:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1226:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	4a e7       	ldi	r20, 0x7A	; 122
    122e:	53 e4       	ldi	r21, 0x43	; 67
    1230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	8d 8b       	std	Y+21, r24	; 0x15
    123a:	9e 8b       	std	Y+22, r25	; 0x16
    123c:	af 8b       	std	Y+23, r26	; 0x17
    123e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1240:	6d 89       	ldd	r22, Y+21	; 0x15
    1242:	7e 89       	ldd	r23, Y+22	; 0x16
    1244:	8f 89       	ldd	r24, Y+23	; 0x17
    1246:	98 8d       	ldd	r25, Y+24	; 0x18
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e8       	ldi	r20, 0x80	; 128
    124e:	5f e3       	ldi	r21, 0x3F	; 63
    1250:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1254:	88 23       	and	r24, r24
    1256:	2c f4       	brge	.+10     	; 0x1262 <OPTION1_setNewPassword+0x6c8>
		__ticks = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9c 8b       	std	Y+20, r25	; 0x14
    125e:	8b 8b       	std	Y+19, r24	; 0x13
    1260:	3f c0       	rjmp	.+126    	; 0x12e0 <OPTION1_setNewPassword+0x746>
	else if (__tmp > 65535)
    1262:	6d 89       	ldd	r22, Y+21	; 0x15
    1264:	7e 89       	ldd	r23, Y+22	; 0x16
    1266:	8f 89       	ldd	r24, Y+23	; 0x17
    1268:	98 8d       	ldd	r25, Y+24	; 0x18
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	4f e7       	ldi	r20, 0x7F	; 127
    1270:	57 e4       	ldi	r21, 0x47	; 71
    1272:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1276:	18 16       	cp	r1, r24
    1278:	4c f5       	brge	.+82     	; 0x12cc <OPTION1_setNewPassword+0x732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127a:	69 8d       	ldd	r22, Y+25	; 0x19
    127c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    127e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1280:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e2       	ldi	r20, 0x20	; 32
    1288:	51 e4       	ldi	r21, 0x41	; 65
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9c 8b       	std	Y+20, r25	; 0x14
    12a0:	8b 8b       	std	Y+19, r24	; 0x13
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <OPTION1_setNewPassword+0x728>
    12a4:	89 e1       	ldi	r24, 0x19	; 25
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9a 8b       	std	Y+18, r25	; 0x12
    12aa:	89 8b       	std	Y+17, r24	; 0x11
    12ac:	89 89       	ldd	r24, Y+17	; 0x11
    12ae:	9a 89       	ldd	r25, Y+18	; 0x12
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <OPTION1_setNewPassword+0x716>
    12b4:	9a 8b       	std	Y+18, r25	; 0x12
    12b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ba:	9c 89       	ldd	r25, Y+20	; 0x14
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	9c 8b       	std	Y+20, r25	; 0x14
    12c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c2:	8b 89       	ldd	r24, Y+19	; 0x13
    12c4:	9c 89       	ldd	r25, Y+20	; 0x14
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	69 f7       	brne	.-38     	; 0x12a4 <OPTION1_setNewPassword+0x70a>
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <OPTION1_setNewPassword+0x75a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12cc:	6d 89       	ldd	r22, Y+21	; 0x15
    12ce:	7e 89       	ldd	r23, Y+22	; 0x16
    12d0:	8f 89       	ldd	r24, Y+23	; 0x17
    12d2:	98 8d       	ldd	r25, Y+24	; 0x18
    12d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	8b 8b       	std	Y+19, r24	; 0x13
    12e0:	8b 89       	ldd	r24, Y+19	; 0x13
    12e2:	9c 89       	ldd	r25, Y+20	; 0x14
    12e4:	98 8b       	std	Y+16, r25	; 0x10
    12e6:	8f 87       	std	Y+15, r24	; 0x0f
    12e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ea:	98 89       	ldd	r25, Y+16	; 0x10
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <OPTION1_setNewPassword+0x752>
    12f0:	98 8b       	std	Y+16, r25	; 0x10
    12f2:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(100);
			UART_sendString(str2);
    12f4:	fe 01       	movw	r30, r28
    12f6:	eb 5a       	subi	r30, 0xAB	; 171
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	0e 94 92 12 	call	0x2524	; 0x2524 <UART_sendString>
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a8 ec       	ldi	r26, 0xC8	; 200
    1308:	b2 e4       	ldi	r27, 0x42	; 66
    130a:	8b 87       	std	Y+11, r24	; 0x0b
    130c:	9c 87       	std	Y+12, r25	; 0x0c
    130e:	ad 87       	std	Y+13, r26	; 0x0d
    1310:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1312:	6b 85       	ldd	r22, Y+11	; 0x0b
    1314:	7c 85       	ldd	r23, Y+12	; 0x0c
    1316:	8d 85       	ldd	r24, Y+13	; 0x0d
    1318:	9e 85       	ldd	r25, Y+14	; 0x0e
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	4a e7       	ldi	r20, 0x7A	; 122
    1320:	53 e4       	ldi	r21, 0x43	; 67
    1322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	8f 83       	std	Y+7, r24	; 0x07
    132c:	98 87       	std	Y+8, r25	; 0x08
    132e:	a9 87       	std	Y+9, r26	; 0x09
    1330:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1332:	6f 81       	ldd	r22, Y+7	; 0x07
    1334:	78 85       	ldd	r23, Y+8	; 0x08
    1336:	89 85       	ldd	r24, Y+9	; 0x09
    1338:	9a 85       	ldd	r25, Y+10	; 0x0a
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e8       	ldi	r20, 0x80	; 128
    1340:	5f e3       	ldi	r21, 0x3F	; 63
    1342:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1346:	88 23       	and	r24, r24
    1348:	2c f4       	brge	.+10     	; 0x1354 <OPTION1_setNewPassword+0x7ba>
		__ticks = 1;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	3f c0       	rjmp	.+126    	; 0x13d2 <OPTION1_setNewPassword+0x838>
	else if (__tmp > 65535)
    1354:	6f 81       	ldd	r22, Y+7	; 0x07
    1356:	78 85       	ldd	r23, Y+8	; 0x08
    1358:	89 85       	ldd	r24, Y+9	; 0x09
    135a:	9a 85       	ldd	r25, Y+10	; 0x0a
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	3f ef       	ldi	r19, 0xFF	; 255
    1360:	4f e7       	ldi	r20, 0x7F	; 127
    1362:	57 e4       	ldi	r21, 0x47	; 71
    1364:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1368:	18 16       	cp	r1, r24
    136a:	4c f5       	brge	.+82     	; 0x13be <OPTION1_setNewPassword+0x824>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136c:	6b 85       	ldd	r22, Y+11	; 0x0b
    136e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1370:	8d 85       	ldd	r24, Y+13	; 0x0d
    1372:	9e 85       	ldd	r25, Y+14	; 0x0e
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e2       	ldi	r20, 0x20	; 32
    137a:	51 e4       	ldi	r21, 0x41	; 65
    137c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	9e 83       	std	Y+6, r25	; 0x06
    1392:	8d 83       	std	Y+5, r24	; 0x05
    1394:	0f c0       	rjmp	.+30     	; 0x13b4 <OPTION1_setNewPassword+0x81a>
    1396:	89 e1       	ldi	r24, 0x19	; 25
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	9c 83       	std	Y+4, r25	; 0x04
    139c:	8b 83       	std	Y+3, r24	; 0x03
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <OPTION1_setNewPassword+0x808>
    13a6:	9c 83       	std	Y+4, r25	; 0x04
    13a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	69 f7       	brne	.-38     	; 0x1396 <OPTION1_setNewPassword+0x7fc>
    13bc:	14 c0       	rjmp	.+40     	; 0x13e6 <OPTION1_setNewPassword+0x84c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13be:	6f 81       	ldd	r22, Y+7	; 0x07
    13c0:	78 85       	ldd	r23, Y+8	; 0x08
    13c2:	89 85       	ldd	r24, Y+9	; 0x09
    13c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	9e 83       	std	Y+6, r25	; 0x06
    13d0:	8d 83       	std	Y+5, r24	; 0x05
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	9a 81       	ldd	r25, Y+2	; 0x02
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <OPTION1_setNewPassword+0x844>
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(100);
		while( UART_recieveByte() != PASSWORD_SAVED);
    13e6:	0e 94 83 12 	call	0x2506	; 0x2506 <UART_recieveByte>
    13ea:	86 30       	cpi	r24, 0x06	; 6
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <OPTION1_setNewPassword+0x84c>


	}
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
}
    13ee:	c5 59       	subi	r28, 0x95	; 149
    13f0:	df 4f       	sbci	r29, 0xFF	; 255
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	08 95       	ret

00001406 <OPTION2_ChangePassword>:



void OPTION2_ChangePassword()
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62

	if( GET_passwordAndCheck() )
    140e:	0e 94 47 0a 	call	0x148e	; 0x148e <GET_passwordAndCheck>
    1412:	88 23       	and	r24, r24
    1414:	19 f0       	breq	.+6      	; 0x141c <OPTION2_ChangePassword+0x16>
	{
		OPTION1_setNewPassword();
    1416:	0e 94 cd 05 	call	0xb9a	; 0xb9a <OPTION1_setNewPassword>
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <OPTION2_ChangePassword+0x1e>
	}
	else
	{
		OPTION4_mismatchPassword(OPTION1_setNewPassword);
    141c:	8d ec       	ldi	r24, 0xCD	; 205
    141e:	95 e0       	ldi	r25, 0x05	; 5
    1420:	0e 94 27 0a 	call	0x144e	; 0x144e <OPTION4_mismatchPassword>
	}

}
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <OPTION3_openDoor>:

void OPTION3_openDoor()
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
	if( GET_passwordAndCheck() )
    1432:	0e 94 47 0a 	call	0x148e	; 0x148e <GET_passwordAndCheck>
    1436:	88 23       	and	r24, r24
    1438:	19 f0       	breq	.+6      	; 0x1440 <OPTION3_openDoor+0x16>
	{
		OPENING_door();
    143a:	0e 94 82 0c 	call	0x1904	; 0x1904 <OPENING_door>
    143e:	04 c0       	rjmp	.+8      	; 0x1448 <OPTION3_openDoor+0x1e>
	}
	else
	{
		OPTION4_mismatchPassword(OPENING_door);
    1440:	82 e8       	ldi	r24, 0x82	; 130
    1442:	9c e0       	ldi	r25, 0x0C	; 12
    1444:	0e 94 27 0a 	call	0x144e	; 0x144e <OPTION4_mismatchPassword>
	}

}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <OPTION4_mismatchPassword>:


void OPTION4_mismatchPassword( void(*ptr) (void) )
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <OPTION4_mismatchPassword+0x6>
    1454:	0f 92       	push	r0
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	9b 83       	std	Y+3, r25	; 0x03
    145c:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0 ; i < 5 ; i++)
    145e:	19 82       	std	Y+1, r1	; 0x01
    1460:	0b c0       	rjmp	.+22     	; 0x1478 <OPTION4_mismatchPassword+0x2a>
	{
		if( GET_passwordAndCheck() )
    1462:	0e 94 47 0a 	call	0x148e	; 0x148e <GET_passwordAndCheck>
    1466:	88 23       	and	r24, r24
    1468:	21 f0       	breq	.+8      	; 0x1472 <OPTION4_mismatchPassword+0x24>
		{
			(*ptr)();
    146a:	ea 81       	ldd	r30, Y+2	; 0x02
    146c:	fb 81       	ldd	r31, Y+3	; 0x03
    146e:	09 95       	icall
    1470:	08 c0       	rjmp	.+16     	; 0x1482 <OPTION4_mismatchPassword+0x34>
}


void OPTION4_mismatchPassword( void(*ptr) (void) )
{
	for(uint8 i = 0 ; i < 5 ; i++)
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	8f 5f       	subi	r24, 0xFF	; 255
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	85 30       	cpi	r24, 0x05	; 5
    147c:	90 f3       	brcs	.-28     	; 0x1462 <OPTION4_mismatchPassword+0x14>
			return;

		}
	}

	LOCK_and_Buzzer();
    147e:	0e 94 89 0c 	call	0x1912	; 0x1912 <LOCK_and_Buzzer>
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <GET_passwordAndCheck>:




bool GET_passwordAndCheck()
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	c5 54       	subi	r28, 0x45	; 69
    1498:	d0 40       	sbci	r29, 0x00	; 0
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
	uint8 key,counter =0;
    14a4:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 Str_passwordInput[8];
	uint8 *str1 = Str_passwordInput ;
    14a6:	ce 01       	movw	r24, r28
    14a8:	cd 96       	adiw	r24, 0x3d	; 61
    14aa:	9a af       	std	Y+58, r25	; 0x3a
    14ac:	89 af       	std	Y+57, r24	; 0x39
	LCD_clearScreen();
    14ae:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Pass :");
    14b2:	29 ea       	ldi	r18, 0xA9	; 169
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	a9 01       	movw	r20, r18
    14bc:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayStringRowColumn>
	//LCD_displayStringRowColumn(1,0,"- : Open Door");
	key = KeyPad_getPressedKey();
    14c0:	0e 94 90 0c 	call	0x1920	; 0x1920 <KeyPad_getPressedKey>
    14c4:	8c af       	std	Y+60, r24	; 0x3c
    14c6:	89 c0       	rjmp	.+274    	; 0x15da <GET_passwordAndCheck+0x14c>

	while( key != ENTER_KEY)
	{
		LCD_displayStringRowColumn(1,counter,"*");
    14c8:	29 e8       	ldi	r18, 0x89	; 137
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	6b ad       	ldd	r22, Y+59	; 0x3b
    14d0:	a9 01       	movw	r20, r18
    14d2:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayStringRowColumn>
		str1 [counter] = key;
    14d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	89 ad       	ldd	r24, Y+57	; 0x39
    14de:	9a ad       	ldd	r25, Y+58	; 0x3a
    14e0:	fc 01       	movw	r30, r24
    14e2:	e2 0f       	add	r30, r18
    14e4:	f3 1f       	adc	r31, r19
    14e6:	8c ad       	ldd	r24, Y+60	; 0x3c
    14e8:	80 83       	st	Z, r24
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	aa e7       	ldi	r26, 0x7A	; 122
    14f0:	b3 e4       	ldi	r27, 0x43	; 67
    14f2:	8d ab       	std	Y+53, r24	; 0x35
    14f4:	9e ab       	std	Y+54, r25	; 0x36
    14f6:	af ab       	std	Y+55, r26	; 0x37
    14f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fa:	6d a9       	ldd	r22, Y+53	; 0x35
    14fc:	7e a9       	ldd	r23, Y+54	; 0x36
    14fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1500:	98 ad       	ldd	r25, Y+56	; 0x38
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	4a e7       	ldi	r20, 0x7A	; 122
    1508:	53 e4       	ldi	r21, 0x43	; 67
    150a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	89 ab       	std	Y+49, r24	; 0x31
    1514:	9a ab       	std	Y+50, r25	; 0x32
    1516:	ab ab       	std	Y+51, r26	; 0x33
    1518:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    151a:	69 a9       	ldd	r22, Y+49	; 0x31
    151c:	7a a9       	ldd	r23, Y+50	; 0x32
    151e:	8b a9       	ldd	r24, Y+51	; 0x33
    1520:	9c a9       	ldd	r25, Y+52	; 0x34
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e8       	ldi	r20, 0x80	; 128
    1528:	5f e3       	ldi	r21, 0x3F	; 63
    152a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    152e:	88 23       	and	r24, r24
    1530:	2c f4       	brge	.+10     	; 0x153c <GET_passwordAndCheck+0xae>
		__ticks = 1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	98 ab       	std	Y+48, r25	; 0x30
    1538:	8f a7       	std	Y+47, r24	; 0x2f
    153a:	3f c0       	rjmp	.+126    	; 0x15ba <GET_passwordAndCheck+0x12c>
	else if (__tmp > 65535)
    153c:	69 a9       	ldd	r22, Y+49	; 0x31
    153e:	7a a9       	ldd	r23, Y+50	; 0x32
    1540:	8b a9       	ldd	r24, Y+51	; 0x33
    1542:	9c a9       	ldd	r25, Y+52	; 0x34
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	3f ef       	ldi	r19, 0xFF	; 255
    1548:	4f e7       	ldi	r20, 0x7F	; 127
    154a:	57 e4       	ldi	r21, 0x47	; 71
    154c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1550:	18 16       	cp	r1, r24
    1552:	4c f5       	brge	.+82     	; 0x15a6 <GET_passwordAndCheck+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1554:	6d a9       	ldd	r22, Y+53	; 0x35
    1556:	7e a9       	ldd	r23, Y+54	; 0x36
    1558:	8f a9       	ldd	r24, Y+55	; 0x37
    155a:	98 ad       	ldd	r25, Y+56	; 0x38
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e2       	ldi	r20, 0x20	; 32
    1562:	51 e4       	ldi	r21, 0x41	; 65
    1564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	bc 01       	movw	r22, r24
    156e:	cd 01       	movw	r24, r26
    1570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	98 ab       	std	Y+48, r25	; 0x30
    157a:	8f a7       	std	Y+47, r24	; 0x2f
    157c:	0f c0       	rjmp	.+30     	; 0x159c <GET_passwordAndCheck+0x10e>
    157e:	89 e1       	ldi	r24, 0x19	; 25
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9e a7       	std	Y+46, r25	; 0x2e
    1584:	8d a7       	std	Y+45, r24	; 0x2d
    1586:	8d a5       	ldd	r24, Y+45	; 0x2d
    1588:	9e a5       	ldd	r25, Y+46	; 0x2e
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	f1 f7       	brne	.-4      	; 0x158a <GET_passwordAndCheck+0xfc>
    158e:	9e a7       	std	Y+46, r25	; 0x2e
    1590:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1592:	8f a5       	ldd	r24, Y+47	; 0x2f
    1594:	98 a9       	ldd	r25, Y+48	; 0x30
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	98 ab       	std	Y+48, r25	; 0x30
    159a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159c:	8f a5       	ldd	r24, Y+47	; 0x2f
    159e:	98 a9       	ldd	r25, Y+48	; 0x30
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	69 f7       	brne	.-38     	; 0x157e <GET_passwordAndCheck+0xf0>
    15a4:	14 c0       	rjmp	.+40     	; 0x15ce <GET_passwordAndCheck+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a6:	69 a9       	ldd	r22, Y+49	; 0x31
    15a8:	7a a9       	ldd	r23, Y+50	; 0x32
    15aa:	8b a9       	ldd	r24, Y+51	; 0x33
    15ac:	9c a9       	ldd	r25, Y+52	; 0x34
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	98 ab       	std	Y+48, r25	; 0x30
    15b8:	8f a7       	std	Y+47, r24	; 0x2f
    15ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    15bc:	98 a9       	ldd	r25, Y+48	; 0x30
    15be:	9c a7       	std	Y+44, r25	; 0x2c
    15c0:	8b a7       	std	Y+43, r24	; 0x2b
    15c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <GET_passwordAndCheck+0x138>
    15ca:	9c a7       	std	Y+44, r25	; 0x2c
    15cc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(250); /* Press time */
		counter++;
    15ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    15d0:	8f 5f       	subi	r24, 0xFF	; 255
    15d2:	8b af       	std	Y+59, r24	; 0x3b
		key = KeyPad_getPressedKey(); /* get the pressed key number */
    15d4:	0e 94 90 0c 	call	0x1920	; 0x1920 <KeyPad_getPressedKey>
    15d8:	8c af       	std	Y+60, r24	; 0x3c
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Enter Pass :");
	//LCD_displayStringRowColumn(1,0,"- : Open Door");
	key = KeyPad_getPressedKey();

	while( key != ENTER_KEY)
    15da:	8c ad       	ldd	r24, Y+60	; 0x3c
    15dc:	8d 30       	cpi	r24, 0x0D	; 13
    15de:	09 f0       	breq	.+2      	; 0x15e2 <GET_passwordAndCheck+0x154>
    15e0:	73 cf       	rjmp	.-282    	; 0x14c8 <GET_passwordAndCheck+0x3a>
		str1 [counter] = key;
		_delay_ms(250); /* Press time */
		counter++;
		key = KeyPad_getPressedKey(); /* get the pressed key number */
	}
	str1 [counter] = '#';
    15e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	89 ad       	ldd	r24, Y+57	; 0x39
    15ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    15ec:	fc 01       	movw	r30, r24
    15ee:	e2 0f       	add	r30, r18
    15f0:	f3 1f       	adc	r31, r19
    15f2:	83 e2       	ldi	r24, 0x23	; 35
    15f4:	80 83       	st	Z, r24
	str1 [counter+1] = '\0';
    15f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9c 01       	movw	r18, r24
    15fe:	2f 5f       	subi	r18, 0xFF	; 255
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
    1602:	89 ad       	ldd	r24, Y+57	; 0x39
    1604:	9a ad       	ldd	r25, Y+58	; 0x3a
    1606:	fc 01       	movw	r30, r24
    1608:	e2 0f       	add	r30, r18
    160a:	f3 1f       	adc	r31, r19
    160c:	10 82       	st	Z, r1

	UART_sendByte(CHECK_PASSWORD_COMMAND);
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_sendByte>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	a8 ec       	ldi	r26, 0xC8	; 200
    161a:	b2 e4       	ldi	r27, 0x42	; 66
    161c:	8f a3       	std	Y+39, r24	; 0x27
    161e:	98 a7       	std	Y+40, r25	; 0x28
    1620:	a9 a7       	std	Y+41, r26	; 0x29
    1622:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1624:	6f a1       	ldd	r22, Y+39	; 0x27
    1626:	78 a5       	ldd	r23, Y+40	; 0x28
    1628:	89 a5       	ldd	r24, Y+41	; 0x29
    162a:	9a a5       	ldd	r25, Y+42	; 0x2a
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	4a e7       	ldi	r20, 0x7A	; 122
    1632:	53 e4       	ldi	r21, 0x43	; 67
    1634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	8b a3       	std	Y+35, r24	; 0x23
    163e:	9c a3       	std	Y+36, r25	; 0x24
    1640:	ad a3       	std	Y+37, r26	; 0x25
    1642:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1644:	6b a1       	ldd	r22, Y+35	; 0x23
    1646:	7c a1       	ldd	r23, Y+36	; 0x24
    1648:	8d a1       	ldd	r24, Y+37	; 0x25
    164a:	9e a1       	ldd	r25, Y+38	; 0x26
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e8       	ldi	r20, 0x80	; 128
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1658:	88 23       	and	r24, r24
    165a:	2c f4       	brge	.+10     	; 0x1666 <GET_passwordAndCheck+0x1d8>
		__ticks = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9a a3       	std	Y+34, r25	; 0x22
    1662:	89 a3       	std	Y+33, r24	; 0x21
    1664:	3f c0       	rjmp	.+126    	; 0x16e4 <GET_passwordAndCheck+0x256>
	else if (__tmp > 65535)
    1666:	6b a1       	ldd	r22, Y+35	; 0x23
    1668:	7c a1       	ldd	r23, Y+36	; 0x24
    166a:	8d a1       	ldd	r24, Y+37	; 0x25
    166c:	9e a1       	ldd	r25, Y+38	; 0x26
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	57 e4       	ldi	r21, 0x47	; 71
    1676:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167a:	18 16       	cp	r1, r24
    167c:	4c f5       	brge	.+82     	; 0x16d0 <GET_passwordAndCheck+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167e:	6f a1       	ldd	r22, Y+39	; 0x27
    1680:	78 a5       	ldd	r23, Y+40	; 0x28
    1682:	89 a5       	ldd	r24, Y+41	; 0x29
    1684:	9a a5       	ldd	r25, Y+42	; 0x2a
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e2       	ldi	r20, 0x20	; 32
    168c:	51 e4       	ldi	r21, 0x41	; 65
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9a a3       	std	Y+34, r25	; 0x22
    16a4:	89 a3       	std	Y+33, r24	; 0x21
    16a6:	0f c0       	rjmp	.+30     	; 0x16c6 <GET_passwordAndCheck+0x238>
    16a8:	89 e1       	ldi	r24, 0x19	; 25
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	98 a3       	std	Y+32, r25	; 0x20
    16ae:	8f 8f       	std	Y+31, r24	; 0x1f
    16b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16b2:	98 a1       	ldd	r25, Y+32	; 0x20
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <GET_passwordAndCheck+0x226>
    16b8:	98 a3       	std	Y+32, r25	; 0x20
    16ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16bc:	89 a1       	ldd	r24, Y+33	; 0x21
    16be:	9a a1       	ldd	r25, Y+34	; 0x22
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	9a a3       	std	Y+34, r25	; 0x22
    16c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c6:	89 a1       	ldd	r24, Y+33	; 0x21
    16c8:	9a a1       	ldd	r25, Y+34	; 0x22
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	69 f7       	brne	.-38     	; 0x16a8 <GET_passwordAndCheck+0x21a>
    16ce:	14 c0       	rjmp	.+40     	; 0x16f8 <GET_passwordAndCheck+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d0:	6b a1       	ldd	r22, Y+35	; 0x23
    16d2:	7c a1       	ldd	r23, Y+36	; 0x24
    16d4:	8d a1       	ldd	r24, Y+37	; 0x25
    16d6:	9e a1       	ldd	r25, Y+38	; 0x26
    16d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9a a3       	std	Y+34, r25	; 0x22
    16e2:	89 a3       	std	Y+33, r24	; 0x21
    16e4:	89 a1       	ldd	r24, Y+33	; 0x21
    16e6:	9a a1       	ldd	r25, Y+34	; 0x22
    16e8:	9e 8f       	std	Y+30, r25	; 0x1e
    16ea:	8d 8f       	std	Y+29, r24	; 0x1d
    16ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <GET_passwordAndCheck+0x262>
    16f4:	9e 8f       	std	Y+30, r25	; 0x1e
    16f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	if( UART_recieveByte() == CHECK_PASSWORD_COMMAND)
    16f8:	0e 94 83 12 	call	0x2506	; 0x2506 <UART_recieveByte>
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	09 f0       	breq	.+2      	; 0x1702 <GET_passwordAndCheck+0x274>
    1700:	76 c0       	rjmp	.+236    	; 0x17ee <GET_passwordAndCheck+0x360>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a8 ec       	ldi	r26, 0xC8	; 200
    1708:	b2 e4       	ldi	r27, 0x42	; 66
    170a:	89 8f       	std	Y+25, r24	; 0x19
    170c:	9a 8f       	std	Y+26, r25	; 0x1a
    170e:	ab 8f       	std	Y+27, r26	; 0x1b
    1710:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1712:	69 8d       	ldd	r22, Y+25	; 0x19
    1714:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1716:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1718:	9c 8d       	ldd	r25, Y+28	; 0x1c
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	4a e7       	ldi	r20, 0x7A	; 122
    1720:	53 e4       	ldi	r21, 0x43	; 67
    1722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	8d 8b       	std	Y+21, r24	; 0x15
    172c:	9e 8b       	std	Y+22, r25	; 0x16
    172e:	af 8b       	std	Y+23, r26	; 0x17
    1730:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1732:	6d 89       	ldd	r22, Y+21	; 0x15
    1734:	7e 89       	ldd	r23, Y+22	; 0x16
    1736:	8f 89       	ldd	r24, Y+23	; 0x17
    1738:	98 8d       	ldd	r25, Y+24	; 0x18
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1746:	88 23       	and	r24, r24
    1748:	2c f4       	brge	.+10     	; 0x1754 <GET_passwordAndCheck+0x2c6>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9c 8b       	std	Y+20, r25	; 0x14
    1750:	8b 8b       	std	Y+19, r24	; 0x13
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <GET_passwordAndCheck+0x344>
	else if (__tmp > 65535)
    1754:	6d 89       	ldd	r22, Y+21	; 0x15
    1756:	7e 89       	ldd	r23, Y+22	; 0x16
    1758:	8f 89       	ldd	r24, Y+23	; 0x17
    175a:	98 8d       	ldd	r25, Y+24	; 0x18
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	4c f5       	brge	.+82     	; 0x17be <GET_passwordAndCheck+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	69 8d       	ldd	r22, Y+25	; 0x19
    176e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1770:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1772:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e2       	ldi	r20, 0x20	; 32
    177a:	51 e4       	ldi	r21, 0x41	; 65
    177c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9c 8b       	std	Y+20, r25	; 0x14
    1792:	8b 8b       	std	Y+19, r24	; 0x13
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <GET_passwordAndCheck+0x326>
    1796:	89 e1       	ldi	r24, 0x19	; 25
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9a 8b       	std	Y+18, r25	; 0x12
    179c:	89 8b       	std	Y+17, r24	; 0x11
    179e:	89 89       	ldd	r24, Y+17	; 0x11
    17a0:	9a 89       	ldd	r25, Y+18	; 0x12
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <GET_passwordAndCheck+0x314>
    17a6:	9a 8b       	std	Y+18, r25	; 0x12
    17a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	8b 89       	ldd	r24, Y+19	; 0x13
    17ac:	9c 89       	ldd	r25, Y+20	; 0x14
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	9c 8b       	std	Y+20, r25	; 0x14
    17b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	8b 89       	ldd	r24, Y+19	; 0x13
    17b6:	9c 89       	ldd	r25, Y+20	; 0x14
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	69 f7       	brne	.-38     	; 0x1796 <GET_passwordAndCheck+0x308>
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <GET_passwordAndCheck+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17be:	6d 89       	ldd	r22, Y+21	; 0x15
    17c0:	7e 89       	ldd	r23, Y+22	; 0x16
    17c2:	8f 89       	ldd	r24, Y+23	; 0x17
    17c4:	98 8d       	ldd	r25, Y+24	; 0x18
    17c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9c 8b       	std	Y+20, r25	; 0x14
    17d0:	8b 8b       	std	Y+19, r24	; 0x13
    17d2:	8b 89       	ldd	r24, Y+19	; 0x13
    17d4:	9c 89       	ldd	r25, Y+20	; 0x14
    17d6:	98 8b       	std	Y+16, r25	; 0x10
    17d8:	8f 87       	std	Y+15, r24	; 0x0f
    17da:	8f 85       	ldd	r24, Y+15	; 0x0f
    17dc:	98 89       	ldd	r25, Y+16	; 0x10
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <GET_passwordAndCheck+0x350>
    17e2:	98 8b       	std	Y+16, r25	; 0x10
    17e4:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(100);
			UART_sendString(str1);
    17e6:	89 ad       	ldd	r24, Y+57	; 0x39
    17e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ea:	0e 94 92 12 	call	0x2524	; 0x2524 <UART_sendString>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a8 ec       	ldi	r26, 0xC8	; 200
    17f4:	b2 e4       	ldi	r27, 0x42	; 66
    17f6:	8b 87       	std	Y+11, r24	; 0x0b
    17f8:	9c 87       	std	Y+12, r25	; 0x0c
    17fa:	ad 87       	std	Y+13, r26	; 0x0d
    17fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1800:	7c 85       	ldd	r23, Y+12	; 0x0c
    1802:	8d 85       	ldd	r24, Y+13	; 0x0d
    1804:	9e 85       	ldd	r25, Y+14	; 0x0e
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	4a e7       	ldi	r20, 0x7A	; 122
    180c:	53 e4       	ldi	r21, 0x43	; 67
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	8f 83       	std	Y+7, r24	; 0x07
    1818:	98 87       	std	Y+8, r25	; 0x08
    181a:	a9 87       	std	Y+9, r26	; 0x09
    181c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e8       	ldi	r20, 0x80	; 128
    182c:	5f e3       	ldi	r21, 0x3F	; 63
    182e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1832:	88 23       	and	r24, r24
    1834:	2c f4       	brge	.+10     	; 0x1840 <GET_passwordAndCheck+0x3b2>
		__ticks = 1;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
    183e:	3f c0       	rjmp	.+126    	; 0x18be <GET_passwordAndCheck+0x430>
	else if (__tmp > 65535)
    1840:	6f 81       	ldd	r22, Y+7	; 0x07
    1842:	78 85       	ldd	r23, Y+8	; 0x08
    1844:	89 85       	ldd	r24, Y+9	; 0x09
    1846:	9a 85       	ldd	r25, Y+10	; 0x0a
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	3f ef       	ldi	r19, 0xFF	; 255
    184c:	4f e7       	ldi	r20, 0x7F	; 127
    184e:	57 e4       	ldi	r21, 0x47	; 71
    1850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1854:	18 16       	cp	r1, r24
    1856:	4c f5       	brge	.+82     	; 0x18aa <GET_passwordAndCheck+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1858:	6b 85       	ldd	r22, Y+11	; 0x0b
    185a:	7c 85       	ldd	r23, Y+12	; 0x0c
    185c:	8d 85       	ldd	r24, Y+13	; 0x0d
    185e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e2       	ldi	r20, 0x20	; 32
    1866:	51 e4       	ldi	r21, 0x41	; 65
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
    1880:	0f c0       	rjmp	.+30     	; 0x18a0 <GET_passwordAndCheck+0x412>
    1882:	89 e1       	ldi	r24, 0x19	; 25
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9c 83       	std	Y+4, r25	; 0x04
    1888:	8b 83       	std	Y+3, r24	; 0x03
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <GET_passwordAndCheck+0x400>
    1892:	9c 83       	std	Y+4, r25	; 0x04
    1894:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	9e 81       	ldd	r25, Y+6	; 0x06
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	69 f7       	brne	.-38     	; 0x1882 <GET_passwordAndCheck+0x3f4>
    18a8:	14 c0       	rjmp	.+40     	; 0x18d2 <GET_passwordAndCheck+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18aa:	6f 81       	ldd	r22, Y+7	; 0x07
    18ac:	78 85       	ldd	r23, Y+8	; 0x08
    18ae:	89 85       	ldd	r24, Y+9	; 0x09
    18b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9e 83       	std	Y+6, r25	; 0x06
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	9e 81       	ldd	r25, Y+6	; 0x06
    18c2:	9a 83       	std	Y+2, r25	; 0x02
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <GET_passwordAndCheck+0x43c>
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01
		}

	_delay_ms(100);
	if(UART_recieveByte() == PASSWORD_MATCH)
    18d2:	0e 94 83 12 	call	0x2506	; 0x2506 <UART_recieveByte>
    18d6:	84 30       	cpi	r24, 0x04	; 4
    18d8:	29 f4       	brne	.+10     	; 0x18e4 <GET_passwordAndCheck+0x456>
	{
		return TRUE;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	26 96       	adiw	r28, 0x06	; 6
    18de:	8f af       	std	Y+63, r24	; 0x3f
    18e0:	26 97       	sbiw	r28, 0x06	; 6
    18e2:	03 c0       	rjmp	.+6      	; 0x18ea <GET_passwordAndCheck+0x45c>
	}
	else
	{
		return FALSE;
    18e4:	26 96       	adiw	r28, 0x06	; 6
    18e6:	1f ae       	std	Y+63, r1	; 0x3f
    18e8:	26 97       	sbiw	r28, 0x06	; 6
    18ea:	26 96       	adiw	r28, 0x06	; 6
    18ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    18ee:	26 97       	sbiw	r28, 0x06	; 6
	}

}
    18f0:	cb 5b       	subi	r28, 0xBB	; 187
    18f2:	df 4f       	sbci	r29, 0xFF	; 255
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <OPENING_door>:




void OPENING_door()
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62


}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <LOCK_and_Buzzer>:

void LOCK_and_Buzzer()
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62



}
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <KeyPad_getPressedKey+0x6>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    192a:	1a 82       	std	Y+2, r1	; 0x02
    192c:	4c c0       	rjmp	.+152    	; 0x19c6 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    192e:	ea e3       	ldi	r30, 0x3A	; 58
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	80 e1       	ldi	r24, 0x10	; 16
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <KeyPad_getPressedKey+0x22>
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	2a 95       	dec	r18
    1944:	e2 f7       	brpl	.-8      	; 0x193e <KeyPad_getPressedKey+0x1e>
    1946:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1948:	eb e3       	ldi	r30, 0x3B	; 59
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	80 e1       	ldi	r24, 0x10	; 16
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <KeyPad_getPressedKey+0x3e>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <KeyPad_getPressedKey+0x3a>
    1962:	80 95       	com	r24
    1964:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    1966:	19 82       	std	Y+1, r1	; 0x01
    1968:	28 c0       	rjmp	.+80     	; 0x19ba <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    196a:	e9 e3       	ldi	r30, 0x39	; 57
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	a9 01       	movw	r20, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <KeyPad_getPressedKey+0x62>
    197e:	55 95       	asr	r21
    1980:	47 95       	ror	r20
    1982:	8a 95       	dec	r24
    1984:	e2 f7       	brpl	.-8      	; 0x197e <KeyPad_getPressedKey+0x5e>
    1986:	ca 01       	movw	r24, r20
    1988:	81 70       	andi	r24, 0x01	; 1
    198a:	90 70       	andi	r25, 0x00	; 0
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	91 f4       	brne	.+36     	; 0x19b4 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	98 2f       	mov	r25, r24
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	89 0f       	add	r24, r25
    19a4:	8f 5f       	subi	r24, 0xFF	; 255
    19a6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	84 30       	cpi	r24, 0x04	; 4
    19be:	a8 f2       	brcs	.-86     	; 0x196a <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	8f 5f       	subi	r24, 0xFF	; 255
    19c4:	8a 83       	std	Y+2, r24	; 0x02
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	84 30       	cpi	r24, 0x04	; 4
    19ca:	08 f4       	brcc	.+2      	; 0x19ce <KeyPad_getPressedKey+0xae>
    19cc:	b0 cf       	rjmp	.-160    	; 0x192e <KeyPad_getPressedKey+0xe>
    19ce:	ad cf       	rjmp	.-166    	; 0x192a <KeyPad_getPressedKey+0xa>

000019d0 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <KeyPad_4x4_adjustKeyNumber+0x6>
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <KeyPad_4x4_adjustKeyNumber+0x8>
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	3c 83       	std	Y+4, r19	; 0x04
    19e6:	2b 83       	std	Y+3, r18	; 0x03
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	88 30       	cpi	r24, 0x08	; 8
    19ee:	91 05       	cpc	r25, r1
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <KeyPad_4x4_adjustKeyNumber+0x24>
    19f2:	70 c0       	rjmp	.+224    	; 0x1ad4 <KeyPad_4x4_adjustKeyNumber+0x104>
    19f4:	2b 81       	ldd	r18, Y+3	; 0x03
    19f6:	3c 81       	ldd	r19, Y+4	; 0x04
    19f8:	29 30       	cpi	r18, 0x09	; 9
    19fa:	31 05       	cpc	r19, r1
    19fc:	5c f5       	brge	.+86     	; 0x1a54 <KeyPad_4x4_adjustKeyNumber+0x84>
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	84 30       	cpi	r24, 0x04	; 4
    1a04:	91 05       	cpc	r25, r1
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <KeyPad_4x4_adjustKeyNumber+0x3a>
    1a08:	59 c0       	rjmp	.+178    	; 0x1abc <KeyPad_4x4_adjustKeyNumber+0xec>
    1a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0e:	25 30       	cpi	r18, 0x05	; 5
    1a10:	31 05       	cpc	r19, r1
    1a12:	9c f4       	brge	.+38     	; 0x1a3a <KeyPad_4x4_adjustKeyNumber+0x6a>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <KeyPad_4x4_adjustKeyNumber+0x50>
    1a1e:	48 c0       	rjmp	.+144    	; 0x1ab0 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1a20:	2b 81       	ldd	r18, Y+3	; 0x03
    1a22:	3c 81       	ldd	r19, Y+4	; 0x04
    1a24:	23 30       	cpi	r18, 0x03	; 3
    1a26:	31 05       	cpc	r19, r1
    1a28:	0c f0       	brlt	.+2      	; 0x1a2c <KeyPad_4x4_adjustKeyNumber+0x5c>
    1a2a:	45 c0       	rjmp	.+138    	; 0x1ab6 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	81 30       	cpi	r24, 0x01	; 1
    1a32:	91 05       	cpc	r25, r1
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <KeyPad_4x4_adjustKeyNumber+0x68>
    1a36:	39 c0       	rjmp	.+114    	; 0x1aaa <KeyPad_4x4_adjustKeyNumber+0xda>
    1a38:	67 c0       	rjmp	.+206    	; 0x1b08 <KeyPad_4x4_adjustKeyNumber+0x138>
    1a3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3e:	26 30       	cpi	r18, 0x06	; 6
    1a40:	31 05       	cpc	r19, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <KeyPad_4x4_adjustKeyNumber+0x76>
    1a44:	41 c0       	rjmp	.+130    	; 0x1ac8 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	87 30       	cpi	r24, 0x07	; 7
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	0c f0       	brlt	.+2      	; 0x1a52 <KeyPad_4x4_adjustKeyNumber+0x82>
    1a50:	3e c0       	rjmp	.+124    	; 0x1ace <KeyPad_4x4_adjustKeyNumber+0xfe>
    1a52:	37 c0       	rjmp	.+110    	; 0x1ac2 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1a54:	2b 81       	ldd	r18, Y+3	; 0x03
    1a56:	3c 81       	ldd	r19, Y+4	; 0x04
    1a58:	2c 30       	cpi	r18, 0x0C	; 12
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <KeyPad_4x4_adjustKeyNumber+0x90>
    1a5e:	46 c0       	rjmp	.+140    	; 0x1aec <KeyPad_4x4_adjustKeyNumber+0x11c>
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	8d 30       	cpi	r24, 0x0D	; 13
    1a66:	91 05       	cpc	r25, r1
    1a68:	5c f4       	brge	.+22     	; 0x1a80 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1a6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6e:	2a 30       	cpi	r18, 0x0A	; 10
    1a70:	31 05       	cpc	r19, r1
    1a72:	b1 f1       	breq	.+108    	; 0x1ae0 <KeyPad_4x4_adjustKeyNumber+0x110>
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	8b 30       	cpi	r24, 0x0B	; 11
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	a4 f5       	brge	.+104    	; 0x1ae6 <KeyPad_4x4_adjustKeyNumber+0x116>
    1a7e:	2d c0       	rjmp	.+90     	; 0x1ada <KeyPad_4x4_adjustKeyNumber+0x10a>
    1a80:	2b 81       	ldd	r18, Y+3	; 0x03
    1a82:	3c 81       	ldd	r19, Y+4	; 0x04
    1a84:	2e 30       	cpi	r18, 0x0E	; 14
    1a86:	31 05       	cpc	r19, r1
    1a88:	b9 f1       	breq	.+110    	; 0x1af8 <KeyPad_4x4_adjustKeyNumber+0x128>
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	8e 30       	cpi	r24, 0x0E	; 14
    1a90:	91 05       	cpc	r25, r1
    1a92:	7c f1       	brlt	.+94     	; 0x1af2 <KeyPad_4x4_adjustKeyNumber+0x122>
    1a94:	2b 81       	ldd	r18, Y+3	; 0x03
    1a96:	3c 81       	ldd	r19, Y+4	; 0x04
    1a98:	2f 30       	cpi	r18, 0x0F	; 15
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	79 f1       	breq	.+94     	; 0x1afc <KeyPad_4x4_adjustKeyNumber+0x12c>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	80 31       	cpi	r24, 0x10	; 16
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	69 f1       	breq	.+90     	; 0x1b02 <KeyPad_4x4_adjustKeyNumber+0x132>
    1aa8:	2f c0       	rjmp	.+94     	; 0x1b08 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1aaa:	97 e0       	ldi	r25, 0x07	; 7
    1aac:	9a 83       	std	Y+2, r25	; 0x02
    1aae:	2e c0       	rjmp	.+92     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1ab0:	28 e0       	ldi	r18, 0x08	; 8
    1ab2:	2a 83       	std	Y+2, r18	; 0x02
    1ab4:	2b c0       	rjmp	.+86     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1ab6:	39 e0       	ldi	r19, 0x09	; 9
    1ab8:	3a 83       	std	Y+2, r19	; 0x02
    1aba:	28 c0       	rjmp	.+80     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1abc:	85 e2       	ldi	r24, 0x25	; 37
    1abe:	8a 83       	std	Y+2, r24	; 0x02
    1ac0:	25 c0       	rjmp	.+74     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1ac2:	94 e0       	ldi	r25, 0x04	; 4
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	22 c0       	rjmp	.+68     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1ac8:	25 e0       	ldi	r18, 0x05	; 5
    1aca:	2a 83       	std	Y+2, r18	; 0x02
    1acc:	1f c0       	rjmp	.+62     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1ace:	36 e0       	ldi	r19, 0x06	; 6
    1ad0:	3a 83       	std	Y+2, r19	; 0x02
    1ad2:	1c c0       	rjmp	.+56     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1ad4:	8a e2       	ldi	r24, 0x2A	; 42
    1ad6:	8a 83       	std	Y+2, r24	; 0x02
    1ad8:	19 c0       	rjmp	.+50     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	16 c0       	rjmp	.+44     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1ae0:	22 e0       	ldi	r18, 0x02	; 2
    1ae2:	2a 83       	std	Y+2, r18	; 0x02
    1ae4:	13 c0       	rjmp	.+38     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1ae6:	33 e0       	ldi	r19, 0x03	; 3
    1ae8:	3a 83       	std	Y+2, r19	; 0x02
    1aea:	10 c0       	rjmp	.+32     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1aec:	8d e2       	ldi	r24, 0x2D	; 45
    1aee:	8a 83       	std	Y+2, r24	; 0x02
    1af0:	0d c0       	rjmp	.+26     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1af2:	9d e0       	ldi	r25, 0x0D	; 13
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	0a c0       	rjmp	.+20     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1af8:	1a 82       	std	Y+2, r1	; 0x02
    1afa:	08 c0       	rjmp	.+16     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1afc:	2d e3       	ldi	r18, 0x3D	; 61
    1afe:	2a 83       	std	Y+2, r18	; 0x02
    1b00:	05 c0       	rjmp	.+10     	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1b02:	3b e2       	ldi	r19, 0x2B	; 43
    1b04:	3a 83       	std	Y+2, r19	; 0x02
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	8a 83       	std	Y+2, r24	; 0x02
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
    1b24:	e4 e3       	ldi	r30, 0x34	; 52
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	8f ef       	ldi	r24, 0xFF	; 255
    1b2a:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1b2c:	a7 e3       	ldi	r26, 0x37	; 55
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e7 e3       	ldi	r30, 0x37	; 55
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8e 60       	ori	r24, 0x0E	; 14
    1b38:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1b3a:	88 e3       	ldi	r24, 0x38	; 56
    1b3c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1b40:	8c e0       	ldi	r24, 0x0C	; 12
    1b42:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>

	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	e9 97       	sbiw	r28, 0x39	; 57
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1b68:	a8 e3       	ldi	r26, 0x38	; 56
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e8 e3       	ldi	r30, 0x38	; 56
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	8d 7f       	andi	r24, 0xFD	; 253
    1b74:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1b76:	a8 e3       	ldi	r26, 0x38	; 56
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e8 e3       	ldi	r30, 0x38	; 56
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8b 7f       	andi	r24, 0xFB	; 251
    1b82:	8c 93       	st	X, r24
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e8       	ldi	r26, 0x80	; 128
    1b8a:	bf e3       	ldi	r27, 0x3F	; 63
    1b8c:	8d ab       	std	Y+53, r24	; 0x35
    1b8e:	9e ab       	std	Y+54, r25	; 0x36
    1b90:	af ab       	std	Y+55, r26	; 0x37
    1b92:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	6d a9       	ldd	r22, Y+53	; 0x35
    1b96:	7e a9       	ldd	r23, Y+54	; 0x36
    1b98:	8f a9       	ldd	r24, Y+55	; 0x37
    1b9a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4a e7       	ldi	r20, 0x7A	; 122
    1ba2:	53 e4       	ldi	r21, 0x43	; 67
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	89 ab       	std	Y+49, r24	; 0x31
    1bae:	9a ab       	std	Y+50, r25	; 0x32
    1bb0:	ab ab       	std	Y+51, r26	; 0x33
    1bb2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bba:	9c a9       	ldd	r25, Y+52	; 0x34
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc8:	88 23       	and	r24, r24
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <LCD_sendCommand+0x84>
		__ticks = 1;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	98 ab       	std	Y+48, r25	; 0x30
    1bd2:	8f a7       	std	Y+47, r24	; 0x2f
    1bd4:	3f c0       	rjmp	.+126    	; 0x1c54 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1bd6:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd8:	7a a9       	ldd	r23, Y+50	; 0x32
    1bda:	8b a9       	ldd	r24, Y+51	; 0x33
    1bdc:	9c a9       	ldd	r25, Y+52	; 0x34
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	57 e4       	ldi	r21, 0x47	; 71
    1be6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	4c f5       	brge	.+82     	; 0x1c40 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	6d a9       	ldd	r22, Y+53	; 0x35
    1bf0:	7e a9       	ldd	r23, Y+54	; 0x36
    1bf2:	8f a9       	ldd	r24, Y+55	; 0x37
    1bf4:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e2       	ldi	r20, 0x20	; 32
    1bfc:	51 e4       	ldi	r21, 0x41	; 65
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	98 ab       	std	Y+48, r25	; 0x30
    1c14:	8f a7       	std	Y+47, r24	; 0x2f
    1c16:	0f c0       	rjmp	.+30     	; 0x1c36 <LCD_sendCommand+0xe4>
    1c18:	89 e1       	ldi	r24, 0x19	; 25
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9e a7       	std	Y+46, r25	; 0x2e
    1c1e:	8d a7       	std	Y+45, r24	; 0x2d
    1c20:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c22:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_sendCommand+0xd2>
    1c28:	9e a7       	std	Y+46, r25	; 0x2e
    1c2a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	98 ab       	std	Y+48, r25	; 0x30
    1c34:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c38:	98 a9       	ldd	r25, Y+48	; 0x30
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <LCD_sendCommand+0xc6>
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c40:	69 a9       	ldd	r22, Y+49	; 0x31
    1c42:	7a a9       	ldd	r23, Y+50	; 0x32
    1c44:	8b a9       	ldd	r24, Y+51	; 0x33
    1c46:	9c a9       	ldd	r25, Y+52	; 0x34
    1c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	98 ab       	std	Y+48, r25	; 0x30
    1c52:	8f a7       	std	Y+47, r24	; 0x2f
    1c54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c56:	98 a9       	ldd	r25, Y+48	; 0x30
    1c58:	9c a7       	std	Y+44, r25	; 0x2c
    1c5a:	8b a7       	std	Y+43, r24	; 0x2b
    1c5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD_sendCommand+0x10e>
    1c64:	9c a7       	std	Y+44, r25	; 0x2c
    1c66:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1c68:	a8 e3       	ldi	r26, 0x38	; 56
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e8 e3       	ldi	r30, 0x38	; 56
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	88 60       	ori	r24, 0x08	; 8
    1c74:	8c 93       	st	X, r24
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e8       	ldi	r26, 0x80	; 128
    1c7c:	bf e3       	ldi	r27, 0x3F	; 63
    1c7e:	8f a3       	std	Y+39, r24	; 0x27
    1c80:	98 a7       	std	Y+40, r25	; 0x28
    1c82:	a9 a7       	std	Y+41, r26	; 0x29
    1c84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	6f a1       	ldd	r22, Y+39	; 0x27
    1c88:	78 a5       	ldd	r23, Y+40	; 0x28
    1c8a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a e7       	ldi	r20, 0x7A	; 122
    1c94:	53 e4       	ldi	r21, 0x43	; 67
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	8b a3       	std	Y+35, r24	; 0x23
    1ca0:	9c a3       	std	Y+36, r25	; 0x24
    1ca2:	ad a3       	std	Y+37, r26	; 0x25
    1ca4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ca6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca8:	7c a1       	ldd	r23, Y+36	; 0x24
    1caa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cac:	9e a1       	ldd	r25, Y+38	; 0x26
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <LCD_sendCommand+0x176>
		__ticks = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9a a3       	std	Y+34, r25	; 0x22
    1cc4:	89 a3       	std	Y+33, r24	; 0x21
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1cc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cca:	7c a1       	ldd	r23, Y+36	; 0x24
    1ccc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cce:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	4c f5       	brge	.+82     	; 0x1d32 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ce4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ce6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9a a3       	std	Y+34, r25	; 0x22
    1d06:	89 a3       	std	Y+33, r24	; 0x21
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <LCD_sendCommand+0x1d6>
    1d0a:	89 e1       	ldi	r24, 0x19	; 25
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	98 a3       	std	Y+32, r25	; 0x20
    1d10:	8f 8f       	std	Y+31, r24	; 0x1f
    1d12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d14:	98 a1       	ldd	r25, Y+32	; 0x20
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_sendCommand+0x1c4>
    1d1a:	98 a3       	std	Y+32, r25	; 0x20
    1d1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d20:	9a a1       	ldd	r25, Y+34	; 0x22
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	9a a3       	std	Y+34, r25	; 0x22
    1d26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <LCD_sendCommand+0x1b8>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	6b a1       	ldd	r22, Y+35	; 0x23
    1d34:	7c a1       	ldd	r23, Y+36	; 0x24
    1d36:	8d a1       	ldd	r24, Y+37	; 0x25
    1d38:	9e a1       	ldd	r25, Y+38	; 0x26
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9a a3       	std	Y+34, r25	; 0x22
    1d44:	89 a3       	std	Y+33, r24	; 0x21
    1d46:	89 a1       	ldd	r24, Y+33	; 0x21
    1d48:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d4c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <LCD_sendCommand+0x200>
    1d56:	9e 8f       	std	Y+30, r25	; 0x1e
    1d58:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1d5a:	e5 e3       	ldi	r30, 0x35	; 53
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d60:	80 83       	st	Z, r24
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a0 e8       	ldi	r26, 0x80	; 128
    1d68:	bf e3       	ldi	r27, 0x3F	; 63
    1d6a:	89 8f       	std	Y+25, r24	; 0x19
    1d6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	69 8d       	ldd	r22, Y+25	; 0x19
    1d74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a e7       	ldi	r20, 0x7A	; 122
    1d80:	53 e4       	ldi	r21, 0x43	; 67
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8d 8b       	std	Y+21, r24	; 0x15
    1d8c:	9e 8b       	std	Y+22, r25	; 0x16
    1d8e:	af 8b       	std	Y+23, r26	; 0x17
    1d90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <LCD_sendCommand+0x262>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9c 8b       	std	Y+20, r25	; 0x14
    1db0:	8b 8b       	std	Y+19, r24	; 0x13
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1db4:	6d 89       	ldd	r22, Y+21	; 0x15
    1db6:	7e 89       	ldd	r23, Y+22	; 0x16
    1db8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dba:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9c 8b       	std	Y+20, r25	; 0x14
    1df2:	8b 8b       	std	Y+19, r24	; 0x13
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <LCD_sendCommand+0x2c2>
    1df6:	89 e1       	ldi	r24, 0x19	; 25
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9a 8b       	std	Y+18, r25	; 0x12
    1dfc:	89 8b       	std	Y+17, r24	; 0x11
    1dfe:	89 89       	ldd	r24, Y+17	; 0x11
    1e00:	9a 89       	ldd	r25, Y+18	; 0x12
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_sendCommand+0x2b0>
    1e06:	9a 8b       	std	Y+18, r25	; 0x12
    1e08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8b 89       	ldd	r24, Y+19	; 0x13
    1e16:	9c 89       	ldd	r25, Y+20	; 0x14
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <LCD_sendCommand+0x2a4>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e20:	7e 89       	ldd	r23, Y+22	; 0x16
    1e22:	8f 89       	ldd	r24, Y+23	; 0x17
    1e24:	98 8d       	ldd	r25, Y+24	; 0x18
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9c 8b       	std	Y+20, r25	; 0x14
    1e30:	8b 8b       	std	Y+19, r24	; 0x13
    1e32:	8b 89       	ldd	r24, Y+19	; 0x13
    1e34:	9c 89       	ldd	r25, Y+20	; 0x14
    1e36:	98 8b       	std	Y+16, r25	; 0x10
    1e38:	8f 87       	std	Y+15, r24	; 0x0f
    1e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3c:	98 89       	ldd	r25, Y+16	; 0x10
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_sendCommand+0x2ec>
    1e42:	98 8b       	std	Y+16, r25	; 0x10
    1e44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1e46:	a8 e3       	ldi	r26, 0x38	; 56
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e8 e3       	ldi	r30, 0x38	; 56
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	87 7f       	andi	r24, 0xF7	; 247
    1e52:	8c 93       	st	X, r24
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e8       	ldi	r26, 0x80	; 128
    1e5a:	bf e3       	ldi	r27, 0x3F	; 63
    1e5c:	8b 87       	std	Y+11, r24	; 0x0b
    1e5e:	9c 87       	std	Y+12, r25	; 0x0c
    1e60:	ad 87       	std	Y+13, r26	; 0x0d
    1e62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	4a e7       	ldi	r20, 0x7A	; 122
    1e72:	53 e4       	ldi	r21, 0x43	; 67
    1e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	8f 83       	std	Y+7, r24	; 0x07
    1e7e:	98 87       	std	Y+8, r25	; 0x08
    1e80:	a9 87       	std	Y+9, r26	; 0x09
    1e82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e84:	6f 81       	ldd	r22, Y+7	; 0x07
    1e86:	78 85       	ldd	r23, Y+8	; 0x08
    1e88:	89 85       	ldd	r24, Y+9	; 0x09
    1e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e8       	ldi	r20, 0x80	; 128
    1e92:	5f e3       	ldi	r21, 0x3F	; 63
    1e94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e98:	88 23       	and	r24, r24
    1e9a:	2c f4       	brge	.+10     	; 0x1ea6 <LCD_sendCommand+0x354>
		__ticks = 1;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	9e 83       	std	Y+6, r25	; 0x06
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	3f c0       	rjmp	.+126    	; 0x1f24 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea8:	78 85       	ldd	r23, Y+8	; 0x08
    1eaa:	89 85       	ldd	r24, Y+9	; 0x09
    1eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	3f ef       	ldi	r19, 0xFF	; 255
    1eb2:	4f e7       	ldi	r20, 0x7F	; 127
    1eb4:	57 e4       	ldi	r21, 0x47	; 71
    1eb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eba:	18 16       	cp	r1, r24
    1ebc:	4c f5       	brge	.+82     	; 0x1f10 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e2       	ldi	r20, 0x20	; 32
    1ecc:	51 e4       	ldi	r21, 0x41	; 65
    1ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	0f c0       	rjmp	.+30     	; 0x1f06 <LCD_sendCommand+0x3b4>
    1ee8:	89 e1       	ldi	r24, 0x19	; 25
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9c 83       	std	Y+4, r25	; 0x04
    1eee:	8b 83       	std	Y+3, r24	; 0x03
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD_sendCommand+0x3a2>
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
    1efa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	9e 83       	std	Y+6, r25	; 0x06
    1f04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	69 f7       	brne	.-38     	; 0x1ee8 <LCD_sendCommand+0x396>
    1f0e:	14 c0       	rjmp	.+40     	; 0x1f38 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f10:	6f 81       	ldd	r22, Y+7	; 0x07
    1f12:	78 85       	ldd	r23, Y+8	; 0x08
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <LCD_sendCommand+0x3de>
    1f34:	9a 83       	std	Y+2, r25	; 0x02
    1f36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1f38:	e9 96       	adiw	r28, 0x39	; 57
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	e9 97       	sbiw	r28, 0x39	; 57
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1f60:	a8 e3       	ldi	r26, 0x38	; 56
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e8 e3       	ldi	r30, 0x38	; 56
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	82 60       	ori	r24, 0x02	; 2
    1f6c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1f6e:	a8 e3       	ldi	r26, 0x38	; 56
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e8 e3       	ldi	r30, 0x38	; 56
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	8b 7f       	andi	r24, 0xFB	; 251
    1f7a:	8c 93       	st	X, r24
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	a0 e8       	ldi	r26, 0x80	; 128
    1f82:	bf e3       	ldi	r27, 0x3F	; 63
    1f84:	8d ab       	std	Y+53, r24	; 0x35
    1f86:	9e ab       	std	Y+54, r25	; 0x36
    1f88:	af ab       	std	Y+55, r26	; 0x37
    1f8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f8e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f90:	8f a9       	ldd	r24, Y+55	; 0x37
    1f92:	98 ad       	ldd	r25, Y+56	; 0x38
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	4a e7       	ldi	r20, 0x7A	; 122
    1f9a:	53 e4       	ldi	r21, 0x43	; 67
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	89 ab       	std	Y+49, r24	; 0x31
    1fa6:	9a ab       	std	Y+50, r25	; 0x32
    1fa8:	ab ab       	std	Y+51, r26	; 0x33
    1faa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fac:	69 a9       	ldd	r22, Y+49	; 0x31
    1fae:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e8       	ldi	r20, 0x80	; 128
    1fba:	5f e3       	ldi	r21, 0x3F	; 63
    1fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc0:	88 23       	and	r24, r24
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <LCD_displayCharacter+0x84>
		__ticks = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	98 ab       	std	Y+48, r25	; 0x30
    1fca:	8f a7       	std	Y+47, r24	; 0x2f
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1fce:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	3f ef       	ldi	r19, 0xFF	; 255
    1fda:	4f e7       	ldi	r20, 0x7F	; 127
    1fdc:	57 e4       	ldi	r21, 0x47	; 71
    1fde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	4c f5       	brge	.+82     	; 0x2038 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fea:	8f a9       	ldd	r24, Y+55	; 0x37
    1fec:	98 ad       	ldd	r25, Y+56	; 0x38
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	98 ab       	std	Y+48, r25	; 0x30
    200c:	8f a7       	std	Y+47, r24	; 0x2f
    200e:	0f c0       	rjmp	.+30     	; 0x202e <LCD_displayCharacter+0xe4>
    2010:	89 e1       	ldi	r24, 0x19	; 25
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9e a7       	std	Y+46, r25	; 0x2e
    2016:	8d a7       	std	Y+45, r24	; 0x2d
    2018:	8d a5       	ldd	r24, Y+45	; 0x2d
    201a:	9e a5       	ldd	r25, Y+46	; 0x2e
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_displayCharacter+0xd2>
    2020:	9e a7       	std	Y+46, r25	; 0x2e
    2022:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2024:	8f a5       	ldd	r24, Y+47	; 0x2f
    2026:	98 a9       	ldd	r25, Y+48	; 0x30
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	98 ab       	std	Y+48, r25	; 0x30
    202c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2030:	98 a9       	ldd	r25, Y+48	; 0x30
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	69 f7       	brne	.-38     	; 0x2010 <LCD_displayCharacter+0xc6>
    2036:	14 c0       	rjmp	.+40     	; 0x2060 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2038:	69 a9       	ldd	r22, Y+49	; 0x31
    203a:	7a a9       	ldd	r23, Y+50	; 0x32
    203c:	8b a9       	ldd	r24, Y+51	; 0x33
    203e:	9c a9       	ldd	r25, Y+52	; 0x34
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	98 ab       	std	Y+48, r25	; 0x30
    204a:	8f a7       	std	Y+47, r24	; 0x2f
    204c:	8f a5       	ldd	r24, Y+47	; 0x2f
    204e:	98 a9       	ldd	r25, Y+48	; 0x30
    2050:	9c a7       	std	Y+44, r25	; 0x2c
    2052:	8b a7       	std	Y+43, r24	; 0x2b
    2054:	8b a5       	ldd	r24, Y+43	; 0x2b
    2056:	9c a5       	ldd	r25, Y+44	; 0x2c
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <LCD_displayCharacter+0x10e>
    205c:	9c a7       	std	Y+44, r25	; 0x2c
    205e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2060:	a8 e3       	ldi	r26, 0x38	; 56
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e8 e3       	ldi	r30, 0x38	; 56
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	88 60       	ori	r24, 0x08	; 8
    206c:	8c 93       	st	X, r24
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e8       	ldi	r26, 0x80	; 128
    2074:	bf e3       	ldi	r27, 0x3F	; 63
    2076:	8f a3       	std	Y+39, r24	; 0x27
    2078:	98 a7       	std	Y+40, r25	; 0x28
    207a:	a9 a7       	std	Y+41, r26	; 0x29
    207c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207e:	6f a1       	ldd	r22, Y+39	; 0x27
    2080:	78 a5       	ldd	r23, Y+40	; 0x28
    2082:	89 a5       	ldd	r24, Y+41	; 0x29
    2084:	9a a5       	ldd	r25, Y+42	; 0x2a
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a e7       	ldi	r20, 0x7A	; 122
    208c:	53 e4       	ldi	r21, 0x43	; 67
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8b a3       	std	Y+35, r24	; 0x23
    2098:	9c a3       	std	Y+36, r25	; 0x24
    209a:	ad a3       	std	Y+37, r26	; 0x25
    209c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209e:	6b a1       	ldd	r22, Y+35	; 0x23
    20a0:	7c a1       	ldd	r23, Y+36	; 0x24
    20a2:	8d a1       	ldd	r24, Y+37	; 0x25
    20a4:	9e a1       	ldd	r25, Y+38	; 0x26
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e8       	ldi	r20, 0x80	; 128
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	2c f4       	brge	.+10     	; 0x20c0 <LCD_displayCharacter+0x176>
		__ticks = 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9a a3       	std	Y+34, r25	; 0x22
    20bc:	89 a3       	std	Y+33, r24	; 0x21
    20be:	3f c0       	rjmp	.+126    	; 0x213e <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    20c0:	6b a1       	ldd	r22, Y+35	; 0x23
    20c2:	7c a1       	ldd	r23, Y+36	; 0x24
    20c4:	8d a1       	ldd	r24, Y+37	; 0x25
    20c6:	9e a1       	ldd	r25, Y+38	; 0x26
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	4c f5       	brge	.+82     	; 0x212a <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	6f a1       	ldd	r22, Y+39	; 0x27
    20da:	78 a5       	ldd	r23, Y+40	; 0x28
    20dc:	89 a5       	ldd	r24, Y+41	; 0x29
    20de:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	89 a3       	std	Y+33, r24	; 0x21
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <LCD_displayCharacter+0x1d6>
    2102:	89 e1       	ldi	r24, 0x19	; 25
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	98 a3       	std	Y+32, r25	; 0x20
    2108:	8f 8f       	std	Y+31, r24	; 0x1f
    210a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    210c:	98 a1       	ldd	r25, Y+32	; 0x20
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <LCD_displayCharacter+0x1c4>
    2112:	98 a3       	std	Y+32, r25	; 0x20
    2114:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2116:	89 a1       	ldd	r24, Y+33	; 0x21
    2118:	9a a1       	ldd	r25, Y+34	; 0x22
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	9a a3       	std	Y+34, r25	; 0x22
    211e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	89 a1       	ldd	r24, Y+33	; 0x21
    2122:	9a a1       	ldd	r25, Y+34	; 0x22
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	69 f7       	brne	.-38     	; 0x2102 <LCD_displayCharacter+0x1b8>
    2128:	14 c0       	rjmp	.+40     	; 0x2152 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212a:	6b a1       	ldd	r22, Y+35	; 0x23
    212c:	7c a1       	ldd	r23, Y+36	; 0x24
    212e:	8d a1       	ldd	r24, Y+37	; 0x25
    2130:	9e a1       	ldd	r25, Y+38	; 0x26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9a a3       	std	Y+34, r25	; 0x22
    213c:	89 a3       	std	Y+33, r24	; 0x21
    213e:	89 a1       	ldd	r24, Y+33	; 0x21
    2140:	9a a1       	ldd	r25, Y+34	; 0x22
    2142:	9e 8f       	std	Y+30, r25	; 0x1e
    2144:	8d 8f       	std	Y+29, r24	; 0x1d
    2146:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2148:	9e 8d       	ldd	r25, Y+30	; 0x1e
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <LCD_displayCharacter+0x200>
    214e:	9e 8f       	std	Y+30, r25	; 0x1e
    2150:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    2152:	e5 e3       	ldi	r30, 0x35	; 53
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	89 ad       	ldd	r24, Y+57	; 0x39
    2158:	80 83       	st	Z, r24
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a0 e8       	ldi	r26, 0x80	; 128
    2160:	bf e3       	ldi	r27, 0x3F	; 63
    2162:	89 8f       	std	Y+25, r24	; 0x19
    2164:	9a 8f       	std	Y+26, r25	; 0x1a
    2166:	ab 8f       	std	Y+27, r26	; 0x1b
    2168:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216a:	69 8d       	ldd	r22, Y+25	; 0x19
    216c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    216e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2170:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	4a e7       	ldi	r20, 0x7A	; 122
    2178:	53 e4       	ldi	r21, 0x43	; 67
    217a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	8d 8b       	std	Y+21, r24	; 0x15
    2184:	9e 8b       	std	Y+22, r25	; 0x16
    2186:	af 8b       	std	Y+23, r26	; 0x17
    2188:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    218a:	6d 89       	ldd	r22, Y+21	; 0x15
    218c:	7e 89       	ldd	r23, Y+22	; 0x16
    218e:	8f 89       	ldd	r24, Y+23	; 0x17
    2190:	98 8d       	ldd	r25, Y+24	; 0x18
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e8       	ldi	r20, 0x80	; 128
    2198:	5f e3       	ldi	r21, 0x3F	; 63
    219a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    219e:	88 23       	and	r24, r24
    21a0:	2c f4       	brge	.+10     	; 0x21ac <LCD_displayCharacter+0x262>
		__ticks = 1;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
    21aa:	3f c0       	rjmp	.+126    	; 0x222a <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    21ac:	6d 89       	ldd	r22, Y+21	; 0x15
    21ae:	7e 89       	ldd	r23, Y+22	; 0x16
    21b0:	8f 89       	ldd	r24, Y+23	; 0x17
    21b2:	98 8d       	ldd	r25, Y+24	; 0x18
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	4c f5       	brge	.+82     	; 0x2216 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	69 8d       	ldd	r22, Y+25	; 0x19
    21c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e2       	ldi	r20, 0x20	; 32
    21d2:	51 e4       	ldi	r21, 0x41	; 65
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9c 8b       	std	Y+20, r25	; 0x14
    21ea:	8b 8b       	std	Y+19, r24	; 0x13
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <LCD_displayCharacter+0x2c2>
    21ee:	89 e1       	ldi	r24, 0x19	; 25
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9a 8b       	std	Y+18, r25	; 0x12
    21f4:	89 8b       	std	Y+17, r24	; 0x11
    21f6:	89 89       	ldd	r24, Y+17	; 0x11
    21f8:	9a 89       	ldd	r25, Y+18	; 0x12
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <LCD_displayCharacter+0x2b0>
    21fe:	9a 8b       	std	Y+18, r25	; 0x12
    2200:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	8b 89       	ldd	r24, Y+19	; 0x13
    2204:	9c 89       	ldd	r25, Y+20	; 0x14
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	9c 8b       	std	Y+20, r25	; 0x14
    220a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	69 f7       	brne	.-38     	; 0x21ee <LCD_displayCharacter+0x2a4>
    2214:	14 c0       	rjmp	.+40     	; 0x223e <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	6d 89       	ldd	r22, Y+21	; 0x15
    2218:	7e 89       	ldd	r23, Y+22	; 0x16
    221a:	8f 89       	ldd	r24, Y+23	; 0x17
    221c:	98 8d       	ldd	r25, Y+24	; 0x18
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9c 8b       	std	Y+20, r25	; 0x14
    2228:	8b 8b       	std	Y+19, r24	; 0x13
    222a:	8b 89       	ldd	r24, Y+19	; 0x13
    222c:	9c 89       	ldd	r25, Y+20	; 0x14
    222e:	98 8b       	std	Y+16, r25	; 0x10
    2230:	8f 87       	std	Y+15, r24	; 0x0f
    2232:	8f 85       	ldd	r24, Y+15	; 0x0f
    2234:	98 89       	ldd	r25, Y+16	; 0x10
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <LCD_displayCharacter+0x2ec>
    223a:	98 8b       	std	Y+16, r25	; 0x10
    223c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    223e:	a8 e3       	ldi	r26, 0x38	; 56
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e8 e3       	ldi	r30, 0x38	; 56
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	87 7f       	andi	r24, 0xF7	; 247
    224a:	8c 93       	st	X, r24
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	a0 e8       	ldi	r26, 0x80	; 128
    2252:	bf e3       	ldi	r27, 0x3F	; 63
    2254:	8b 87       	std	Y+11, r24	; 0x0b
    2256:	9c 87       	std	Y+12, r25	; 0x0c
    2258:	ad 87       	std	Y+13, r26	; 0x0d
    225a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225c:	6b 85       	ldd	r22, Y+11	; 0x0b
    225e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2260:	8d 85       	ldd	r24, Y+13	; 0x0d
    2262:	9e 85       	ldd	r25, Y+14	; 0x0e
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	4a e7       	ldi	r20, 0x7A	; 122
    226a:	53 e4       	ldi	r21, 0x43	; 67
    226c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	8f 83       	std	Y+7, r24	; 0x07
    2276:	98 87       	std	Y+8, r25	; 0x08
    2278:	a9 87       	std	Y+9, r26	; 0x09
    227a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    227c:	6f 81       	ldd	r22, Y+7	; 0x07
    227e:	78 85       	ldd	r23, Y+8	; 0x08
    2280:	89 85       	ldd	r24, Y+9	; 0x09
    2282:	9a 85       	ldd	r25, Y+10	; 0x0a
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e8       	ldi	r20, 0x80	; 128
    228a:	5f e3       	ldi	r21, 0x3F	; 63
    228c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2290:	88 23       	and	r24, r24
    2292:	2c f4       	brge	.+10     	; 0x229e <LCD_displayCharacter+0x354>
		__ticks = 1;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	9e 83       	std	Y+6, r25	; 0x06
    229a:	8d 83       	std	Y+5, r24	; 0x05
    229c:	3f c0       	rjmp	.+126    	; 0x231c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	3f ef       	ldi	r19, 0xFF	; 255
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	57 e4       	ldi	r21, 0x47	; 71
    22ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b2:	18 16       	cp	r1, r24
    22b4:	4c f5       	brge	.+82     	; 0x2308 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    22bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e2       	ldi	r20, 0x20	; 32
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <LCD_displayCharacter+0x3b4>
    22e0:	89 e1       	ldi	r24, 0x19	; 25
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9c 83       	std	Y+4, r25	; 0x04
    22e6:	8b 83       	std	Y+3, r24	; 0x03
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <LCD_displayCharacter+0x3a2>
    22f0:	9c 83       	std	Y+4, r25	; 0x04
    22f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	9e 81       	ldd	r25, Y+6	; 0x06
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	69 f7       	brne	.-38     	; 0x22e0 <LCD_displayCharacter+0x396>
    2306:	14 c0       	rjmp	.+40     	; 0x2330 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	9a 81       	ldd	r25, Y+2	; 0x02
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <LCD_displayCharacter+0x3de>
    232c:	9a 83       	std	Y+2, r25	; 0x02
    232e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2330:	e9 96       	adiw	r28, 0x39	; 57
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	00 d0       	rcall	.+0      	; 0x2348 <LCD_displayString+0x6>
    2348:	0f 92       	push	r0
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	9b 83       	std	Y+3, r25	; 0x03
    2350:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2352:	19 82       	std	Y+1, r1	; 0x01
    2354:	0e c0       	rjmp	.+28     	; 0x2372 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	9b 81       	ldd	r25, Y+3	; 0x03
    2360:	fc 01       	movw	r30, r24
    2362:	e2 0f       	add	r30, r18
    2364:	f3 1f       	adc	r31, r19
    2366:	80 81       	ld	r24, Z
    2368:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_displayCharacter>
		i++;
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	8f 5f       	subi	r24, 0xFF	; 255
    2370:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	9b 81       	ldd	r25, Y+3	; 0x03
    237c:	fc 01       	movw	r30, r24
    237e:	e2 0f       	add	r30, r18
    2380:	f3 1f       	adc	r31, r19
    2382:	80 81       	ld	r24, Z
    2384:	88 23       	and	r24, r24
    2386:	39 f7       	brne	.-50     	; 0x2356 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	00 d0       	rcall	.+0      	; 0x239a <LCD_goToRowColumn+0x6>
    239a:	00 d0       	rcall	.+0      	; 0x239c <LCD_goToRowColumn+0x8>
    239c:	0f 92       	push	r0
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	8a 83       	std	Y+2, r24	; 0x02
    23a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	3d 83       	std	Y+5, r19	; 0x05
    23ae:	2c 83       	std	Y+4, r18	; 0x04
    23b0:	8c 81       	ldd	r24, Y+4	; 0x04
    23b2:	9d 81       	ldd	r25, Y+5	; 0x05
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	91 05       	cpc	r25, r1
    23b8:	c1 f0       	breq	.+48     	; 0x23ea <LCD_goToRowColumn+0x56>
    23ba:	2c 81       	ldd	r18, Y+4	; 0x04
    23bc:	3d 81       	ldd	r19, Y+5	; 0x05
    23be:	22 30       	cpi	r18, 0x02	; 2
    23c0:	31 05       	cpc	r19, r1
    23c2:	2c f4       	brge	.+10     	; 0x23ce <LCD_goToRowColumn+0x3a>
    23c4:	8c 81       	ldd	r24, Y+4	; 0x04
    23c6:	9d 81       	ldd	r25, Y+5	; 0x05
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	61 f0       	breq	.+24     	; 0x23e4 <LCD_goToRowColumn+0x50>
    23cc:	19 c0       	rjmp	.+50     	; 0x2400 <LCD_goToRowColumn+0x6c>
    23ce:	2c 81       	ldd	r18, Y+4	; 0x04
    23d0:	3d 81       	ldd	r19, Y+5	; 0x05
    23d2:	22 30       	cpi	r18, 0x02	; 2
    23d4:	31 05       	cpc	r19, r1
    23d6:	69 f0       	breq	.+26     	; 0x23f2 <LCD_goToRowColumn+0x5e>
    23d8:	8c 81       	ldd	r24, Y+4	; 0x04
    23da:	9d 81       	ldd	r25, Y+5	; 0x05
    23dc:	83 30       	cpi	r24, 0x03	; 3
    23de:	91 05       	cpc	r25, r1
    23e0:	61 f0       	breq	.+24     	; 0x23fa <LCD_goToRowColumn+0x66>
    23e2:	0e c0       	rjmp	.+28     	; 0x2400 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	0b c0       	rjmp	.+22     	; 0x2400 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	80 5c       	subi	r24, 0xC0	; 192
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	07 c0       	rjmp	.+14     	; 0x2400 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	80 5f       	subi	r24, 0xF0	; 240
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	03 c0       	rjmp	.+6      	; 0x2400 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	80 5b       	subi	r24, 0xB0	; 176
    23fe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	80 68       	ori	r24, 0x80	; 128
    2404:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>
}
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	00 d0       	rcall	.+0      	; 0x241e <LCD_displayStringRowColumn+0x6>
    241e:	00 d0       	rcall	.+0      	; 0x2420 <LCD_displayStringRowColumn+0x8>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	6a 83       	std	Y+2, r22	; 0x02
    2428:	5c 83       	std	Y+4, r21	; 0x04
    242a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	6a 81       	ldd	r22, Y+2	; 0x02
    2430:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	0e 94 a1 11 	call	0x2342	; 0x2342 <LCD_displayString>
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	62 97       	sbiw	r28, 0x12	; 18
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	9a 8b       	std	Y+18, r25	; 0x12
    2460:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2462:	89 89       	ldd	r24, Y+17	; 0x11
    2464:	9a 89       	ldd	r25, Y+18	; 0x12
    2466:	9e 01       	movw	r18, r28
    2468:	2f 5f       	subi	r18, 0xFF	; 255
    246a:	3f 4f       	sbci	r19, 0xFF	; 255
    246c:	b9 01       	movw	r22, r18
    246e:	4a e0       	ldi	r20, 0x0A	; 10
    2470:	50 e0       	ldi	r21, 0x00	; 0
    2472:	0e 94 3e 13 	call	0x267c	; 0x267c <itoa>
   LCD_displayString(buff);
    2476:	ce 01       	movw	r24, r28
    2478:	01 96       	adiw	r24, 0x01	; 1
    247a:	0e 94 a1 11 	call	0x2342	; 0x2342 <LCD_displayString>
}
    247e:	62 96       	adiw	r28, 0x12	; 18
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_sendCommand>
}
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    24ac:	eb e2       	ldi	r30, 0x2B	; 43
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	82 e0       	ldi	r24, 0x02	; 2
    24b2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    24b4:	ea e2       	ldi	r30, 0x2A	; 42
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	88 e1       	ldi	r24, 0x18	; 24
    24ba:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    24bc:	e0 e4       	ldi	r30, 0x40	; 64
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	86 e8       	ldi	r24, 0x86	; 134
    24c2:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    24c4:	e0 e4       	ldi	r30, 0x40	; 64
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    24ca:	e9 e2       	ldi	r30, 0x29	; 41
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	8c e0       	ldi	r24, 0x0C	; 12
    24d0:	80 83       	st	Z, r24
}
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	0f 92       	push	r0
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    24e4:	eb e2       	ldi	r30, 0x2B	; 43
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	88 2f       	mov	r24, r24
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	80 72       	andi	r24, 0x20	; 32
    24f0:	90 70       	andi	r25, 0x00	; 0
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	b9 f3       	breq	.-18     	; 0x24e4 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    24f6:	ec e2       	ldi	r30, 0x2C	; 44
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    24fe:	0f 90       	pop	r0
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    250e:	eb e2       	ldi	r30, 0x2B	; 43
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	88 23       	and	r24, r24
    2516:	dc f7       	brge	.-10     	; 0x250e <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2518:	ec e2       	ldi	r30, 0x2C	; 44
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
}
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <UART_sendString+0x6>
    252a:	0f 92       	push	r0
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	9b 83       	std	Y+3, r25	; 0x03
    2532:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2534:	19 82       	std	Y+1, r1	; 0x01
    2536:	0e c0       	rjmp	.+28     	; 0x2554 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	9b 81       	ldd	r25, Y+3	; 0x03
    2542:	fc 01       	movw	r30, r24
    2544:	e2 0f       	add	r30, r18
    2546:	f3 1f       	adc	r31, r19
    2548:	80 81       	ld	r24, Z
    254a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <UART_sendByte>
		i++;
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	8f 5f       	subi	r24, 0xFF	; 255
    2552:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	9b 81       	ldd	r25, Y+3	; 0x03
    255e:	fc 01       	movw	r30, r24
    2560:	e2 0f       	add	r30, r18
    2562:	f3 1f       	adc	r31, r19
    2564:	80 81       	ld	r24, Z
    2566:	88 23       	and	r24, r24
    2568:	39 f7       	brne	.-50     	; 0x2538 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <UART_recieveString>:

void UART_recieveString(uint8 *Str)
{
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <UART_recieveString+0xa>
    2580:	0f 92       	push	r0
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	9b 83       	std	Y+3, r25	; 0x03
    2588:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    258a:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	9b 81       	ldd	r25, Y+3	; 0x03
    2596:	8c 01       	movw	r16, r24
    2598:	02 0f       	add	r16, r18
    259a:	13 1f       	adc	r17, r19
    259c:	0e 94 83 12 	call	0x2506	; 0x2506 <UART_recieveByte>
    25a0:	f8 01       	movw	r30, r16
    25a2:	80 83       	st	Z, r24
    25a4:	0f c0       	rjmp	.+30     	; 0x25c4 <UART_recieveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	8f 5f       	subi	r24, 0xFF	; 255
    25aa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	8c 01       	movw	r16, r24
    25b8:	02 0f       	add	r16, r18
    25ba:	13 1f       	adc	r17, r19
    25bc:	0e 94 83 12 	call	0x2506	; 0x2506 <UART_recieveByte>
    25c0:	f8 01       	movw	r30, r16
    25c2:	80 83       	st	Z, r24

void UART_recieveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	fc 01       	movw	r30, r24
    25d0:	e2 0f       	add	r30, r18
    25d2:	f3 1f       	adc	r31, r19
    25d4:	80 81       	ld	r24, Z
    25d6:	83 32       	cpi	r24, 0x23	; 35
    25d8:	31 f7       	brne	.-52     	; 0x25a6 <UART_recieveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	9b 81       	ldd	r25, Y+3	; 0x03
    25e4:	fc 01       	movw	r30, r24
    25e6:	e2 0f       	add	r30, r18
    25e8:	f3 1f       	adc	r31, r19
    25ea:	10 82       	st	Z, r1
}
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	08 95       	ret

000025fc <__prologue_saves__>:
    25fc:	2f 92       	push	r2
    25fe:	3f 92       	push	r3
    2600:	4f 92       	push	r4
    2602:	5f 92       	push	r5
    2604:	6f 92       	push	r6
    2606:	7f 92       	push	r7
    2608:	8f 92       	push	r8
    260a:	9f 92       	push	r9
    260c:	af 92       	push	r10
    260e:	bf 92       	push	r11
    2610:	cf 92       	push	r12
    2612:	df 92       	push	r13
    2614:	ef 92       	push	r14
    2616:	ff 92       	push	r15
    2618:	0f 93       	push	r16
    261a:	1f 93       	push	r17
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	ca 1b       	sub	r28, r26
    2626:	db 0b       	sbc	r29, r27
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	09 94       	ijmp

00002634 <__epilogue_restores__>:
    2634:	2a 88       	ldd	r2, Y+18	; 0x12
    2636:	39 88       	ldd	r3, Y+17	; 0x11
    2638:	48 88       	ldd	r4, Y+16	; 0x10
    263a:	5f 84       	ldd	r5, Y+15	; 0x0f
    263c:	6e 84       	ldd	r6, Y+14	; 0x0e
    263e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2640:	8c 84       	ldd	r8, Y+12	; 0x0c
    2642:	9b 84       	ldd	r9, Y+11	; 0x0b
    2644:	aa 84       	ldd	r10, Y+10	; 0x0a
    2646:	b9 84       	ldd	r11, Y+9	; 0x09
    2648:	c8 84       	ldd	r12, Y+8	; 0x08
    264a:	df 80       	ldd	r13, Y+7	; 0x07
    264c:	ee 80       	ldd	r14, Y+6	; 0x06
    264e:	fd 80       	ldd	r15, Y+5	; 0x05
    2650:	0c 81       	ldd	r16, Y+4	; 0x04
    2652:	1b 81       	ldd	r17, Y+3	; 0x03
    2654:	aa 81       	ldd	r26, Y+2	; 0x02
    2656:	b9 81       	ldd	r27, Y+1	; 0x01
    2658:	ce 0f       	add	r28, r30
    265a:	d1 1d       	adc	r29, r1
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	ed 01       	movw	r28, r26
    2668:	08 95       	ret

0000266a <strcmp>:
    266a:	fb 01       	movw	r30, r22
    266c:	dc 01       	movw	r26, r24
    266e:	8d 91       	ld	r24, X+
    2670:	01 90       	ld	r0, Z+
    2672:	80 19       	sub	r24, r0
    2674:	01 10       	cpse	r0, r1
    2676:	d9 f3       	breq	.-10     	; 0x266e <strcmp+0x4>
    2678:	99 0b       	sbc	r25, r25
    267a:	08 95       	ret

0000267c <itoa>:
    267c:	fb 01       	movw	r30, r22
    267e:	9f 01       	movw	r18, r30
    2680:	e8 94       	clt
    2682:	42 30       	cpi	r20, 0x02	; 2
    2684:	c4 f0       	brlt	.+48     	; 0x26b6 <itoa+0x3a>
    2686:	45 32       	cpi	r20, 0x25	; 37
    2688:	b4 f4       	brge	.+44     	; 0x26b6 <itoa+0x3a>
    268a:	4a 30       	cpi	r20, 0x0A	; 10
    268c:	29 f4       	brne	.+10     	; 0x2698 <itoa+0x1c>
    268e:	97 fb       	bst	r25, 7
    2690:	1e f4       	brtc	.+6      	; 0x2698 <itoa+0x1c>
    2692:	90 95       	com	r25
    2694:	81 95       	neg	r24
    2696:	9f 4f       	sbci	r25, 0xFF	; 255
    2698:	64 2f       	mov	r22, r20
    269a:	77 27       	eor	r23, r23
    269c:	0e 94 6f 13 	call	0x26de	; 0x26de <__udivmodhi4>
    26a0:	80 5d       	subi	r24, 0xD0	; 208
    26a2:	8a 33       	cpi	r24, 0x3A	; 58
    26a4:	0c f0       	brlt	.+2      	; 0x26a8 <itoa+0x2c>
    26a6:	89 5d       	subi	r24, 0xD9	; 217
    26a8:	81 93       	st	Z+, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	a1 f7       	brne	.-24     	; 0x2698 <itoa+0x1c>
    26b0:	16 f4       	brtc	.+4      	; 0x26b6 <itoa+0x3a>
    26b2:	5d e2       	ldi	r21, 0x2D	; 45
    26b4:	51 93       	st	Z+, r21
    26b6:	10 82       	st	Z, r1
    26b8:	c9 01       	movw	r24, r18
    26ba:	0c 94 5f 13 	jmp	0x26be	; 0x26be <strrev>

000026be <strrev>:
    26be:	dc 01       	movw	r26, r24
    26c0:	fc 01       	movw	r30, r24
    26c2:	67 2f       	mov	r22, r23
    26c4:	71 91       	ld	r23, Z+
    26c6:	77 23       	and	r23, r23
    26c8:	e1 f7       	brne	.-8      	; 0x26c2 <strrev+0x4>
    26ca:	32 97       	sbiw	r30, 0x02	; 2
    26cc:	04 c0       	rjmp	.+8      	; 0x26d6 <strrev+0x18>
    26ce:	7c 91       	ld	r23, X
    26d0:	6d 93       	st	X+, r22
    26d2:	70 83       	st	Z, r23
    26d4:	62 91       	ld	r22, -Z
    26d6:	ae 17       	cp	r26, r30
    26d8:	bf 07       	cpc	r27, r31
    26da:	c8 f3       	brcs	.-14     	; 0x26ce <strrev+0x10>
    26dc:	08 95       	ret

000026de <__udivmodhi4>:
    26de:	aa 1b       	sub	r26, r26
    26e0:	bb 1b       	sub	r27, r27
    26e2:	51 e1       	ldi	r21, 0x11	; 17
    26e4:	07 c0       	rjmp	.+14     	; 0x26f4 <__udivmodhi4_ep>

000026e6 <__udivmodhi4_loop>:
    26e6:	aa 1f       	adc	r26, r26
    26e8:	bb 1f       	adc	r27, r27
    26ea:	a6 17       	cp	r26, r22
    26ec:	b7 07       	cpc	r27, r23
    26ee:	10 f0       	brcs	.+4      	; 0x26f4 <__udivmodhi4_ep>
    26f0:	a6 1b       	sub	r26, r22
    26f2:	b7 0b       	sbc	r27, r23

000026f4 <__udivmodhi4_ep>:
    26f4:	88 1f       	adc	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	5a 95       	dec	r21
    26fa:	a9 f7       	brne	.-22     	; 0x26e6 <__udivmodhi4_loop>
    26fc:	80 95       	com	r24
    26fe:	90 95       	com	r25
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	08 95       	ret

00002706 <_exit>:
    2706:	f8 94       	cli

00002708 <__stop_program>:
    2708:	ff cf       	rjmp	.-2      	; 0x2708 <__stop_program>
