
Door_Locking_System_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b46  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00002b46  00002bba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002664  00000000  00000000  00002c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d61  00000000  00000000  000052ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000600d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000614d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000062bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a75b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 ee       	ldi	r26, 0xE4	; 228
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	84 ee       	ldi	r24, 0xE4	; 228
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:

#include "MC1.h"


int main()
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	UART_init();
     b40:	0e 94 70 14 	call	0x28e0	; 0x28e0 <UART_init>
	LCD_init();
     b44:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_init>
	timer_init();
     b48:	0e 94 13 14 	call	0x2826	; 0x2826 <timer_init>

	DDRD  |= 0x80;
     b4c:	a1 e3       	ldi	r26, 0x31	; 49
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e1 e3       	ldi	r30, 0x31	; 49
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	80 68       	ori	r24, 0x80	; 128
     b58:	8c 93       	st	X, r24

	OPTION1_setNewPassword();
     b5a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <OPTION1_setNewPassword>
	uint8 pressedKey;

	while(1)
	{
		LCD_clearScreen();
     b5e:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"+ : Change Pass");
     b62:	20 e6       	ldi	r18, 0x60	; 96
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	a9 01       	movw	r20, r18
     b6c:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"- : Open Door");
     b70:	20 e7       	ldi	r18, 0x70	; 112
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	a9 01       	movw	r20, r18
     b7a:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>

		pressedKey = KeyPad_getPressedKey();
     b7e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <KeyPad_getPressedKey>
     b82:	89 83       	std	Y+1, r24	; 0x01

		if( pressedKey == CHANGE_PASS_KEY )
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	8b 32       	cpi	r24, 0x2B	; 43
     b88:	19 f4       	brne	.+6      	; 0xb90 <main+0x5a>
		{
			OPTION2_ChangePassword();
     b8a:	0e 94 04 0a 	call	0x1408	; 0x1408 <OPTION2_ChangePassword>
     b8e:	e7 cf       	rjmp	.-50     	; 0xb5e <main+0x28>
		}

		else if( pressedKey == OPEN_DOOR_KEY )
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	8d 32       	cpi	r24, 0x2D	; 45
     b94:	21 f7       	brne	.-56     	; 0xb5e <main+0x28>
		{
			OPTION3_openDoor();
     b96:	0e 94 9d 0a 	call	0x153a	; 0x153a <OPTION3_openDoor>
     b9a:	e1 cf       	rjmp	.-62     	; 0xb5e <main+0x28>

00000b9c <OPTION1_setNewPassword>:




void OPTION1_setNewPassword(void)
{
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	cb 56       	subi	r28, 0x6B	; 107
     baa:	d0 40       	sbci	r29, 0x00	; 0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
	uint8 key,counter =0,cmp = 0;
     bb6:	fe 01       	movw	r30, r28
     bb8:	e6 5a       	subi	r30, 0xA6	; 166
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	10 82       	st	Z, r1
     bbe:	fe 01       	movw	r30, r28
     bc0:	e7 5a       	subi	r30, 0xA7	; 167
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	10 82       	st	Z, r1
	uint8 Str_password1[8],Str_password2[8];
	uint8 *str1 = Str_password1 ;
     bc6:	fe 01       	movw	r30, r28
     bc8:	e9 5a       	subi	r30, 0xA9	; 169
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	ce 01       	movw	r24, r28
     bce:	84 5a       	subi	r24, 0xA4	; 164
     bd0:	9f 4f       	sbci	r25, 0xFF	; 255
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	80 83       	st	Z, r24
	uint8 *str2 = Str_password2 ;
     bd6:	fe 01       	movw	r30, r28
     bd8:	eb 5a       	subi	r30, 0xAB	; 171
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	ce 01       	movw	r24, r28
     bde:	8c 59       	subi	r24, 0x9C	; 156
     be0:	9f 4f       	sbci	r25, 0xFF	; 255
     be2:	91 83       	std	Z+1, r25	; 0x01
     be4:	80 83       	st	Z, r24
	LCD_clearScreen();
     be6:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"New Pass :");
     bea:	2e e7       	ldi	r18, 0x7E	; 126
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	a9 01       	movw	r20, r18
     bf4:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>

	key = KeyPad_getPressedKey();
     bf8:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <KeyPad_getPressedKey>
     bfc:	fe 01       	movw	r30, r28
     bfe:	e5 5a       	subi	r30, 0xA5	; 165
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	80 83       	st	Z, r24
     c04:	df c0       	rjmp	.+446    	; 0xdc4 <OPTION1_setNewPassword+0x228>

	while( key != ENTER_KEY)
	{

		LCD_displayStringRowColumn(1,counter,"*");
     c06:	fe 01       	movw	r30, r28
     c08:	e6 5a       	subi	r30, 0xA6	; 166
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	29 e8       	ldi	r18, 0x89	; 137
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	60 81       	ld	r22, Z
     c14:	a9 01       	movw	r20, r18
     c16:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>
		str1 [counter] = key;
     c1a:	fe 01       	movw	r30, r28
     c1c:	e6 5a       	subi	r30, 0xA6	; 166
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	80 81       	ld	r24, Z
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	fe 01       	movw	r30, r28
     c28:	e9 5a       	subi	r30, 0xA9	; 169
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	80 81       	ld	r24, Z
     c2e:	91 81       	ldd	r25, Z+1	; 0x01
     c30:	dc 01       	movw	r26, r24
     c32:	a2 0f       	add	r26, r18
     c34:	b3 1f       	adc	r27, r19
     c36:	fe 01       	movw	r30, r28
     c38:	e5 5a       	subi	r30, 0xA5	; 165
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	80 81       	ld	r24, Z
     c3e:	8c 93       	st	X, r24
     c40:	fe 01       	movw	r30, r28
     c42:	ef 5a       	subi	r30, 0xAF	; 175
     c44:	ff 4f       	sbci	r31, 0xFF	; 255
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	aa e7       	ldi	r26, 0x7A	; 122
     c4c:	b3 e4       	ldi	r27, 0x43	; 67
     c4e:	80 83       	st	Z, r24
     c50:	91 83       	std	Z+1, r25	; 0x01
     c52:	a2 83       	std	Z+2, r26	; 0x02
     c54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c56:	8e 01       	movw	r16, r28
     c58:	03 5b       	subi	r16, 0xB3	; 179
     c5a:	1f 4f       	sbci	r17, 0xFF	; 255
     c5c:	fe 01       	movw	r30, r28
     c5e:	ef 5a       	subi	r30, 0xAF	; 175
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	60 81       	ld	r22, Z
     c64:	71 81       	ldd	r23, Z+1	; 0x01
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	4a e7       	ldi	r20, 0x7A	; 122
     c70:	53 e4       	ldi	r21, 0x43	; 67
     c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 83       	st	Z, r24
     c7e:	91 83       	std	Z+1, r25	; 0x01
     c80:	a2 83       	std	Z+2, r26	; 0x02
     c82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c84:	fe 01       	movw	r30, r28
     c86:	e3 5b       	subi	r30, 0xB3	; 179
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	60 81       	ld	r22, Z
     c8c:	71 81       	ldd	r23, Z+1	; 0x01
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	93 81       	ldd	r25, Z+3	; 0x03
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e8       	ldi	r20, 0x80	; 128
     c98:	5f e3       	ldi	r21, 0x3F	; 63
     c9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c9e:	88 23       	and	r24, r24
     ca0:	44 f4       	brge	.+16     	; 0xcb2 <OPTION1_setNewPassword+0x116>
		__ticks = 1;
     ca2:	fe 01       	movw	r30, r28
     ca4:	e5 5b       	subi	r30, 0xB5	; 181
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	80 83       	st	Z, r24
     cb0:	64 c0       	rjmp	.+200    	; 0xd7a <OPTION1_setNewPassword+0x1de>
	else if (__tmp > 65535)
     cb2:	fe 01       	movw	r30, r28
     cb4:	e3 5b       	subi	r30, 0xB3	; 179
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	60 81       	ld	r22, Z
     cba:	71 81       	ldd	r23, Z+1	; 0x01
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	3f ef       	ldi	r19, 0xFF	; 255
     cc4:	4f e7       	ldi	r20, 0x7F	; 127
     cc6:	57 e4       	ldi	r21, 0x47	; 71
     cc8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ccc:	18 16       	cp	r1, r24
     cce:	0c f0       	brlt	.+2      	; 0xcd2 <OPTION1_setNewPassword+0x136>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <OPTION1_setNewPassword+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd2:	fe 01       	movw	r30, r28
     cd4:	ef 5a       	subi	r30, 0xAF	; 175
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	60 81       	ld	r22, Z
     cda:	71 81       	ldd	r23, Z+1	; 0x01
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e2       	ldi	r20, 0x20	; 32
     ce6:	51 e4       	ldi	r21, 0x41	; 65
     ce8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	8e 01       	movw	r16, r28
     cf2:	05 5b       	subi	r16, 0xB5	; 181
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	bc 01       	movw	r22, r24
     cf8:	cd 01       	movw	r24, r26
     cfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	f8 01       	movw	r30, r16
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	80 83       	st	Z, r24
     d08:	1f c0       	rjmp	.+62     	; 0xd48 <OPTION1_setNewPassword+0x1ac>
     d0a:	fe 01       	movw	r30, r28
     d0c:	e7 5b       	subi	r30, 0xB7	; 183
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	89 e1       	ldi	r24, 0x19	; 25
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d18:	fe 01       	movw	r30, r28
     d1a:	e7 5b       	subi	r30, 0xB7	; 183
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <OPTION1_setNewPassword+0x186>
     d26:	fe 01       	movw	r30, r28
     d28:	e7 5b       	subi	r30, 0xB7	; 183
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d30:	de 01       	movw	r26, r28
     d32:	a5 5b       	subi	r26, 0xB5	; 181
     d34:	bf 4f       	sbci	r27, 0xFF	; 255
     d36:	fe 01       	movw	r30, r28
     d38:	e5 5b       	subi	r30, 0xB5	; 181
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	11 96       	adiw	r26, 0x01	; 1
     d44:	9c 93       	st	X, r25
     d46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d48:	fe 01       	movw	r30, r28
     d4a:	e5 5b       	subi	r30, 0xB5	; 181
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	d1 f6       	brne	.-76     	; 0xd0a <OPTION1_setNewPassword+0x16e>
     d56:	27 c0       	rjmp	.+78     	; 0xda6 <OPTION1_setNewPassword+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d58:	8e 01       	movw	r16, r28
     d5a:	05 5b       	subi	r16, 0xB5	; 181
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	fe 01       	movw	r30, r28
     d60:	e3 5b       	subi	r30, 0xB3	; 179
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	f8 01       	movw	r30, r16
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24
     d7a:	de 01       	movw	r26, r28
     d7c:	a9 5b       	subi	r26, 0xB9	; 185
     d7e:	bf 4f       	sbci	r27, 0xFF	; 255
     d80:	fe 01       	movw	r30, r28
     d82:	e5 5b       	subi	r30, 0xB5	; 181
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	8d 93       	st	X+, r24
     d8c:	9c 93       	st	X, r25
     d8e:	fe 01       	movw	r30, r28
     d90:	e9 5b       	subi	r30, 0xB9	; 185
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <OPTION1_setNewPassword+0x1fc>
     d9c:	fe 01       	movw	r30, r28
     d9e:	e9 5b       	subi	r30, 0xB9	; 185
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
		_delay_ms(250); /* Press time */
		counter++;
     da6:	de 01       	movw	r26, r28
     da8:	a6 5a       	subi	r26, 0xA6	; 166
     daa:	bf 4f       	sbci	r27, 0xFF	; 255
     dac:	fe 01       	movw	r30, r28
     dae:	e6 5a       	subi	r30, 0xA6	; 166
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	80 81       	ld	r24, Z
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	8c 93       	st	X, r24
		key = KeyPad_getPressedKey(); /* get the pressed key number */
     db8:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <KeyPad_getPressedKey>
     dbc:	fe 01       	movw	r30, r28
     dbe:	e5 5a       	subi	r30, 0xA5	; 165
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	80 83       	st	Z, r24
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"New Pass :");

	key = KeyPad_getPressedKey();

	while( key != ENTER_KEY)
     dc4:	fe 01       	movw	r30, r28
     dc6:	e5 5a       	subi	r30, 0xA5	; 165
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	80 81       	ld	r24, Z
     dcc:	8d 30       	cpi	r24, 0x0D	; 13
     dce:	09 f0       	breq	.+2      	; 0xdd2 <OPTION1_setNewPassword+0x236>
     dd0:	1a cf       	rjmp	.-460    	; 0xc06 <OPTION1_setNewPassword+0x6a>
		str1 [counter] = key;
		_delay_ms(250); /* Press time */
		counter++;
		key = KeyPad_getPressedKey(); /* get the pressed key number */
	}
	str1 [counter] = '#';
     dd2:	fe 01       	movw	r30, r28
     dd4:	e6 5a       	subi	r30, 0xA6	; 166
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	80 81       	ld	r24, Z
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	fe 01       	movw	r30, r28
     de0:	e9 5a       	subi	r30, 0xA9	; 169
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	fc 01       	movw	r30, r24
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	83 e2       	ldi	r24, 0x23	; 35
     df0:	80 83       	st	Z, r24
	str1 [counter+1] = '\0';
     df2:	fe 01       	movw	r30, r28
     df4:	e6 5a       	subi	r30, 0xA6	; 166
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	80 81       	ld	r24, Z
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	9c 01       	movw	r18, r24
     e00:	2f 5f       	subi	r18, 0xFF	; 255
     e02:	3f 4f       	sbci	r19, 0xFF	; 255
     e04:	fe 01       	movw	r30, r28
     e06:	e9 5a       	subi	r30, 0xA9	; 169
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	fc 01       	movw	r30, r24
     e10:	e2 0f       	add	r30, r18
     e12:	f3 1f       	adc	r31, r19
     e14:	10 82       	st	Z, r1
	///////////////////////////////////////
	counter =0;
     e16:	fe 01       	movw	r30, r28
     e18:	e6 5a       	subi	r30, 0xA6	; 166
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	10 82       	st	Z, r1
	LCD_clearScreen();
     e1e:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Re-enter Pass :");
     e22:	2b e8       	ldi	r18, 0x8B	; 139
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	a9 01       	movw	r20, r18
     e2c:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>

	key = KeyPad_getPressedKey();
     e30:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <KeyPad_getPressedKey>
     e34:	fe 01       	movw	r30, r28
     e36:	e5 5a       	subi	r30, 0xA5	; 165
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	80 83       	st	Z, r24
     e3c:	b1 c0       	rjmp	.+354    	; 0xfa0 <OPTION1_setNewPassword+0x404>
	while( key != ENTER_KEY)
	{

		LCD_displayStringRowColumn(1,counter,"*");
     e3e:	fe 01       	movw	r30, r28
     e40:	e6 5a       	subi	r30, 0xA6	; 166
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	29 e8       	ldi	r18, 0x89	; 137
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	60 81       	ld	r22, Z
     e4c:	a9 01       	movw	r20, r18
     e4e:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>
		str2 [counter] = key;
     e52:	fe 01       	movw	r30, r28
     e54:	e6 5a       	subi	r30, 0xA6	; 166
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	80 81       	ld	r24, Z
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	fe 01       	movw	r30, r28
     e60:	eb 5a       	subi	r30, 0xAB	; 171
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	80 81       	ld	r24, Z
     e66:	91 81       	ldd	r25, Z+1	; 0x01
     e68:	dc 01       	movw	r26, r24
     e6a:	a2 0f       	add	r26, r18
     e6c:	b3 1f       	adc	r27, r19
     e6e:	fe 01       	movw	r30, r28
     e70:	e5 5a       	subi	r30, 0xA5	; 165
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	80 81       	ld	r24, Z
     e76:	8c 93       	st	X, r24
     e78:	fe 01       	movw	r30, r28
     e7a:	ed 5b       	subi	r30, 0xBD	; 189
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	aa e7       	ldi	r26, 0x7A	; 122
     e84:	b3 e4       	ldi	r27, 0x43	; 67
     e86:	80 83       	st	Z, r24
     e88:	91 83       	std	Z+1, r25	; 0x01
     e8a:	a2 83       	std	Z+2, r26	; 0x02
     e8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8e:	8e 01       	movw	r16, r28
     e90:	01 5c       	subi	r16, 0xC1	; 193
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	fe 01       	movw	r30, r28
     e96:	ed 5b       	subi	r30, 0xBD	; 189
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	60 81       	ld	r22, Z
     e9c:	71 81       	ldd	r23, Z+1	; 0x01
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	93 81       	ldd	r25, Z+3	; 0x03
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	4a e7       	ldi	r20, 0x7A	; 122
     ea8:	53 e4       	ldi	r21, 0x43	; 67
     eaa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	f8 01       	movw	r30, r16
     eb4:	80 83       	st	Z, r24
     eb6:	91 83       	std	Z+1, r25	; 0x01
     eb8:	a2 83       	std	Z+2, r26	; 0x02
     eba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ebc:	fe 01       	movw	r30, r28
     ebe:	ff 96       	adiw	r30, 0x3f	; 63
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e8       	ldi	r20, 0x80	; 128
     ece:	5f e3       	ldi	r21, 0x3F	; 63
     ed0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ed4:	88 23       	and	r24, r24
     ed6:	2c f4       	brge	.+10     	; 0xee2 <OPTION1_setNewPassword+0x346>
		__ticks = 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	9e af       	std	Y+62, r25	; 0x3e
     ede:	8d af       	std	Y+61, r24	; 0x3d
     ee0:	46 c0       	rjmp	.+140    	; 0xf6e <OPTION1_setNewPassword+0x3d2>
	else if (__tmp > 65535)
     ee2:	fe 01       	movw	r30, r28
     ee4:	ff 96       	adiw	r30, 0x3f	; 63
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	3f ef       	ldi	r19, 0xFF	; 255
     ef2:	4f e7       	ldi	r20, 0x7F	; 127
     ef4:	57 e4       	ldi	r21, 0x47	; 71
     ef6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     efa:	18 16       	cp	r1, r24
     efc:	64 f5       	brge	.+88     	; 0xf56 <OPTION1_setNewPassword+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efe:	fe 01       	movw	r30, r28
     f00:	ed 5b       	subi	r30, 0xBD	; 189
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e2       	ldi	r20, 0x20	; 32
     f12:	51 e4       	ldi	r21, 0x41	; 65
     f14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	9e af       	std	Y+62, r25	; 0x3e
     f2a:	8d af       	std	Y+61, r24	; 0x3d
     f2c:	0f c0       	rjmp	.+30     	; 0xf4c <OPTION1_setNewPassword+0x3b0>
     f2e:	89 e1       	ldi	r24, 0x19	; 25
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9c af       	std	Y+60, r25	; 0x3c
     f34:	8b af       	std	Y+59, r24	; 0x3b
     f36:	8b ad       	ldd	r24, Y+59	; 0x3b
     f38:	9c ad       	ldd	r25, Y+60	; 0x3c
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <OPTION1_setNewPassword+0x39e>
     f3e:	9c af       	std	Y+60, r25	; 0x3c
     f40:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f42:	8d ad       	ldd	r24, Y+61	; 0x3d
     f44:	9e ad       	ldd	r25, Y+62	; 0x3e
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	9e af       	std	Y+62, r25	; 0x3e
     f4a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f4e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	69 f7       	brne	.-38     	; 0xf2e <OPTION1_setNewPassword+0x392>
     f54:	16 c0       	rjmp	.+44     	; 0xf82 <OPTION1_setNewPassword+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f56:	fe 01       	movw	r30, r28
     f58:	ff 96       	adiw	r30, 0x3f	; 63
     f5a:	60 81       	ld	r22, Z
     f5c:	71 81       	ldd	r23, Z+1	; 0x01
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	93 81       	ldd	r25, Z+3	; 0x03
     f62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	9e af       	std	Y+62, r25	; 0x3e
     f6c:	8d af       	std	Y+61, r24	; 0x3d
     f6e:	8d ad       	ldd	r24, Y+61	; 0x3d
     f70:	9e ad       	ldd	r25, Y+62	; 0x3e
     f72:	9a af       	std	Y+58, r25	; 0x3a
     f74:	89 af       	std	Y+57, r24	; 0x39
     f76:	89 ad       	ldd	r24, Y+57	; 0x39
     f78:	9a ad       	ldd	r25, Y+58	; 0x3a
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <OPTION1_setNewPassword+0x3de>
     f7e:	9a af       	std	Y+58, r25	; 0x3a
     f80:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(250); /* Press time */
		counter++;
     f82:	de 01       	movw	r26, r28
     f84:	a6 5a       	subi	r26, 0xA6	; 166
     f86:	bf 4f       	sbci	r27, 0xFF	; 255
     f88:	fe 01       	movw	r30, r28
     f8a:	e6 5a       	subi	r30, 0xA6	; 166
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	80 81       	ld	r24, Z
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	8c 93       	st	X, r24
		key = KeyPad_getPressedKey(); /* get the pressed key number */
     f94:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <KeyPad_getPressedKey>
     f98:	fe 01       	movw	r30, r28
     f9a:	e5 5a       	subi	r30, 0xA5	; 165
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 83       	st	Z, r24
	counter =0;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Re-enter Pass :");

	key = KeyPad_getPressedKey();
	while( key != ENTER_KEY)
     fa0:	fe 01       	movw	r30, r28
     fa2:	e5 5a       	subi	r30, 0xA5	; 165
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	80 81       	ld	r24, Z
     fa8:	8d 30       	cpi	r24, 0x0D	; 13
     faa:	09 f0       	breq	.+2      	; 0xfae <OPTION1_setNewPassword+0x412>
     fac:	48 cf       	rjmp	.-368    	; 0xe3e <OPTION1_setNewPassword+0x2a2>
		str2 [counter] = key;
		_delay_ms(250); /* Press time */
		counter++;
		key = KeyPad_getPressedKey(); /* get the pressed key number */
	}
	str2 [counter] = '#';
     fae:	fe 01       	movw	r30, r28
     fb0:	e6 5a       	subi	r30, 0xA6	; 166
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	80 81       	ld	r24, Z
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	fe 01       	movw	r30, r28
     fbc:	eb 5a       	subi	r30, 0xAB	; 171
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	fc 01       	movw	r30, r24
     fc6:	e2 0f       	add	r30, r18
     fc8:	f3 1f       	adc	r31, r19
     fca:	83 e2       	ldi	r24, 0x23	; 35
     fcc:	80 83       	st	Z, r24
	str2 [counter+1] = '\0';
     fce:	fe 01       	movw	r30, r28
     fd0:	e6 5a       	subi	r30, 0xA6	; 166
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	80 81       	ld	r24, Z
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	9c 01       	movw	r18, r24
     fdc:	2f 5f       	subi	r18, 0xFF	; 255
     fde:	3f 4f       	sbci	r19, 0xFF	; 255
     fe0:	fe 01       	movw	r30, r28
     fe2:	eb 5a       	subi	r30, 0xAB	; 171
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	80 81       	ld	r24, Z
     fe8:	91 81       	ldd	r25, Z+1	; 0x01
     fea:	fc 01       	movw	r30, r24
     fec:	e2 0f       	add	r30, r18
     fee:	f3 1f       	adc	r31, r19
     ff0:	10 82       	st	Z, r1

	cmp = strcmp(str1,str2);
     ff2:	fe 01       	movw	r30, r28
     ff4:	e9 5a       	subi	r30, 0xA9	; 169
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	fe 01       	movw	r30, r28
     ffe:	eb 5a       	subi	r30, 0xAB	; 171
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	20 81       	ld	r18, Z
    1004:	31 81       	ldd	r19, Z+1	; 0x01
    1006:	b9 01       	movw	r22, r18
    1008:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <strcmp>
    100c:	fe 01       	movw	r30, r28
    100e:	e7 5a       	subi	r30, 0xA7	; 167
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	80 83       	st	Z, r24
	if (cmp != 0)
    1014:	fe 01       	movw	r30, r28
    1016:	e7 5a       	subi	r30, 0xA7	; 167
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	80 81       	ld	r24, Z
    101c:	88 23       	and	r24, r24
    101e:	09 f4       	brne	.+2      	; 0x1022 <OPTION1_setNewPassword+0x486>
    1020:	7e c0       	rjmp	.+252    	; 0x111e <OPTION1_setNewPassword+0x582>
	{
		LCD_clearScreen();
    1022:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,1,"Mismatch Pass");
    1026:	2b e9       	ldi	r18, 0x9B	; 155
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	a9 01       	movw	r20, r18
    1030:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	aa ef       	ldi	r26, 0xFA	; 250
    103a:	b4 e4       	ldi	r27, 0x44	; 68
    103c:	8d ab       	std	Y+53, r24	; 0x35
    103e:	9e ab       	std	Y+54, r25	; 0x36
    1040:	af ab       	std	Y+55, r26	; 0x37
    1042:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1044:	6d a9       	ldd	r22, Y+53	; 0x35
    1046:	7e a9       	ldd	r23, Y+54	; 0x36
    1048:	8f a9       	ldd	r24, Y+55	; 0x37
    104a:	98 ad       	ldd	r25, Y+56	; 0x38
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	4a e7       	ldi	r20, 0x7A	; 122
    1052:	53 e4       	ldi	r21, 0x43	; 67
    1054:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	89 ab       	std	Y+49, r24	; 0x31
    105e:	9a ab       	std	Y+50, r25	; 0x32
    1060:	ab ab       	std	Y+51, r26	; 0x33
    1062:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1064:	69 a9       	ldd	r22, Y+49	; 0x31
    1066:	7a a9       	ldd	r23, Y+50	; 0x32
    1068:	8b a9       	ldd	r24, Y+51	; 0x33
    106a:	9c a9       	ldd	r25, Y+52	; 0x34
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e8       	ldi	r20, 0x80	; 128
    1072:	5f e3       	ldi	r21, 0x3F	; 63
    1074:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1078:	88 23       	and	r24, r24
    107a:	2c f4       	brge	.+10     	; 0x1086 <OPTION1_setNewPassword+0x4ea>
		__ticks = 1;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	98 ab       	std	Y+48, r25	; 0x30
    1082:	8f a7       	std	Y+47, r24	; 0x2f
    1084:	3f c0       	rjmp	.+126    	; 0x1104 <OPTION1_setNewPassword+0x568>
	else if (__tmp > 65535)
    1086:	69 a9       	ldd	r22, Y+49	; 0x31
    1088:	7a a9       	ldd	r23, Y+50	; 0x32
    108a:	8b a9       	ldd	r24, Y+51	; 0x33
    108c:	9c a9       	ldd	r25, Y+52	; 0x34
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	3f ef       	ldi	r19, 0xFF	; 255
    1092:	4f e7       	ldi	r20, 0x7F	; 127
    1094:	57 e4       	ldi	r21, 0x47	; 71
    1096:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    109a:	18 16       	cp	r1, r24
    109c:	4c f5       	brge	.+82     	; 0x10f0 <OPTION1_setNewPassword+0x554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109e:	6d a9       	ldd	r22, Y+53	; 0x35
    10a0:	7e a9       	ldd	r23, Y+54	; 0x36
    10a2:	8f a9       	ldd	r24, Y+55	; 0x37
    10a4:	98 ad       	ldd	r25, Y+56	; 0x38
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e2       	ldi	r20, 0x20	; 32
    10ac:	51 e4       	ldi	r21, 0x41	; 65
    10ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	98 ab       	std	Y+48, r25	; 0x30
    10c4:	8f a7       	std	Y+47, r24	; 0x2f
    10c6:	0f c0       	rjmp	.+30     	; 0x10e6 <OPTION1_setNewPassword+0x54a>
    10c8:	89 e1       	ldi	r24, 0x19	; 25
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	9e a7       	std	Y+46, r25	; 0x2e
    10ce:	8d a7       	std	Y+45, r24	; 0x2d
    10d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    10d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <OPTION1_setNewPassword+0x538>
    10d8:	9e a7       	std	Y+46, r25	; 0x2e
    10da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    10de:	98 a9       	ldd	r25, Y+48	; 0x30
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	98 ab       	std	Y+48, r25	; 0x30
    10e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    10e8:	98 a9       	ldd	r25, Y+48	; 0x30
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	69 f7       	brne	.-38     	; 0x10c8 <OPTION1_setNewPassword+0x52c>
    10ee:	14 c0       	rjmp	.+40     	; 0x1118 <OPTION1_setNewPassword+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f0:	69 a9       	ldd	r22, Y+49	; 0x31
    10f2:	7a a9       	ldd	r23, Y+50	; 0x32
    10f4:	8b a9       	ldd	r24, Y+51	; 0x33
    10f6:	9c a9       	ldd	r25, Y+52	; 0x34
    10f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	98 ab       	std	Y+48, r25	; 0x30
    1102:	8f a7       	std	Y+47, r24	; 0x2f
    1104:	8f a5       	ldd	r24, Y+47	; 0x2f
    1106:	98 a9       	ldd	r25, Y+48	; 0x30
    1108:	9c a7       	std	Y+44, r25	; 0x2c
    110a:	8b a7       	std	Y+43, r24	; 0x2b
    110c:	8b a5       	ldd	r24, Y+43	; 0x2b
    110e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	f1 f7       	brne	.-4      	; 0x1110 <OPTION1_setNewPassword+0x574>
    1114:	9c a7       	std	Y+44, r25	; 0x2c
    1116:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000);
		OPTION1_setNewPassword();
    1118:	0e 94 ce 05 	call	0xb9c	; 0xb9c <OPTION1_setNewPassword>
    111c:	69 c1       	rjmp	.+722    	; 0x13f0 <OPTION1_setNewPassword+0x854>
	}
	else   // Matched password so save it in eeprom
	{

		UART_sendByte(SAVE_PASSWORD_COMMAND);
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	0e 94 8a 14 	call	0x2914	; 0x2914 <UART_sendByte>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a8 ec       	ldi	r26, 0xC8	; 200
    112a:	b2 e4       	ldi	r27, 0x42	; 66
    112c:	8f a3       	std	Y+39, r24	; 0x27
    112e:	98 a7       	std	Y+40, r25	; 0x28
    1130:	a9 a7       	std	Y+41, r26	; 0x29
    1132:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1134:	6f a1       	ldd	r22, Y+39	; 0x27
    1136:	78 a5       	ldd	r23, Y+40	; 0x28
    1138:	89 a5       	ldd	r24, Y+41	; 0x29
    113a:	9a a5       	ldd	r25, Y+42	; 0x2a
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	4a e7       	ldi	r20, 0x7A	; 122
    1142:	53 e4       	ldi	r21, 0x43	; 67
    1144:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	8b a3       	std	Y+35, r24	; 0x23
    114e:	9c a3       	std	Y+36, r25	; 0x24
    1150:	ad a3       	std	Y+37, r26	; 0x25
    1152:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1154:	6b a1       	ldd	r22, Y+35	; 0x23
    1156:	7c a1       	ldd	r23, Y+36	; 0x24
    1158:	8d a1       	ldd	r24, Y+37	; 0x25
    115a:	9e a1       	ldd	r25, Y+38	; 0x26
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e8       	ldi	r20, 0x80	; 128
    1162:	5f e3       	ldi	r21, 0x3F	; 63
    1164:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1168:	88 23       	and	r24, r24
    116a:	2c f4       	brge	.+10     	; 0x1176 <OPTION1_setNewPassword+0x5da>
		__ticks = 1;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	9a a3       	std	Y+34, r25	; 0x22
    1172:	89 a3       	std	Y+33, r24	; 0x21
    1174:	3f c0       	rjmp	.+126    	; 0x11f4 <OPTION1_setNewPassword+0x658>
	else if (__tmp > 65535)
    1176:	6b a1       	ldd	r22, Y+35	; 0x23
    1178:	7c a1       	ldd	r23, Y+36	; 0x24
    117a:	8d a1       	ldd	r24, Y+37	; 0x25
    117c:	9e a1       	ldd	r25, Y+38	; 0x26
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	3f ef       	ldi	r19, 0xFF	; 255
    1182:	4f e7       	ldi	r20, 0x7F	; 127
    1184:	57 e4       	ldi	r21, 0x47	; 71
    1186:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    118a:	18 16       	cp	r1, r24
    118c:	4c f5       	brge	.+82     	; 0x11e0 <OPTION1_setNewPassword+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118e:	6f a1       	ldd	r22, Y+39	; 0x27
    1190:	78 a5       	ldd	r23, Y+40	; 0x28
    1192:	89 a5       	ldd	r24, Y+41	; 0x29
    1194:	9a a5       	ldd	r25, Y+42	; 0x2a
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e2       	ldi	r20, 0x20	; 32
    119c:	51 e4       	ldi	r21, 0x41	; 65
    119e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	bc 01       	movw	r22, r24
    11a8:	cd 01       	movw	r24, r26
    11aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	9a a3       	std	Y+34, r25	; 0x22
    11b4:	89 a3       	std	Y+33, r24	; 0x21
    11b6:	0f c0       	rjmp	.+30     	; 0x11d6 <OPTION1_setNewPassword+0x63a>
    11b8:	89 e1       	ldi	r24, 0x19	; 25
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	98 a3       	std	Y+32, r25	; 0x20
    11be:	8f 8f       	std	Y+31, r24	; 0x1f
    11c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11c2:	98 a1       	ldd	r25, Y+32	; 0x20
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <OPTION1_setNewPassword+0x628>
    11c8:	98 a3       	std	Y+32, r25	; 0x20
    11ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11cc:	89 a1       	ldd	r24, Y+33	; 0x21
    11ce:	9a a1       	ldd	r25, Y+34	; 0x22
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	9a a3       	std	Y+34, r25	; 0x22
    11d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d6:	89 a1       	ldd	r24, Y+33	; 0x21
    11d8:	9a a1       	ldd	r25, Y+34	; 0x22
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	69 f7       	brne	.-38     	; 0x11b8 <OPTION1_setNewPassword+0x61c>
    11de:	14 c0       	rjmp	.+40     	; 0x1208 <OPTION1_setNewPassword+0x66c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e0:	6b a1       	ldd	r22, Y+35	; 0x23
    11e2:	7c a1       	ldd	r23, Y+36	; 0x24
    11e4:	8d a1       	ldd	r24, Y+37	; 0x25
    11e6:	9e a1       	ldd	r25, Y+38	; 0x26
    11e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	9a a3       	std	Y+34, r25	; 0x22
    11f2:	89 a3       	std	Y+33, r24	; 0x21
    11f4:	89 a1       	ldd	r24, Y+33	; 0x21
    11f6:	9a a1       	ldd	r25, Y+34	; 0x22
    11f8:	9e 8f       	std	Y+30, r25	; 0x1e
    11fa:	8d 8f       	std	Y+29, r24	; 0x1d
    11fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <OPTION1_setNewPassword+0x664>
    1204:	9e 8f       	std	Y+30, r25	; 0x1e
    1206:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		if( UART_recieveByte() == SAVE_PASSWORD_COMMAND)
    1208:	0e 94 a1 14 	call	0x2942	; 0x2942 <UART_recieveByte>
    120c:	88 23       	and	r24, r24
    120e:	09 f0       	breq	.+2      	; 0x1212 <OPTION1_setNewPassword+0x676>
    1210:	79 c0       	rjmp	.+242    	; 0x1304 <OPTION1_setNewPassword+0x768>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a8 ec       	ldi	r26, 0xC8	; 200
    1218:	b2 e4       	ldi	r27, 0x42	; 66
    121a:	89 8f       	std	Y+25, r24	; 0x19
    121c:	9a 8f       	std	Y+26, r25	; 0x1a
    121e:	ab 8f       	std	Y+27, r26	; 0x1b
    1220:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1222:	69 8d       	ldd	r22, Y+25	; 0x19
    1224:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1226:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1228:	9c 8d       	ldd	r25, Y+28	; 0x1c
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	4a e7       	ldi	r20, 0x7A	; 122
    1230:	53 e4       	ldi	r21, 0x43	; 67
    1232:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	8d 8b       	std	Y+21, r24	; 0x15
    123c:	9e 8b       	std	Y+22, r25	; 0x16
    123e:	af 8b       	std	Y+23, r26	; 0x17
    1240:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1242:	6d 89       	ldd	r22, Y+21	; 0x15
    1244:	7e 89       	ldd	r23, Y+22	; 0x16
    1246:	8f 89       	ldd	r24, Y+23	; 0x17
    1248:	98 8d       	ldd	r25, Y+24	; 0x18
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e8       	ldi	r20, 0x80	; 128
    1250:	5f e3       	ldi	r21, 0x3F	; 63
    1252:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1256:	88 23       	and	r24, r24
    1258:	2c f4       	brge	.+10     	; 0x1264 <OPTION1_setNewPassword+0x6c8>
		__ticks = 1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9c 8b       	std	Y+20, r25	; 0x14
    1260:	8b 8b       	std	Y+19, r24	; 0x13
    1262:	3f c0       	rjmp	.+126    	; 0x12e2 <OPTION1_setNewPassword+0x746>
	else if (__tmp > 65535)
    1264:	6d 89       	ldd	r22, Y+21	; 0x15
    1266:	7e 89       	ldd	r23, Y+22	; 0x16
    1268:	8f 89       	ldd	r24, Y+23	; 0x17
    126a:	98 8d       	ldd	r25, Y+24	; 0x18
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	3f ef       	ldi	r19, 0xFF	; 255
    1270:	4f e7       	ldi	r20, 0x7F	; 127
    1272:	57 e4       	ldi	r21, 0x47	; 71
    1274:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1278:	18 16       	cp	r1, r24
    127a:	4c f5       	brge	.+82     	; 0x12ce <OPTION1_setNewPassword+0x732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127c:	69 8d       	ldd	r22, Y+25	; 0x19
    127e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1280:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1282:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e2       	ldi	r20, 0x20	; 32
    128a:	51 e4       	ldi	r21, 0x41	; 65
    128c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	9c 8b       	std	Y+20, r25	; 0x14
    12a2:	8b 8b       	std	Y+19, r24	; 0x13
    12a4:	0f c0       	rjmp	.+30     	; 0x12c4 <OPTION1_setNewPassword+0x728>
    12a6:	89 e1       	ldi	r24, 0x19	; 25
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	9a 8b       	std	Y+18, r25	; 0x12
    12ac:	89 8b       	std	Y+17, r24	; 0x11
    12ae:	89 89       	ldd	r24, Y+17	; 0x11
    12b0:	9a 89       	ldd	r25, Y+18	; 0x12
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <OPTION1_setNewPassword+0x716>
    12b6:	9a 8b       	std	Y+18, r25	; 0x12
    12b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ba:	8b 89       	ldd	r24, Y+19	; 0x13
    12bc:	9c 89       	ldd	r25, Y+20	; 0x14
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	9c 8b       	std	Y+20, r25	; 0x14
    12c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c4:	8b 89       	ldd	r24, Y+19	; 0x13
    12c6:	9c 89       	ldd	r25, Y+20	; 0x14
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	69 f7       	brne	.-38     	; 0x12a6 <OPTION1_setNewPassword+0x70a>
    12cc:	14 c0       	rjmp	.+40     	; 0x12f6 <OPTION1_setNewPassword+0x75a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ce:	6d 89       	ldd	r22, Y+21	; 0x15
    12d0:	7e 89       	ldd	r23, Y+22	; 0x16
    12d2:	8f 89       	ldd	r24, Y+23	; 0x17
    12d4:	98 8d       	ldd	r25, Y+24	; 0x18
    12d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9c 8b       	std	Y+20, r25	; 0x14
    12e0:	8b 8b       	std	Y+19, r24	; 0x13
    12e2:	8b 89       	ldd	r24, Y+19	; 0x13
    12e4:	9c 89       	ldd	r25, Y+20	; 0x14
    12e6:	98 8b       	std	Y+16, r25	; 0x10
    12e8:	8f 87       	std	Y+15, r24	; 0x0f
    12ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ec:	98 89       	ldd	r25, Y+16	; 0x10
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <OPTION1_setNewPassword+0x752>
    12f2:	98 8b       	std	Y+16, r25	; 0x10
    12f4:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(100);
			UART_sendString(str2);
    12f6:	fe 01       	movw	r30, r28
    12f8:	eb 5a       	subi	r30, 0xAB	; 171
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	0e 94 b0 14 	call	0x2960	; 0x2960 <UART_sendString>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a8 ec       	ldi	r26, 0xC8	; 200
    130a:	b2 e4       	ldi	r27, 0x42	; 66
    130c:	8b 87       	std	Y+11, r24	; 0x0b
    130e:	9c 87       	std	Y+12, r25	; 0x0c
    1310:	ad 87       	std	Y+13, r26	; 0x0d
    1312:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1314:	6b 85       	ldd	r22, Y+11	; 0x0b
    1316:	7c 85       	ldd	r23, Y+12	; 0x0c
    1318:	8d 85       	ldd	r24, Y+13	; 0x0d
    131a:	9e 85       	ldd	r25, Y+14	; 0x0e
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	4a e7       	ldi	r20, 0x7A	; 122
    1322:	53 e4       	ldi	r21, 0x43	; 67
    1324:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	8f 83       	std	Y+7, r24	; 0x07
    132e:	98 87       	std	Y+8, r25	; 0x08
    1330:	a9 87       	std	Y+9, r26	; 0x09
    1332:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1334:	6f 81       	ldd	r22, Y+7	; 0x07
    1336:	78 85       	ldd	r23, Y+8	; 0x08
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e8       	ldi	r20, 0x80	; 128
    1342:	5f e3       	ldi	r21, 0x3F	; 63
    1344:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1348:	88 23       	and	r24, r24
    134a:	2c f4       	brge	.+10     	; 0x1356 <OPTION1_setNewPassword+0x7ba>
		__ticks = 1;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 83       	std	Y+5, r24	; 0x05
    1354:	3f c0       	rjmp	.+126    	; 0x13d4 <OPTION1_setNewPassword+0x838>
	else if (__tmp > 65535)
    1356:	6f 81       	ldd	r22, Y+7	; 0x07
    1358:	78 85       	ldd	r23, Y+8	; 0x08
    135a:	89 85       	ldd	r24, Y+9	; 0x09
    135c:	9a 85       	ldd	r25, Y+10	; 0x0a
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	3f ef       	ldi	r19, 0xFF	; 255
    1362:	4f e7       	ldi	r20, 0x7F	; 127
    1364:	57 e4       	ldi	r21, 0x47	; 71
    1366:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    136a:	18 16       	cp	r1, r24
    136c:	4c f5       	brge	.+82     	; 0x13c0 <OPTION1_setNewPassword+0x824>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1370:	7c 85       	ldd	r23, Y+12	; 0x0c
    1372:	8d 85       	ldd	r24, Y+13	; 0x0d
    1374:	9e 85       	ldd	r25, Y+14	; 0x0e
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e2       	ldi	r20, 0x20	; 32
    137c:	51 e4       	ldi	r21, 0x41	; 65
    137e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	0f c0       	rjmp	.+30     	; 0x13b6 <OPTION1_setNewPassword+0x81a>
    1398:	89 e1       	ldi	r24, 0x19	; 25
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	9c 83       	std	Y+4, r25	; 0x04
    139e:	8b 83       	std	Y+3, r24	; 0x03
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <OPTION1_setNewPassword+0x808>
    13a8:	9c 83       	std	Y+4, r25	; 0x04
    13aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	9e 83       	std	Y+6, r25	; 0x06
    13b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	69 f7       	brne	.-38     	; 0x1398 <OPTION1_setNewPassword+0x7fc>
    13be:	14 c0       	rjmp	.+40     	; 0x13e8 <OPTION1_setNewPassword+0x84c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c0:	6f 81       	ldd	r22, Y+7	; 0x07
    13c2:	78 85       	ldd	r23, Y+8	; 0x08
    13c4:	89 85       	ldd	r24, Y+9	; 0x09
    13c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 83       	std	Y+5, r24	; 0x05
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	9e 81       	ldd	r25, Y+6	; 0x06
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <OPTION1_setNewPassword+0x844>
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(100);
		while( UART_recieveByte() != PASSWORD_SAVED);
    13e8:	0e 94 a1 14 	call	0x2942	; 0x2942 <UART_recieveByte>
    13ec:	86 30       	cpi	r24, 0x06	; 6
    13ee:	e1 f7       	brne	.-8      	; 0x13e8 <OPTION1_setNewPassword+0x84c>


	}
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
}
    13f0:	c5 59       	subi	r28, 0x95	; 149
    13f2:	df 4f       	sbci	r29, 0xFF	; 255
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	08 95       	ret

00001408 <OPTION2_ChangePassword>:

void OPTION2_ChangePassword()
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	2e 97       	sbiw	r28, 0x0e	; 14
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61

	if( GET_passwordAndCheck() )
    141c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GET_passwordAndCheck>
    1420:	88 23       	and	r24, r24
    1422:	19 f0       	breq	.+6      	; 0x142a <OPTION2_ChangePassword+0x22>
	{
		OPTION1_setNewPassword();
    1424:	0e 94 ce 05 	call	0xb9c	; 0xb9c <OPTION1_setNewPassword>
    1428:	7f c0       	rjmp	.+254    	; 0x1528 <OPTION2_ChangePassword+0x120>
	}
	else
	{
		LCD_clearScreen();
    142a:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,1,"Wrong Password");
    142e:	29 ea       	ldi	r18, 0xA9	; 169
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	a9 01       	movw	r20, r18
    1438:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	aa e7       	ldi	r26, 0x7A	; 122
    1442:	b4 e4       	ldi	r27, 0x44	; 68
    1444:	8b 87       	std	Y+11, r24	; 0x0b
    1446:	9c 87       	std	Y+12, r25	; 0x0c
    1448:	ad 87       	std	Y+13, r26	; 0x0d
    144a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144c:	6b 85       	ldd	r22, Y+11	; 0x0b
    144e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1450:	8d 85       	ldd	r24, Y+13	; 0x0d
    1452:	9e 85       	ldd	r25, Y+14	; 0x0e
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	4a e7       	ldi	r20, 0x7A	; 122
    145a:	53 e4       	ldi	r21, 0x43	; 67
    145c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	8f 83       	std	Y+7, r24	; 0x07
    1466:	98 87       	std	Y+8, r25	; 0x08
    1468:	a9 87       	std	Y+9, r26	; 0x09
    146a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    146c:	6f 81       	ldd	r22, Y+7	; 0x07
    146e:	78 85       	ldd	r23, Y+8	; 0x08
    1470:	89 85       	ldd	r24, Y+9	; 0x09
    1472:	9a 85       	ldd	r25, Y+10	; 0x0a
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e8       	ldi	r20, 0x80	; 128
    147a:	5f e3       	ldi	r21, 0x3F	; 63
    147c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1480:	88 23       	and	r24, r24
    1482:	2c f4       	brge	.+10     	; 0x148e <OPTION2_ChangePassword+0x86>
		__ticks = 1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	3f c0       	rjmp	.+126    	; 0x150c <OPTION2_ChangePassword+0x104>
	else if (__tmp > 65535)
    148e:	6f 81       	ldd	r22, Y+7	; 0x07
    1490:	78 85       	ldd	r23, Y+8	; 0x08
    1492:	89 85       	ldd	r24, Y+9	; 0x09
    1494:	9a 85       	ldd	r25, Y+10	; 0x0a
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	3f ef       	ldi	r19, 0xFF	; 255
    149a:	4f e7       	ldi	r20, 0x7F	; 127
    149c:	57 e4       	ldi	r21, 0x47	; 71
    149e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	4c f5       	brge	.+82     	; 0x14f8 <OPTION2_ChangePassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e2       	ldi	r20, 0x20	; 32
    14b4:	51 e4       	ldi	r21, 0x41	; 65
    14b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	bc 01       	movw	r22, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	8d 83       	std	Y+5, r24	; 0x05
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <OPTION2_ChangePassword+0xe6>
    14d0:	89 e1       	ldi	r24, 0x19	; 25
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	9c 83       	std	Y+4, r25	; 0x04
    14d6:	8b 83       	std	Y+3, r24	; 0x03
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <OPTION2_ChangePassword+0xd4>
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	69 f7       	brne	.-38     	; 0x14d0 <OPTION2_ChangePassword+0xc8>
    14f6:	14 c0       	rjmp	.+40     	; 0x1520 <OPTION2_ChangePassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f8:	6f 81       	ldd	r22, Y+7	; 0x07
    14fa:	78 85       	ldd	r23, Y+8	; 0x08
    14fc:	89 85       	ldd	r24, Y+9	; 0x09
    14fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1500:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	9e 83       	std	Y+6, r25	; 0x06
    150a:	8d 83       	std	Y+5, r24	; 0x05
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	9a 83       	std	Y+2, r25	; 0x02
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <OPTION2_ChangePassword+0x110>
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		OPTION4_mismatchPassword(OPTION1_setNewPassword);
    1520:	8e ec       	ldi	r24, 0xCE	; 206
    1522:	95 e0       	ldi	r25, 0x05	; 5
    1524:	0e 94 36 0b 	call	0x166c	; 0x166c <OPTION4_mismatchPassword>
	}
}
    1528:	2e 96       	adiw	r28, 0x0e	; 14
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <OPTION3_openDoor>:

void OPTION3_openDoor()
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	2e 97       	sbiw	r28, 0x0e	; 14
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
	if( GET_passwordAndCheck() )
    154e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GET_passwordAndCheck>
    1552:	88 23       	and	r24, r24
    1554:	19 f0       	breq	.+6      	; 0x155c <OPTION3_openDoor+0x22>
	{
		OPENING_door();
    1556:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <OPENING_door>
    155a:	7f c0       	rjmp	.+254    	; 0x165a <OPTION3_openDoor+0x120>
	}
	else
	{
		LCD_clearScreen();
    155c:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,1,"Wrong Password");
    1560:	29 ea       	ldi	r18, 0xA9	; 169
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	a9 01       	movw	r20, r18
    156a:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	aa e7       	ldi	r26, 0x7A	; 122
    1574:	b4 e4       	ldi	r27, 0x44	; 68
    1576:	8b 87       	std	Y+11, r24	; 0x0b
    1578:	9c 87       	std	Y+12, r25	; 0x0c
    157a:	ad 87       	std	Y+13, r26	; 0x0d
    157c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1580:	7c 85       	ldd	r23, Y+12	; 0x0c
    1582:	8d 85       	ldd	r24, Y+13	; 0x0d
    1584:	9e 85       	ldd	r25, Y+14	; 0x0e
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	4a e7       	ldi	r20, 0x7A	; 122
    158c:	53 e4       	ldi	r21, 0x43	; 67
    158e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	8f 83       	std	Y+7, r24	; 0x07
    1598:	98 87       	std	Y+8, r25	; 0x08
    159a:	a9 87       	std	Y+9, r26	; 0x09
    159c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    159e:	6f 81       	ldd	r22, Y+7	; 0x07
    15a0:	78 85       	ldd	r23, Y+8	; 0x08
    15a2:	89 85       	ldd	r24, Y+9	; 0x09
    15a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e8       	ldi	r20, 0x80	; 128
    15ac:	5f e3       	ldi	r21, 0x3F	; 63
    15ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15b2:	88 23       	and	r24, r24
    15b4:	2c f4       	brge	.+10     	; 0x15c0 <OPTION3_openDoor+0x86>
		__ticks = 1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	8d 83       	std	Y+5, r24	; 0x05
    15be:	3f c0       	rjmp	.+126    	; 0x163e <OPTION3_openDoor+0x104>
	else if (__tmp > 65535)
    15c0:	6f 81       	ldd	r22, Y+7	; 0x07
    15c2:	78 85       	ldd	r23, Y+8	; 0x08
    15c4:	89 85       	ldd	r24, Y+9	; 0x09
    15c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	3f ef       	ldi	r19, 0xFF	; 255
    15cc:	4f e7       	ldi	r20, 0x7F	; 127
    15ce:	57 e4       	ldi	r21, 0x47	; 71
    15d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15d4:	18 16       	cp	r1, r24
    15d6:	4c f5       	brge	.+82     	; 0x162a <OPTION3_openDoor+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15da:	7c 85       	ldd	r23, Y+12	; 0x0c
    15dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15de:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e2       	ldi	r20, 0x20	; 32
    15e6:	51 e4       	ldi	r21, 0x41	; 65
    15e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	bc 01       	movw	r22, r24
    15f2:	cd 01       	movw	r24, r26
    15f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	9e 83       	std	Y+6, r25	; 0x06
    15fe:	8d 83       	std	Y+5, r24	; 0x05
    1600:	0f c0       	rjmp	.+30     	; 0x1620 <OPTION3_openDoor+0xe6>
    1602:	89 e1       	ldi	r24, 0x19	; 25
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	8b 83       	std	Y+3, r24	; 0x03
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <OPTION3_openDoor+0xd4>
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	69 f7       	brne	.-38     	; 0x1602 <OPTION3_openDoor+0xc8>
    1628:	14 c0       	rjmp	.+40     	; 0x1652 <OPTION3_openDoor+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162a:	6f 81       	ldd	r22, Y+7	; 0x07
    162c:	78 85       	ldd	r23, Y+8	; 0x08
    162e:	89 85       	ldd	r24, Y+9	; 0x09
    1630:	9a 85       	ldd	r25, Y+10	; 0x0a
    1632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	f1 f7       	brne	.-4      	; 0x164a <OPTION3_openDoor+0x110>
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		OPTION4_mismatchPassword(OPENING_door);
    1652:	84 e1       	ldi	r24, 0x14	; 20
    1654:	9e e0       	ldi	r25, 0x0E	; 14
    1656:	0e 94 36 0b 	call	0x166c	; 0x166c <OPTION4_mismatchPassword>
	}
}
    165a:	2e 96       	adiw	r28, 0x0e	; 14
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <OPTION4_mismatchPassword>:


void OPTION4_mismatchPassword( void(*ptr) (void) )
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	61 97       	sbiw	r28, 0x11	; 17
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	99 8b       	std	Y+17, r25	; 0x11
    1682:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i = 0 ; i < 4 ; i++)
    1684:	1f 86       	std	Y+15, r1	; 0x0f
    1686:	86 c0       	rjmp	.+268    	; 0x1794 <OPTION4_mismatchPassword+0x128>
	{
		if( GET_passwordAndCheck() )
    1688:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GET_passwordAndCheck>
    168c:	88 23       	and	r24, r24
    168e:	21 f0       	breq	.+8      	; 0x1698 <OPTION4_mismatchPassword+0x2c>
		{
			(*ptr)();
    1690:	e8 89       	ldd	r30, Y+16	; 0x10
    1692:	f9 89       	ldd	r31, Y+17	; 0x11
    1694:	09 95       	icall
    1696:	84 c0       	rjmp	.+264    	; 0x17a0 <OPTION4_mismatchPassword+0x134>
			return;

		}
		else
		{
			LCD_clearScreen();
    1698:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,1,"Wrong Password");
    169c:	29 ea       	ldi	r18, 0xA9	; 169
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	a9 01       	movw	r20, r18
    16a6:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	aa e7       	ldi	r26, 0x7A	; 122
    16b0:	b4 e4       	ldi	r27, 0x44	; 68
    16b2:	8b 87       	std	Y+11, r24	; 0x0b
    16b4:	9c 87       	std	Y+12, r25	; 0x0c
    16b6:	ad 87       	std	Y+13, r26	; 0x0d
    16b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    16bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16be:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4a e7       	ldi	r20, 0x7A	; 122
    16c8:	53 e4       	ldi	r21, 0x43	; 67
    16ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	8f 83       	std	Y+7, r24	; 0x07
    16d4:	98 87       	std	Y+8, r25	; 0x08
    16d6:	a9 87       	std	Y+9, r26	; 0x09
    16d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f e3       	ldi	r21, 0x3F	; 63
    16ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	2c f4       	brge	.+10     	; 0x16fc <OPTION4_mismatchPassword+0x90>
		__ticks = 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9e 83       	std	Y+6, r25	; 0x06
    16f8:	8d 83       	std	Y+5, r24	; 0x05
    16fa:	3f c0       	rjmp	.+126    	; 0x177a <OPTION4_mismatchPassword+0x10e>
	else if (__tmp > 65535)
    16fc:	6f 81       	ldd	r22, Y+7	; 0x07
    16fe:	78 85       	ldd	r23, Y+8	; 0x08
    1700:	89 85       	ldd	r24, Y+9	; 0x09
    1702:	9a 85       	ldd	r25, Y+10	; 0x0a
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	3f ef       	ldi	r19, 0xFF	; 255
    1708:	4f e7       	ldi	r20, 0x7F	; 127
    170a:	57 e4       	ldi	r21, 0x47	; 71
    170c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1710:	18 16       	cp	r1, r24
    1712:	4c f5       	brge	.+82     	; 0x1766 <OPTION4_mismatchPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	6b 85       	ldd	r22, Y+11	; 0x0b
    1716:	7c 85       	ldd	r23, Y+12	; 0x0c
    1718:	8d 85       	ldd	r24, Y+13	; 0x0d
    171a:	9e 85       	ldd	r25, Y+14	; 0x0e
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	51 e4       	ldi	r21, 0x41	; 65
    1724:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	8d 83       	std	Y+5, r24	; 0x05
    173c:	0f c0       	rjmp	.+30     	; 0x175c <OPTION4_mismatchPassword+0xf0>
    173e:	89 e1       	ldi	r24, 0x19	; 25
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <OPTION4_mismatchPassword+0xde>
    174e:	9c 83       	std	Y+4, r25	; 0x04
    1750:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	69 f7       	brne	.-38     	; 0x173e <OPTION4_mismatchPassword+0xd2>
    1764:	14 c0       	rjmp	.+40     	; 0x178e <OPTION4_mismatchPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9e 83       	std	Y+6, r25	; 0x06
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	9e 81       	ldd	r25, Y+6	; 0x06
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	9a 81       	ldd	r25, Y+2	; 0x02
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <OPTION4_mismatchPassword+0x11a>
    178a:	9a 83       	std	Y+2, r25	; 0x02
    178c:	89 83       	std	Y+1, r24	; 0x01
}


void OPTION4_mismatchPassword( void(*ptr) (void) )
{
	for(uint8 i = 0 ; i < 4 ; i++)
    178e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	8f 87       	std	Y+15, r24	; 0x0f
    1794:	8f 85       	ldd	r24, Y+15	; 0x0f
    1796:	84 30       	cpi	r24, 0x04	; 4
    1798:	08 f4       	brcc	.+2      	; 0x179c <OPTION4_mismatchPassword+0x130>
    179a:	76 cf       	rjmp	.-276    	; 0x1688 <OPTION4_mismatchPassword+0x1c>
			LCD_displayStringRowColumn(0,1,"Wrong Password");
			_delay_ms(1000);
		}
	}

	LOCK_and_Buzzer();
    179c:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LOCK_and_Buzzer>
}
    17a0:	61 96       	adiw	r28, 0x11	; 17
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <GET_passwordAndCheck>:




bool GET_passwordAndCheck()
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	c5 54       	subi	r28, 0x45	; 69
    17bc:	d0 40       	sbci	r29, 0x00	; 0
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
	uint8 key,counter =0;
    17c8:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 Str_passwordInput[8];
	uint8 *str1 = Str_passwordInput ;
    17ca:	ce 01       	movw	r24, r28
    17cc:	cd 96       	adiw	r24, 0x3d	; 61
    17ce:	9a af       	std	Y+58, r25	; 0x3a
    17d0:	89 af       	std	Y+57, r24	; 0x39
	LCD_clearScreen();
    17d2:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Pass :");
    17d6:	28 eb       	ldi	r18, 0xB8	; 184
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	a9 01       	movw	r20, r18
    17e0:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>
	//LCD_displayStringRowColumn(1,0,"- : Open Door");
	key = KeyPad_getPressedKey();
    17e4:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <KeyPad_getPressedKey>
    17e8:	8c af       	std	Y+60, r24	; 0x3c
    17ea:	89 c0       	rjmp	.+274    	; 0x18fe <GET_passwordAndCheck+0x14c>

	while( key != ENTER_KEY)
	{
		LCD_displayStringRowColumn(1,counter,"*");
    17ec:	29 e8       	ldi	r18, 0x89	; 137
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	6b ad       	ldd	r22, Y+59	; 0x3b
    17f4:	a9 01       	movw	r20, r18
    17f6:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>
		str1 [counter] = key;
    17fa:	8b ad       	ldd	r24, Y+59	; 0x3b
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	89 ad       	ldd	r24, Y+57	; 0x39
    1802:	9a ad       	ldd	r25, Y+58	; 0x3a
    1804:	fc 01       	movw	r30, r24
    1806:	e2 0f       	add	r30, r18
    1808:	f3 1f       	adc	r31, r19
    180a:	8c ad       	ldd	r24, Y+60	; 0x3c
    180c:	80 83       	st	Z, r24
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	aa e7       	ldi	r26, 0x7A	; 122
    1814:	b3 e4       	ldi	r27, 0x43	; 67
    1816:	8d ab       	std	Y+53, r24	; 0x35
    1818:	9e ab       	std	Y+54, r25	; 0x36
    181a:	af ab       	std	Y+55, r26	; 0x37
    181c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181e:	6d a9       	ldd	r22, Y+53	; 0x35
    1820:	7e a9       	ldd	r23, Y+54	; 0x36
    1822:	8f a9       	ldd	r24, Y+55	; 0x37
    1824:	98 ad       	ldd	r25, Y+56	; 0x38
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4a e7       	ldi	r20, 0x7A	; 122
    182c:	53 e4       	ldi	r21, 0x43	; 67
    182e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	89 ab       	std	Y+49, r24	; 0x31
    1838:	9a ab       	std	Y+50, r25	; 0x32
    183a:	ab ab       	std	Y+51, r26	; 0x33
    183c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    183e:	69 a9       	ldd	r22, Y+49	; 0x31
    1840:	7a a9       	ldd	r23, Y+50	; 0x32
    1842:	8b a9       	ldd	r24, Y+51	; 0x33
    1844:	9c a9       	ldd	r25, Y+52	; 0x34
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	2c f4       	brge	.+10     	; 0x1860 <GET_passwordAndCheck+0xae>
		__ticks = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	98 ab       	std	Y+48, r25	; 0x30
    185c:	8f a7       	std	Y+47, r24	; 0x2f
    185e:	3f c0       	rjmp	.+126    	; 0x18de <GET_passwordAndCheck+0x12c>
	else if (__tmp > 65535)
    1860:	69 a9       	ldd	r22, Y+49	; 0x31
    1862:	7a a9       	ldd	r23, Y+50	; 0x32
    1864:	8b a9       	ldd	r24, Y+51	; 0x33
    1866:	9c a9       	ldd	r25, Y+52	; 0x34
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	57 e4       	ldi	r21, 0x47	; 71
    1870:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1874:	18 16       	cp	r1, r24
    1876:	4c f5       	brge	.+82     	; 0x18ca <GET_passwordAndCheck+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1878:	6d a9       	ldd	r22, Y+53	; 0x35
    187a:	7e a9       	ldd	r23, Y+54	; 0x36
    187c:	8f a9       	ldd	r24, Y+55	; 0x37
    187e:	98 ad       	ldd	r25, Y+56	; 0x38
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	98 ab       	std	Y+48, r25	; 0x30
    189e:	8f a7       	std	Y+47, r24	; 0x2f
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <GET_passwordAndCheck+0x10e>
    18a2:	89 e1       	ldi	r24, 0x19	; 25
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	9e a7       	std	Y+46, r25	; 0x2e
    18a8:	8d a7       	std	Y+45, r24	; 0x2d
    18aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <GET_passwordAndCheck+0xfc>
    18b2:	9e a7       	std	Y+46, r25	; 0x2e
    18b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	98 ab       	std	Y+48, r25	; 0x30
    18be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c2:	98 a9       	ldd	r25, Y+48	; 0x30
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	69 f7       	brne	.-38     	; 0x18a2 <GET_passwordAndCheck+0xf0>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <GET_passwordAndCheck+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	69 a9       	ldd	r22, Y+49	; 0x31
    18cc:	7a a9       	ldd	r23, Y+50	; 0x32
    18ce:	8b a9       	ldd	r24, Y+51	; 0x33
    18d0:	9c a9       	ldd	r25, Y+52	; 0x34
    18d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
    18de:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e0:	98 a9       	ldd	r25, Y+48	; 0x30
    18e2:	9c a7       	std	Y+44, r25	; 0x2c
    18e4:	8b a7       	std	Y+43, r24	; 0x2b
    18e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <GET_passwordAndCheck+0x138>
    18ee:	9c a7       	std	Y+44, r25	; 0x2c
    18f0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(250); /* Press time */
		counter++;
    18f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    18f4:	8f 5f       	subi	r24, 0xFF	; 255
    18f6:	8b af       	std	Y+59, r24	; 0x3b
		key = KeyPad_getPressedKey(); /* get the pressed key number */
    18f8:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <KeyPad_getPressedKey>
    18fc:	8c af       	std	Y+60, r24	; 0x3c
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Enter Pass :");
	//LCD_displayStringRowColumn(1,0,"- : Open Door");
	key = KeyPad_getPressedKey();

	while( key != ENTER_KEY)
    18fe:	8c ad       	ldd	r24, Y+60	; 0x3c
    1900:	8d 30       	cpi	r24, 0x0D	; 13
    1902:	09 f0       	breq	.+2      	; 0x1906 <GET_passwordAndCheck+0x154>
    1904:	73 cf       	rjmp	.-282    	; 0x17ec <GET_passwordAndCheck+0x3a>
		str1 [counter] = key;
		_delay_ms(250); /* Press time */
		counter++;
		key = KeyPad_getPressedKey(); /* get the pressed key number */
	}
	str1 [counter] = '#';
    1906:	8b ad       	ldd	r24, Y+59	; 0x3b
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	89 ad       	ldd	r24, Y+57	; 0x39
    190e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1910:	fc 01       	movw	r30, r24
    1912:	e2 0f       	add	r30, r18
    1914:	f3 1f       	adc	r31, r19
    1916:	83 e2       	ldi	r24, 0x23	; 35
    1918:	80 83       	st	Z, r24
	str1 [counter+1] = '\0';
    191a:	8b ad       	ldd	r24, Y+59	; 0x3b
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9c 01       	movw	r18, r24
    1922:	2f 5f       	subi	r18, 0xFF	; 255
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	89 ad       	ldd	r24, Y+57	; 0x39
    1928:	9a ad       	ldd	r25, Y+58	; 0x3a
    192a:	fc 01       	movw	r30, r24
    192c:	e2 0f       	add	r30, r18
    192e:	f3 1f       	adc	r31, r19
    1930:	10 82       	st	Z, r1

	UART_sendByte(CHECK_PASSWORD_COMMAND);
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	0e 94 8a 14 	call	0x2914	; 0x2914 <UART_sendByte>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a8 ec       	ldi	r26, 0xC8	; 200
    193e:	b2 e4       	ldi	r27, 0x42	; 66
    1940:	8f a3       	std	Y+39, r24	; 0x27
    1942:	98 a7       	std	Y+40, r25	; 0x28
    1944:	a9 a7       	std	Y+41, r26	; 0x29
    1946:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1948:	6f a1       	ldd	r22, Y+39	; 0x27
    194a:	78 a5       	ldd	r23, Y+40	; 0x28
    194c:	89 a5       	ldd	r24, Y+41	; 0x29
    194e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	4a e7       	ldi	r20, 0x7A	; 122
    1956:	53 e4       	ldi	r21, 0x43	; 67
    1958:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	8b a3       	std	Y+35, r24	; 0x23
    1962:	9c a3       	std	Y+36, r25	; 0x24
    1964:	ad a3       	std	Y+37, r26	; 0x25
    1966:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1968:	6b a1       	ldd	r22, Y+35	; 0x23
    196a:	7c a1       	ldd	r23, Y+36	; 0x24
    196c:	8d a1       	ldd	r24, Y+37	; 0x25
    196e:	9e a1       	ldd	r25, Y+38	; 0x26
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e8       	ldi	r20, 0x80	; 128
    1976:	5f e3       	ldi	r21, 0x3F	; 63
    1978:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    197c:	88 23       	and	r24, r24
    197e:	2c f4       	brge	.+10     	; 0x198a <GET_passwordAndCheck+0x1d8>
		__ticks = 1;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9a a3       	std	Y+34, r25	; 0x22
    1986:	89 a3       	std	Y+33, r24	; 0x21
    1988:	3f c0       	rjmp	.+126    	; 0x1a08 <GET_passwordAndCheck+0x256>
	else if (__tmp > 65535)
    198a:	6b a1       	ldd	r22, Y+35	; 0x23
    198c:	7c a1       	ldd	r23, Y+36	; 0x24
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	9e a1       	ldd	r25, Y+38	; 0x26
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	3f ef       	ldi	r19, 0xFF	; 255
    1996:	4f e7       	ldi	r20, 0x7F	; 127
    1998:	57 e4       	ldi	r21, 0x47	; 71
    199a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    199e:	18 16       	cp	r1, r24
    19a0:	4c f5       	brge	.+82     	; 0x19f4 <GET_passwordAndCheck+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a2:	6f a1       	ldd	r22, Y+39	; 0x27
    19a4:	78 a5       	ldd	r23, Y+40	; 0x28
    19a6:	89 a5       	ldd	r24, Y+41	; 0x29
    19a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e2       	ldi	r20, 0x20	; 32
    19b0:	51 e4       	ldi	r21, 0x41	; 65
    19b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9a a3       	std	Y+34, r25	; 0x22
    19c8:	89 a3       	std	Y+33, r24	; 0x21
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <GET_passwordAndCheck+0x238>
    19cc:	89 e1       	ldi	r24, 0x19	; 25
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	98 a3       	std	Y+32, r25	; 0x20
    19d2:	8f 8f       	std	Y+31, r24	; 0x1f
    19d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d6:	98 a1       	ldd	r25, Y+32	; 0x20
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <GET_passwordAndCheck+0x226>
    19dc:	98 a3       	std	Y+32, r25	; 0x20
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e0:	89 a1       	ldd	r24, Y+33	; 0x21
    19e2:	9a a1       	ldd	r25, Y+34	; 0x22
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	9a a3       	std	Y+34, r25	; 0x22
    19e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ea:	89 a1       	ldd	r24, Y+33	; 0x21
    19ec:	9a a1       	ldd	r25, Y+34	; 0x22
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	69 f7       	brne	.-38     	; 0x19cc <GET_passwordAndCheck+0x21a>
    19f2:	14 c0       	rjmp	.+40     	; 0x1a1c <GET_passwordAndCheck+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	6b a1       	ldd	r22, Y+35	; 0x23
    19f6:	7c a1       	ldd	r23, Y+36	; 0x24
    19f8:	8d a1       	ldd	r24, Y+37	; 0x25
    19fa:	9e a1       	ldd	r25, Y+38	; 0x26
    19fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9a a3       	std	Y+34, r25	; 0x22
    1a06:	89 a3       	std	Y+33, r24	; 0x21
    1a08:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a0e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <GET_passwordAndCheck+0x262>
    1a18:	9e 8f       	std	Y+30, r25	; 0x1e
    1a1a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	if( UART_recieveByte() == CHECK_PASSWORD_COMMAND)
    1a1c:	0e 94 a1 14 	call	0x2942	; 0x2942 <UART_recieveByte>
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <GET_passwordAndCheck+0x274>
    1a24:	76 c0       	rjmp	.+236    	; 0x1b12 <GET_passwordAndCheck+0x360>
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	a8 ec       	ldi	r26, 0xC8	; 200
    1a2c:	b2 e4       	ldi	r27, 0x42	; 66
    1a2e:	89 8f       	std	Y+25, r24	; 0x19
    1a30:	9a 8f       	std	Y+26, r25	; 0x1a
    1a32:	ab 8f       	std	Y+27, r26	; 0x1b
    1a34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a36:	69 8d       	ldd	r22, Y+25	; 0x19
    1a38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	4a e7       	ldi	r20, 0x7A	; 122
    1a44:	53 e4       	ldi	r21, 0x43	; 67
    1a46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8d 8b       	std	Y+21, r24	; 0x15
    1a50:	9e 8b       	std	Y+22, r25	; 0x16
    1a52:	af 8b       	std	Y+23, r26	; 0x17
    1a54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a56:	6d 89       	ldd	r22, Y+21	; 0x15
    1a58:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e8       	ldi	r20, 0x80	; 128
    1a64:	5f e3       	ldi	r21, 0x3F	; 63
    1a66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a6a:	88 23       	and	r24, r24
    1a6c:	2c f4       	brge	.+10     	; 0x1a78 <GET_passwordAndCheck+0x2c6>
		__ticks = 1;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9c 8b       	std	Y+20, r25	; 0x14
    1a74:	8b 8b       	std	Y+19, r24	; 0x13
    1a76:	3f c0       	rjmp	.+126    	; 0x1af6 <GET_passwordAndCheck+0x344>
	else if (__tmp > 65535)
    1a78:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	3f ef       	ldi	r19, 0xFF	; 255
    1a84:	4f e7       	ldi	r20, 0x7F	; 127
    1a86:	57 e4       	ldi	r21, 0x47	; 71
    1a88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a8c:	18 16       	cp	r1, r24
    1a8e:	4c f5       	brge	.+82     	; 0x1ae2 <GET_passwordAndCheck+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a90:	69 8d       	ldd	r22, Y+25	; 0x19
    1a92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e2       	ldi	r20, 0x20	; 32
    1a9e:	51 e4       	ldi	r21, 0x41	; 65
    1aa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9c 8b       	std	Y+20, r25	; 0x14
    1ab6:	8b 8b       	std	Y+19, r24	; 0x13
    1ab8:	0f c0       	rjmp	.+30     	; 0x1ad8 <GET_passwordAndCheck+0x326>
    1aba:	89 e1       	ldi	r24, 0x19	; 25
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9a 8b       	std	Y+18, r25	; 0x12
    1ac0:	89 8b       	std	Y+17, r24	; 0x11
    1ac2:	89 89       	ldd	r24, Y+17	; 0x11
    1ac4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <GET_passwordAndCheck+0x314>
    1aca:	9a 8b       	std	Y+18, r25	; 0x12
    1acc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ace:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	9c 8b       	std	Y+20, r25	; 0x14
    1ad6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ada:	9c 89       	ldd	r25, Y+20	; 0x14
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	69 f7       	brne	.-38     	; 0x1aba <GET_passwordAndCheck+0x308>
    1ae0:	14 c0       	rjmp	.+40     	; 0x1b0a <GET_passwordAndCheck+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9c 8b       	std	Y+20, r25	; 0x14
    1af4:	8b 8b       	std	Y+19, r24	; 0x13
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	9c 89       	ldd	r25, Y+20	; 0x14
    1afa:	98 8b       	std	Y+16, r25	; 0x10
    1afc:	8f 87       	std	Y+15, r24	; 0x0f
    1afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b00:	98 89       	ldd	r25, Y+16	; 0x10
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <GET_passwordAndCheck+0x350>
    1b06:	98 8b       	std	Y+16, r25	; 0x10
    1b08:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(100);
			UART_sendString(str1);
    1b0a:	89 ad       	ldd	r24, Y+57	; 0x39
    1b0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b0e:	0e 94 b0 14 	call	0x2960	; 0x2960 <UART_sendString>
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a8 ec       	ldi	r26, 0xC8	; 200
    1b18:	b2 e4       	ldi	r27, 0x42	; 66
    1b1a:	8b 87       	std	Y+11, r24	; 0x0b
    1b1c:	9c 87       	std	Y+12, r25	; 0x0c
    1b1e:	ad 87       	std	Y+13, r26	; 0x0d
    1b20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	4a e7       	ldi	r20, 0x7A	; 122
    1b30:	53 e4       	ldi	r21, 0x43	; 67
    1b32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	8f 83       	std	Y+7, r24	; 0x07
    1b3c:	98 87       	std	Y+8, r25	; 0x08
    1b3e:	a9 87       	std	Y+9, r26	; 0x09
    1b40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b42:	6f 81       	ldd	r22, Y+7	; 0x07
    1b44:	78 85       	ldd	r23, Y+8	; 0x08
    1b46:	89 85       	ldd	r24, Y+9	; 0x09
    1b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e8       	ldi	r20, 0x80	; 128
    1b50:	5f e3       	ldi	r21, 0x3F	; 63
    1b52:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b56:	88 23       	and	r24, r24
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <GET_passwordAndCheck+0x3b2>
		__ticks = 1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
    1b62:	3f c0       	rjmp	.+126    	; 0x1be2 <GET_passwordAndCheck+0x430>
	else if (__tmp > 65535)
    1b64:	6f 81       	ldd	r22, Y+7	; 0x07
    1b66:	78 85       	ldd	r23, Y+8	; 0x08
    1b68:	89 85       	ldd	r24, Y+9	; 0x09
    1b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	3f ef       	ldi	r19, 0xFF	; 255
    1b70:	4f e7       	ldi	r20, 0x7F	; 127
    1b72:	57 e4       	ldi	r21, 0x47	; 71
    1b74:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b78:	18 16       	cp	r1, r24
    1b7a:	4c f5       	brge	.+82     	; 0x1bce <GET_passwordAndCheck+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e2       	ldi	r20, 0x20	; 32
    1b8a:	51 e4       	ldi	r21, 0x41	; 65
    1b8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	bc 01       	movw	r22, r24
    1b96:	cd 01       	movw	r24, r26
    1b98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	9e 83       	std	Y+6, r25	; 0x06
    1ba2:	8d 83       	std	Y+5, r24	; 0x05
    1ba4:	0f c0       	rjmp	.+30     	; 0x1bc4 <GET_passwordAndCheck+0x412>
    1ba6:	89 e1       	ldi	r24, 0x19	; 25
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9c 83       	std	Y+4, r25	; 0x04
    1bac:	8b 83       	std	Y+3, r24	; 0x03
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <GET_passwordAndCheck+0x400>
    1bb6:	9c 83       	std	Y+4, r25	; 0x04
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	69 f7       	brne	.-38     	; 0x1ba6 <GET_passwordAndCheck+0x3f4>
    1bcc:	14 c0       	rjmp	.+40     	; 0x1bf6 <GET_passwordAndCheck+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bce:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd0:	78 85       	ldd	r23, Y+8	; 0x08
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9e 83       	std	Y+6, r25	; 0x06
    1be0:	8d 83       	std	Y+5, r24	; 0x05
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <GET_passwordAndCheck+0x43c>
    1bf2:	9a 83       	std	Y+2, r25	; 0x02
    1bf4:	89 83       	std	Y+1, r24	; 0x01
		}

	_delay_ms(100);
	if(UART_recieveByte() == PASSWORD_MATCH)
    1bf6:	0e 94 a1 14 	call	0x2942	; 0x2942 <UART_recieveByte>
    1bfa:	84 30       	cpi	r24, 0x04	; 4
    1bfc:	29 f4       	brne	.+10     	; 0x1c08 <GET_passwordAndCheck+0x456>
	{
		return TRUE;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	26 96       	adiw	r28, 0x06	; 6
    1c02:	8f af       	std	Y+63, r24	; 0x3f
    1c04:	26 97       	sbiw	r28, 0x06	; 6
    1c06:	03 c0       	rjmp	.+6      	; 0x1c0e <GET_passwordAndCheck+0x45c>
	}
	else
	{
		return FALSE;
    1c08:	26 96       	adiw	r28, 0x06	; 6
    1c0a:	1f ae       	std	Y+63, r1	; 0x3f
    1c0c:	26 97       	sbiw	r28, 0x06	; 6
    1c0e:	26 96       	adiw	r28, 0x06	; 6
    1c10:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c12:	26 97       	sbiw	r28, 0x06	; 6
	}
}
    1c14:	cb 5b       	subi	r28, 0xBB	; 187
    1c16:	df 4f       	sbci	r29, 0xFF	; 255
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <OPENING_door>:




void OPENING_door()
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(OPEN_DOOR_COMMAND);
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	0e 94 8a 14 	call	0x2914	; 0x2914 <UART_sendByte>

	LCD_clearScreen();
    1c36:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Openning Door...");
    1c3a:	25 ec       	ldi	r18, 0xC5	; 197
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	a9 01       	movw	r20, r18
    1c44:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>

	UART_recieveByte(); //Door Opened
    1c48:	0e 94 a1 14 	call	0x2942	; 0x2942 <UART_recieveByte>
}
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <LOCK_and_Buzzer>:

void LOCK_and_Buzzer()
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
	Enable_Timer();
    1c5a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <Enable_Timer>
	LCD_clearScreen();
    1c5e:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"ThIEF ALERT!!");
    1c62:	26 ed       	ldi	r18, 0xD6	; 214
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	a9 01       	movw	r20, r18
    1c6c:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayStringRowColumn>
	//Turn On Buzzer
	PORTD |= 0x80;
    1c70:	a2 e3       	ldi	r26, 0x32	; 50
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e2 e3       	ldi	r30, 0x32	; 50
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 68       	ori	r24, 0x80	; 128
    1c7c:	8c 93       	st	X, r24

	start_timer(90); //Start Timer for 90 secs.
    1c7e:	8a e5       	ldi	r24, 0x5A	; 90
    1c80:	0e 94 2b 14 	call	0x2856	; 0x2856 <start_timer>

	//Turn Off Buzzer
	PORTD &= ~0x80;
    1c84:	a2 e3       	ldi	r26, 0x32	; 50
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e2 e3       	ldi	r30, 0x32	; 50
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8f 77       	andi	r24, 0x7F	; 127
    1c90:	8c 93       	st	X, r24

	Disable_Timer();
    1c92:	0e 94 61 14 	call	0x28c2	; 0x28c2 <Disable_Timer>
}
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <KeyPad_getPressedKey+0x6>
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1ca6:	1a 82       	std	Y+2, r1	; 0x02
    1ca8:	4c c0       	rjmp	.+152    	; 0x1d42 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1caa:	ea e3       	ldi	r30, 0x3A	; 58
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	80 e1       	ldi	r24, 0x10	; 16
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <KeyPad_getPressedKey+0x22>
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	2a 95       	dec	r18
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <KeyPad_getPressedKey+0x1e>
    1cc2:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1cc4:	eb e3       	ldi	r30, 0x3B	; 59
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	80 e1       	ldi	r24, 0x10	; 16
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <KeyPad_getPressedKey+0x3e>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <KeyPad_getPressedKey+0x3a>
    1cde:	80 95       	com	r24
    1ce0:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    1ce2:	19 82       	std	Y+1, r1	; 0x01
    1ce4:	28 c0       	rjmp	.+80     	; 0x1d36 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1ce6:	e9 e3       	ldi	r30, 0x39	; 57
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a9 01       	movw	r20, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <KeyPad_getPressedKey+0x62>
    1cfa:	55 95       	asr	r21
    1cfc:	47 95       	ror	r20
    1cfe:	8a 95       	dec	r24
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <KeyPad_getPressedKey+0x5e>
    1d02:	ca 01       	movw	r24, r20
    1d04:	81 70       	andi	r24, 0x01	; 1
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	91 f4       	brne	.+36     	; 0x1d30 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	98 2f       	mov	r25, r24
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	89 0f       	add	r24, r25
    1d20:	8f 5f       	subi	r24, 0xFF	; 255
    1d22:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	8f 5f       	subi	r24, 0xFF	; 255
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	84 30       	cpi	r24, 0x04	; 4
    1d3a:	a8 f2       	brcs	.-86     	; 0x1ce6 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	8f 5f       	subi	r24, 0xFF	; 255
    1d40:	8a 83       	std	Y+2, r24	; 0x02
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	84 30       	cpi	r24, 0x04	; 4
    1d46:	08 f4       	brcc	.+2      	; 0x1d4a <KeyPad_getPressedKey+0xae>
    1d48:	b0 cf       	rjmp	.-160    	; 0x1caa <KeyPad_getPressedKey+0xe>
    1d4a:	ad cf       	rjmp	.-166    	; 0x1ca6 <KeyPad_getPressedKey+0xa>

00001d4c <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <KeyPad_4x4_adjustKeyNumber+0x6>
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <KeyPad_4x4_adjustKeyNumber+0x8>
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3c 83       	std	Y+4, r19	; 0x04
    1d62:	2b 83       	std	Y+3, r18	; 0x03
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	88 30       	cpi	r24, 0x08	; 8
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <KeyPad_4x4_adjustKeyNumber+0x24>
    1d6e:	70 c0       	rjmp	.+224    	; 0x1e50 <KeyPad_4x4_adjustKeyNumber+0x104>
    1d70:	2b 81       	ldd	r18, Y+3	; 0x03
    1d72:	3c 81       	ldd	r19, Y+4	; 0x04
    1d74:	29 30       	cpi	r18, 0x09	; 9
    1d76:	31 05       	cpc	r19, r1
    1d78:	5c f5       	brge	.+86     	; 0x1dd0 <KeyPad_4x4_adjustKeyNumber+0x84>
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	84 30       	cpi	r24, 0x04	; 4
    1d80:	91 05       	cpc	r25, r1
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1d84:	59 c0       	rjmp	.+178    	; 0x1e38 <KeyPad_4x4_adjustKeyNumber+0xec>
    1d86:	2b 81       	ldd	r18, Y+3	; 0x03
    1d88:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8a:	25 30       	cpi	r18, 0x05	; 5
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	9c f4       	brge	.+38     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x6a>
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	9c 81       	ldd	r25, Y+4	; 0x04
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	91 05       	cpc	r25, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <KeyPad_4x4_adjustKeyNumber+0x50>
    1d9a:	48 c0       	rjmp	.+144    	; 0x1e2c <KeyPad_4x4_adjustKeyNumber+0xe0>
    1d9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1da0:	23 30       	cpi	r18, 0x03	; 3
    1da2:	31 05       	cpc	r19, r1
    1da4:	0c f0       	brlt	.+2      	; 0x1da8 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1da6:	45 c0       	rjmp	.+138    	; 0x1e32 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	81 30       	cpi	r24, 0x01	; 1
    1dae:	91 05       	cpc	r25, r1
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <KeyPad_4x4_adjustKeyNumber+0x68>
    1db2:	39 c0       	rjmp	.+114    	; 0x1e26 <KeyPad_4x4_adjustKeyNumber+0xda>
    1db4:	68 c0       	rjmp	.+208    	; 0x1e86 <KeyPad_4x4_adjustKeyNumber+0x13a>
    1db6:	2b 81       	ldd	r18, Y+3	; 0x03
    1db8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dba:	26 30       	cpi	r18, 0x06	; 6
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <KeyPad_4x4_adjustKeyNumber+0x76>
    1dc0:	41 c0       	rjmp	.+130    	; 0x1e44 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	87 30       	cpi	r24, 0x07	; 7
    1dc8:	91 05       	cpc	r25, r1
    1dca:	0c f0       	brlt	.+2      	; 0x1dce <KeyPad_4x4_adjustKeyNumber+0x82>
    1dcc:	3e c0       	rjmp	.+124    	; 0x1e4a <KeyPad_4x4_adjustKeyNumber+0xfe>
    1dce:	37 c0       	rjmp	.+110    	; 0x1e3e <KeyPad_4x4_adjustKeyNumber+0xf2>
    1dd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd4:	2c 30       	cpi	r18, 0x0C	; 12
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <KeyPad_4x4_adjustKeyNumber+0x90>
    1dda:	46 c0       	rjmp	.+140    	; 0x1e68 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	8d 30       	cpi	r24, 0x0D	; 13
    1de2:	91 05       	cpc	r25, r1
    1de4:	5c f4       	brge	.+22     	; 0x1dfc <KeyPad_4x4_adjustKeyNumber+0xb0>
    1de6:	2b 81       	ldd	r18, Y+3	; 0x03
    1de8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dea:	2a 30       	cpi	r18, 0x0A	; 10
    1dec:	31 05       	cpc	r19, r1
    1dee:	b1 f1       	breq	.+108    	; 0x1e5c <KeyPad_4x4_adjustKeyNumber+0x110>
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	8b 30       	cpi	r24, 0x0B	; 11
    1df6:	91 05       	cpc	r25, r1
    1df8:	a4 f5       	brge	.+104    	; 0x1e62 <KeyPad_4x4_adjustKeyNumber+0x116>
    1dfa:	2d c0       	rjmp	.+90     	; 0x1e56 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1dfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1e00:	2e 30       	cpi	r18, 0x0E	; 14
    1e02:	31 05       	cpc	r19, r1
    1e04:	b9 f1       	breq	.+110    	; 0x1e74 <KeyPad_4x4_adjustKeyNumber+0x128>
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	8e 30       	cpi	r24, 0x0E	; 14
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	7c f1       	brlt	.+94     	; 0x1e6e <KeyPad_4x4_adjustKeyNumber+0x122>
    1e10:	2b 81       	ldd	r18, Y+3	; 0x03
    1e12:	3c 81       	ldd	r19, Y+4	; 0x04
    1e14:	2f 30       	cpi	r18, 0x0F	; 15
    1e16:	31 05       	cpc	r19, r1
    1e18:	81 f1       	breq	.+96     	; 0x1e7a <KeyPad_4x4_adjustKeyNumber+0x12e>
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	80 31       	cpi	r24, 0x10	; 16
    1e20:	91 05       	cpc	r25, r1
    1e22:	71 f1       	breq	.+92     	; 0x1e80 <KeyPad_4x4_adjustKeyNumber+0x134>
    1e24:	30 c0       	rjmp	.+96     	; 0x1e86 <KeyPad_4x4_adjustKeyNumber+0x13a>
	{
		case 1: return '7';
    1e26:	97 e3       	ldi	r25, 0x37	; 55
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	31 c0       	rjmp	.+98     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 2: return '8';
    1e2c:	28 e3       	ldi	r18, 0x38	; 56
    1e2e:	2a 83       	std	Y+2, r18	; 0x02
    1e30:	2e c0       	rjmp	.+92     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 3: return '9';
    1e32:	39 e3       	ldi	r19, 0x39	; 57
    1e34:	3a 83       	std	Y+2, r19	; 0x02
    1e36:	2b c0       	rjmp	.+86     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 4: return '%'; // ASCII Code of %
    1e38:	85 e2       	ldi	r24, 0x25	; 37
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
    1e3c:	28 c0       	rjmp	.+80     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 5: return '4';
    1e3e:	94 e3       	ldi	r25, 0x34	; 52
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	25 c0       	rjmp	.+74     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 6: return '5';
    1e44:	25 e3       	ldi	r18, 0x35	; 53
    1e46:	2a 83       	std	Y+2, r18	; 0x02
    1e48:	22 c0       	rjmp	.+68     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 7: return '6';
    1e4a:	36 e3       	ldi	r19, 0x36	; 54
    1e4c:	3a 83       	std	Y+2, r19	; 0x02
    1e4e:	1f c0       	rjmp	.+62     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1e50:	8a e2       	ldi	r24, 0x2A	; 42
    1e52:	8a 83       	std	Y+2, r24	; 0x02
    1e54:	1c c0       	rjmp	.+56     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;		
		case 9: return '1';
    1e56:	91 e3       	ldi	r25, 0x31	; 49
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	19 c0       	rjmp	.+50     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 10: return '2';
    1e5c:	22 e3       	ldi	r18, 0x32	; 50
    1e5e:	2a 83       	std	Y+2, r18	; 0x02
    1e60:	16 c0       	rjmp	.+44     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 11: return '3';
    1e62:	33 e3       	ldi	r19, 0x33	; 51
    1e64:	3a 83       	std	Y+2, r19	; 0x02
    1e66:	13 c0       	rjmp	.+38     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1e68:	8d e2       	ldi	r24, 0x2D	; 45
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
    1e6c:	10 c0       	rjmp	.+32     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1e6e:	9d e0       	ldi	r25, 0x0D	; 13
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	0d c0       	rjmp	.+26     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;			
		case 14: return '0';
    1e74:	20 e3       	ldi	r18, 0x30	; 48
    1e76:	2a 83       	std	Y+2, r18	; 0x02
    1e78:	0a c0       	rjmp	.+20     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1e7a:	3d e3       	ldi	r19, 0x3D	; 61
    1e7c:	3a 83       	std	Y+2, r19	; 0x02
    1e7e:	07 c0       	rjmp	.+14     	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1e80:	8b e2       	ldi	r24, 0x2B	; 43
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0x142>
				break;
		default: return '0' + button_number;
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	98 2f       	mov	r25, r24
    1e8a:	90 5d       	subi	r25, 0xD0	; 208
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
    1ea6:	e4 e3       	ldi	r30, 0x34	; 52
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1eae:	a7 e3       	ldi	r26, 0x37	; 55
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e7 e3       	ldi	r30, 0x37	; 55
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	8e 60       	ori	r24, 0x0E	; 14
    1eba:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1ebc:	88 e3       	ldi	r24, 0x38	; 56
    1ebe:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1ec2:	8c e0       	ldi	r24, 0x0C	; 12
    1ec4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_sendCommand>

	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_sendCommand>
}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	e9 97       	sbiw	r28, 0x39	; 57
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1eea:	a8 e3       	ldi	r26, 0x38	; 56
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e8 e3       	ldi	r30, 0x38	; 56
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8d 7f       	andi	r24, 0xFD	; 253
    1ef6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1ef8:	a8 e3       	ldi	r26, 0x38	; 56
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e8 e3       	ldi	r30, 0x38	; 56
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	8b 7f       	andi	r24, 0xFB	; 251
    1f04:	8c 93       	st	X, r24
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a0 e8       	ldi	r26, 0x80	; 128
    1f0c:	bf e3       	ldi	r27, 0x3F	; 63
    1f0e:	8d ab       	std	Y+53, r24	; 0x35
    1f10:	9e ab       	std	Y+54, r25	; 0x36
    1f12:	af ab       	std	Y+55, r26	; 0x37
    1f14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	6d a9       	ldd	r22, Y+53	; 0x35
    1f18:	7e a9       	ldd	r23, Y+54	; 0x36
    1f1a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f1c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a e7       	ldi	r20, 0x7A	; 122
    1f24:	53 e4       	ldi	r21, 0x43	; 67
    1f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	89 ab       	std	Y+49, r24	; 0x31
    1f30:	9a ab       	std	Y+50, r25	; 0x32
    1f32:	ab ab       	std	Y+51, r26	; 0x33
    1f34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f36:	69 a9       	ldd	r22, Y+49	; 0x31
    1f38:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	2c f4       	brge	.+10     	; 0x1f58 <LCD_sendCommand+0x84>
		__ticks = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	98 ab       	std	Y+48, r25	; 0x30
    1f54:	8f a7       	std	Y+47, r24	; 0x2f
    1f56:	3f c0       	rjmp	.+126    	; 0x1fd6 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1f58:	69 a9       	ldd	r22, Y+49	; 0x31
    1f5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	3f ef       	ldi	r19, 0xFF	; 255
    1f64:	4f e7       	ldi	r20, 0x7F	; 127
    1f66:	57 e4       	ldi	r21, 0x47	; 71
    1f68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	4c f5       	brge	.+82     	; 0x1fc2 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f70:	6d a9       	ldd	r22, Y+53	; 0x35
    1f72:	7e a9       	ldd	r23, Y+54	; 0x36
    1f74:	8f a9       	ldd	r24, Y+55	; 0x37
    1f76:	98 ad       	ldd	r25, Y+56	; 0x38
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e2       	ldi	r20, 0x20	; 32
    1f7e:	51 e4       	ldi	r21, 0x41	; 65
    1f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	98 ab       	std	Y+48, r25	; 0x30
    1f96:	8f a7       	std	Y+47, r24	; 0x2f
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <LCD_sendCommand+0xe4>
    1f9a:	89 e1       	ldi	r24, 0x19	; 25
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9e a7       	std	Y+46, r25	; 0x2e
    1fa0:	8d a7       	std	Y+45, r24	; 0x2d
    1fa2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fa4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <LCD_sendCommand+0xd2>
    1faa:	9e a7       	std	Y+46, r25	; 0x2e
    1fac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	98 ab       	std	Y+48, r25	; 0x30
    1fb6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fba:	98 a9       	ldd	r25, Y+48	; 0x30
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	69 f7       	brne	.-38     	; 0x1f9a <LCD_sendCommand+0xc6>
    1fc0:	14 c0       	rjmp	.+40     	; 0x1fea <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	98 ab       	std	Y+48, r25	; 0x30
    1fd4:	8f a7       	std	Y+47, r24	; 0x2f
    1fd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fda:	9c a7       	std	Y+44, r25	; 0x2c
    1fdc:	8b a7       	std	Y+43, r24	; 0x2b
    1fde:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_sendCommand+0x10e>
    1fe6:	9c a7       	std	Y+44, r25	; 0x2c
    1fe8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1fea:	a8 e3       	ldi	r26, 0x38	; 56
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e8 e3       	ldi	r30, 0x38	; 56
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	88 60       	ori	r24, 0x08	; 8
    1ff6:	8c 93       	st	X, r24
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	a0 e8       	ldi	r26, 0x80	; 128
    1ffe:	bf e3       	ldi	r27, 0x3F	; 63
    2000:	8f a3       	std	Y+39, r24	; 0x27
    2002:	98 a7       	std	Y+40, r25	; 0x28
    2004:	a9 a7       	std	Y+41, r26	; 0x29
    2006:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2008:	6f a1       	ldd	r22, Y+39	; 0x27
    200a:	78 a5       	ldd	r23, Y+40	; 0x28
    200c:	89 a5       	ldd	r24, Y+41	; 0x29
    200e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4a e7       	ldi	r20, 0x7A	; 122
    2016:	53 e4       	ldi	r21, 0x43	; 67
    2018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8b a3       	std	Y+35, r24	; 0x23
    2022:	9c a3       	std	Y+36, r25	; 0x24
    2024:	ad a3       	std	Y+37, r26	; 0x25
    2026:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2028:	6b a1       	ldd	r22, Y+35	; 0x23
    202a:	7c a1       	ldd	r23, Y+36	; 0x24
    202c:	8d a1       	ldd	r24, Y+37	; 0x25
    202e:	9e a1       	ldd	r25, Y+38	; 0x26
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e8       	ldi	r20, 0x80	; 128
    2036:	5f e3       	ldi	r21, 0x3F	; 63
    2038:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    203c:	88 23       	and	r24, r24
    203e:	2c f4       	brge	.+10     	; 0x204a <LCD_sendCommand+0x176>
		__ticks = 1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9a a3       	std	Y+34, r25	; 0x22
    2046:	89 a3       	std	Y+33, r24	; 0x21
    2048:	3f c0       	rjmp	.+126    	; 0x20c8 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    204a:	6b a1       	ldd	r22, Y+35	; 0x23
    204c:	7c a1       	ldd	r23, Y+36	; 0x24
    204e:	8d a1       	ldd	r24, Y+37	; 0x25
    2050:	9e a1       	ldd	r25, Y+38	; 0x26
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	3f ef       	ldi	r19, 0xFF	; 255
    2056:	4f e7       	ldi	r20, 0x7F	; 127
    2058:	57 e4       	ldi	r21, 0x47	; 71
    205a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    205e:	18 16       	cp	r1, r24
    2060:	4c f5       	brge	.+82     	; 0x20b4 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2062:	6f a1       	ldd	r22, Y+39	; 0x27
    2064:	78 a5       	ldd	r23, Y+40	; 0x28
    2066:	89 a5       	ldd	r24, Y+41	; 0x29
    2068:	9a a5       	ldd	r25, Y+42	; 0x2a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e2       	ldi	r20, 0x20	; 32
    2070:	51 e4       	ldi	r21, 0x41	; 65
    2072:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9a a3       	std	Y+34, r25	; 0x22
    2088:	89 a3       	std	Y+33, r24	; 0x21
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <LCD_sendCommand+0x1d6>
    208c:	89 e1       	ldi	r24, 0x19	; 25
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	98 a3       	std	Y+32, r25	; 0x20
    2092:	8f 8f       	std	Y+31, r24	; 0x1f
    2094:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2096:	98 a1       	ldd	r25, Y+32	; 0x20
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <LCD_sendCommand+0x1c4>
    209c:	98 a3       	std	Y+32, r25	; 0x20
    209e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a0:	89 a1       	ldd	r24, Y+33	; 0x21
    20a2:	9a a1       	ldd	r25, Y+34	; 0x22
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	9a a3       	std	Y+34, r25	; 0x22
    20a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20aa:	89 a1       	ldd	r24, Y+33	; 0x21
    20ac:	9a a1       	ldd	r25, Y+34	; 0x22
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	69 f7       	brne	.-38     	; 0x208c <LCD_sendCommand+0x1b8>
    20b2:	14 c0       	rjmp	.+40     	; 0x20dc <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b4:	6b a1       	ldd	r22, Y+35	; 0x23
    20b6:	7c a1       	ldd	r23, Y+36	; 0x24
    20b8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ba:	9e a1       	ldd	r25, Y+38	; 0x26
    20bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9a a3       	std	Y+34, r25	; 0x22
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ca:	9a a1       	ldd	r25, Y+34	; 0x22
    20cc:	9e 8f       	std	Y+30, r25	; 0x1e
    20ce:	8d 8f       	std	Y+29, r24	; 0x1d
    20d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <LCD_sendCommand+0x200>
    20d8:	9e 8f       	std	Y+30, r25	; 0x1e
    20da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    20dc:	e5 e3       	ldi	r30, 0x35	; 53
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	89 ad       	ldd	r24, Y+57	; 0x39
    20e2:	80 83       	st	Z, r24
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	a0 e8       	ldi	r26, 0x80	; 128
    20ea:	bf e3       	ldi	r27, 0x3F	; 63
    20ec:	89 8f       	std	Y+25, r24	; 0x19
    20ee:	9a 8f       	std	Y+26, r25	; 0x1a
    20f0:	ab 8f       	std	Y+27, r26	; 0x1b
    20f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f4:	69 8d       	ldd	r22, Y+25	; 0x19
    20f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	4a e7       	ldi	r20, 0x7A	; 122
    2102:	53 e4       	ldi	r21, 0x43	; 67
    2104:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	8d 8b       	std	Y+21, r24	; 0x15
    210e:	9e 8b       	std	Y+22, r25	; 0x16
    2110:	af 8b       	std	Y+23, r26	; 0x17
    2112:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2114:	6d 89       	ldd	r22, Y+21	; 0x15
    2116:	7e 89       	ldd	r23, Y+22	; 0x16
    2118:	8f 89       	ldd	r24, Y+23	; 0x17
    211a:	98 8d       	ldd	r25, Y+24	; 0x18
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e8       	ldi	r20, 0x80	; 128
    2122:	5f e3       	ldi	r21, 0x3F	; 63
    2124:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2128:	88 23       	and	r24, r24
    212a:	2c f4       	brge	.+10     	; 0x2136 <LCD_sendCommand+0x262>
		__ticks = 1;
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	9c 8b       	std	Y+20, r25	; 0x14
    2132:	8b 8b       	std	Y+19, r24	; 0x13
    2134:	3f c0       	rjmp	.+126    	; 0x21b4 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    2136:	6d 89       	ldd	r22, Y+21	; 0x15
    2138:	7e 89       	ldd	r23, Y+22	; 0x16
    213a:	8f 89       	ldd	r24, Y+23	; 0x17
    213c:	98 8d       	ldd	r25, Y+24	; 0x18
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	3f ef       	ldi	r19, 0xFF	; 255
    2142:	4f e7       	ldi	r20, 0x7F	; 127
    2144:	57 e4       	ldi	r21, 0x47	; 71
    2146:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    214a:	18 16       	cp	r1, r24
    214c:	4c f5       	brge	.+82     	; 0x21a0 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214e:	69 8d       	ldd	r22, Y+25	; 0x19
    2150:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2152:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2154:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e2       	ldi	r20, 0x20	; 32
    215c:	51 e4       	ldi	r21, 0x41	; 65
    215e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	bc 01       	movw	r22, r24
    2168:	cd 01       	movw	r24, r26
    216a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	9c 8b       	std	Y+20, r25	; 0x14
    2174:	8b 8b       	std	Y+19, r24	; 0x13
    2176:	0f c0       	rjmp	.+30     	; 0x2196 <LCD_sendCommand+0x2c2>
    2178:	89 e1       	ldi	r24, 0x19	; 25
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9a 8b       	std	Y+18, r25	; 0x12
    217e:	89 8b       	std	Y+17, r24	; 0x11
    2180:	89 89       	ldd	r24, Y+17	; 0x11
    2182:	9a 89       	ldd	r25, Y+18	; 0x12
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <LCD_sendCommand+0x2b0>
    2188:	9a 8b       	std	Y+18, r25	; 0x12
    218a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218c:	8b 89       	ldd	r24, Y+19	; 0x13
    218e:	9c 89       	ldd	r25, Y+20	; 0x14
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	9c 8b       	std	Y+20, r25	; 0x14
    2194:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2196:	8b 89       	ldd	r24, Y+19	; 0x13
    2198:	9c 89       	ldd	r25, Y+20	; 0x14
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	69 f7       	brne	.-38     	; 0x2178 <LCD_sendCommand+0x2a4>
    219e:	14 c0       	rjmp	.+40     	; 0x21c8 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a0:	6d 89       	ldd	r22, Y+21	; 0x15
    21a2:	7e 89       	ldd	r23, Y+22	; 0x16
    21a4:	8f 89       	ldd	r24, Y+23	; 0x17
    21a6:	98 8d       	ldd	r25, Y+24	; 0x18
    21a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
    21b4:	8b 89       	ldd	r24, Y+19	; 0x13
    21b6:	9c 89       	ldd	r25, Y+20	; 0x14
    21b8:	98 8b       	std	Y+16, r25	; 0x10
    21ba:	8f 87       	std	Y+15, r24	; 0x0f
    21bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21be:	98 89       	ldd	r25, Y+16	; 0x10
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_sendCommand+0x2ec>
    21c4:	98 8b       	std	Y+16, r25	; 0x10
    21c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    21c8:	a8 e3       	ldi	r26, 0x38	; 56
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e8 e3       	ldi	r30, 0x38	; 56
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	87 7f       	andi	r24, 0xF7	; 247
    21d4:	8c 93       	st	X, r24
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e8       	ldi	r26, 0x80	; 128
    21dc:	bf e3       	ldi	r27, 0x3F	; 63
    21de:	8b 87       	std	Y+11, r24	; 0x0b
    21e0:	9c 87       	std	Y+12, r25	; 0x0c
    21e2:	ad 87       	std	Y+13, r26	; 0x0d
    21e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4a e7       	ldi	r20, 0x7A	; 122
    21f4:	53 e4       	ldi	r21, 0x43	; 67
    21f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	8f 83       	std	Y+7, r24	; 0x07
    2200:	98 87       	std	Y+8, r25	; 0x08
    2202:	a9 87       	std	Y+9, r26	; 0x09
    2204:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2206:	6f 81       	ldd	r22, Y+7	; 0x07
    2208:	78 85       	ldd	r23, Y+8	; 0x08
    220a:	89 85       	ldd	r24, Y+9	; 0x09
    220c:	9a 85       	ldd	r25, Y+10	; 0x0a
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	2c f4       	brge	.+10     	; 0x2228 <LCD_sendCommand+0x354>
		__ticks = 1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
    2226:	3f c0       	rjmp	.+126    	; 0x22a6 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	3f ef       	ldi	r19, 0xFF	; 255
    2234:	4f e7       	ldi	r20, 0x7F	; 127
    2236:	57 e4       	ldi	r21, 0x47	; 71
    2238:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    223c:	18 16       	cp	r1, r24
    223e:	4c f5       	brge	.+82     	; 0x2292 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2240:	6b 85       	ldd	r22, Y+11	; 0x0b
    2242:	7c 85       	ldd	r23, Y+12	; 0x0c
    2244:	8d 85       	ldd	r24, Y+13	; 0x0d
    2246:	9e 85       	ldd	r25, Y+14	; 0x0e
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e2       	ldi	r20, 0x20	; 32
    224e:	51 e4       	ldi	r21, 0x41	; 65
    2250:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <LCD_sendCommand+0x3b4>
    226a:	89 e1       	ldi	r24, 0x19	; 25
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9c 83       	std	Y+4, r25	; 0x04
    2270:	8b 83       	std	Y+3, r24	; 0x03
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_sendCommand+0x3a2>
    227a:	9c 83       	std	Y+4, r25	; 0x04
    227c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	9e 83       	std	Y+6, r25	; 0x06
    2286:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	9e 81       	ldd	r25, Y+6	; 0x06
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	69 f7       	brne	.-38     	; 0x226a <LCD_sendCommand+0x396>
    2290:	14 c0       	rjmp	.+40     	; 0x22ba <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2292:	6f 81       	ldd	r22, Y+7	; 0x07
    2294:	78 85       	ldd	r23, Y+8	; 0x08
    2296:	89 85       	ldd	r24, Y+9	; 0x09
    2298:	9a 85       	ldd	r25, Y+10	; 0x0a
    229a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	9a 83       	std	Y+2, r25	; 0x02
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_sendCommand+0x3de>
    22b6:	9a 83       	std	Y+2, r25	; 0x02
    22b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    22ba:	e9 96       	adiw	r28, 0x39	; 57
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	e9 97       	sbiw	r28, 0x39	; 57
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    22e2:	a8 e3       	ldi	r26, 0x38	; 56
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e8 e3       	ldi	r30, 0x38	; 56
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	82 60       	ori	r24, 0x02	; 2
    22ee:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    22f0:	a8 e3       	ldi	r26, 0x38	; 56
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e8 e3       	ldi	r30, 0x38	; 56
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	8b 7f       	andi	r24, 0xFB	; 251
    22fc:	8c 93       	st	X, r24
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a0 e8       	ldi	r26, 0x80	; 128
    2304:	bf e3       	ldi	r27, 0x3F	; 63
    2306:	8d ab       	std	Y+53, r24	; 0x35
    2308:	9e ab       	std	Y+54, r25	; 0x36
    230a:	af ab       	std	Y+55, r26	; 0x37
    230c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230e:	6d a9       	ldd	r22, Y+53	; 0x35
    2310:	7e a9       	ldd	r23, Y+54	; 0x36
    2312:	8f a9       	ldd	r24, Y+55	; 0x37
    2314:	98 ad       	ldd	r25, Y+56	; 0x38
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	4a e7       	ldi	r20, 0x7A	; 122
    231c:	53 e4       	ldi	r21, 0x43	; 67
    231e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	89 ab       	std	Y+49, r24	; 0x31
    2328:	9a ab       	std	Y+50, r25	; 0x32
    232a:	ab ab       	std	Y+51, r26	; 0x33
    232c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    232e:	69 a9       	ldd	r22, Y+49	; 0x31
    2330:	7a a9       	ldd	r23, Y+50	; 0x32
    2332:	8b a9       	ldd	r24, Y+51	; 0x33
    2334:	9c a9       	ldd	r25, Y+52	; 0x34
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e8       	ldi	r20, 0x80	; 128
    233c:	5f e3       	ldi	r21, 0x3F	; 63
    233e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2342:	88 23       	and	r24, r24
    2344:	2c f4       	brge	.+10     	; 0x2350 <LCD_displayCharacter+0x84>
		__ticks = 1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	98 ab       	std	Y+48, r25	; 0x30
    234c:	8f a7       	std	Y+47, r24	; 0x2f
    234e:	3f c0       	rjmp	.+126    	; 0x23ce <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2350:	69 a9       	ldd	r22, Y+49	; 0x31
    2352:	7a a9       	ldd	r23, Y+50	; 0x32
    2354:	8b a9       	ldd	r24, Y+51	; 0x33
    2356:	9c a9       	ldd	r25, Y+52	; 0x34
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	3f ef       	ldi	r19, 0xFF	; 255
    235c:	4f e7       	ldi	r20, 0x7F	; 127
    235e:	57 e4       	ldi	r21, 0x47	; 71
    2360:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2364:	18 16       	cp	r1, r24
    2366:	4c f5       	brge	.+82     	; 0x23ba <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2368:	6d a9       	ldd	r22, Y+53	; 0x35
    236a:	7e a9       	ldd	r23, Y+54	; 0x36
    236c:	8f a9       	ldd	r24, Y+55	; 0x37
    236e:	98 ad       	ldd	r25, Y+56	; 0x38
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e2       	ldi	r20, 0x20	; 32
    2376:	51 e4       	ldi	r21, 0x41	; 65
    2378:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	98 ab       	std	Y+48, r25	; 0x30
    238e:	8f a7       	std	Y+47, r24	; 0x2f
    2390:	0f c0       	rjmp	.+30     	; 0x23b0 <LCD_displayCharacter+0xe4>
    2392:	89 e1       	ldi	r24, 0x19	; 25
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9e a7       	std	Y+46, r25	; 0x2e
    2398:	8d a7       	std	Y+45, r24	; 0x2d
    239a:	8d a5       	ldd	r24, Y+45	; 0x2d
    239c:	9e a5       	ldd	r25, Y+46	; 0x2e
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <LCD_displayCharacter+0xd2>
    23a2:	9e a7       	std	Y+46, r25	; 0x2e
    23a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a8:	98 a9       	ldd	r25, Y+48	; 0x30
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	98 ab       	std	Y+48, r25	; 0x30
    23ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b2:	98 a9       	ldd	r25, Y+48	; 0x30
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	69 f7       	brne	.-38     	; 0x2392 <LCD_displayCharacter+0xc6>
    23b8:	14 c0       	rjmp	.+40     	; 0x23e2 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ba:	69 a9       	ldd	r22, Y+49	; 0x31
    23bc:	7a a9       	ldd	r23, Y+50	; 0x32
    23be:	8b a9       	ldd	r24, Y+51	; 0x33
    23c0:	9c a9       	ldd	r25, Y+52	; 0x34
    23c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	98 ab       	std	Y+48, r25	; 0x30
    23cc:	8f a7       	std	Y+47, r24	; 0x2f
    23ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d0:	98 a9       	ldd	r25, Y+48	; 0x30
    23d2:	9c a7       	std	Y+44, r25	; 0x2c
    23d4:	8b a7       	std	Y+43, r24	; 0x2b
    23d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    23d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <LCD_displayCharacter+0x10e>
    23de:	9c a7       	std	Y+44, r25	; 0x2c
    23e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    23e2:	a8 e3       	ldi	r26, 0x38	; 56
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e8 e3       	ldi	r30, 0x38	; 56
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	88 60       	ori	r24, 0x08	; 8
    23ee:	8c 93       	st	X, r24
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 e8       	ldi	r26, 0x80	; 128
    23f6:	bf e3       	ldi	r27, 0x3F	; 63
    23f8:	8f a3       	std	Y+39, r24	; 0x27
    23fa:	98 a7       	std	Y+40, r25	; 0x28
    23fc:	a9 a7       	std	Y+41, r26	; 0x29
    23fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2400:	6f a1       	ldd	r22, Y+39	; 0x27
    2402:	78 a5       	ldd	r23, Y+40	; 0x28
    2404:	89 a5       	ldd	r24, Y+41	; 0x29
    2406:	9a a5       	ldd	r25, Y+42	; 0x2a
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	4a e7       	ldi	r20, 0x7A	; 122
    240e:	53 e4       	ldi	r21, 0x43	; 67
    2410:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	8b a3       	std	Y+35, r24	; 0x23
    241a:	9c a3       	std	Y+36, r25	; 0x24
    241c:	ad a3       	std	Y+37, r26	; 0x25
    241e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2420:	6b a1       	ldd	r22, Y+35	; 0x23
    2422:	7c a1       	ldd	r23, Y+36	; 0x24
    2424:	8d a1       	ldd	r24, Y+37	; 0x25
    2426:	9e a1       	ldd	r25, Y+38	; 0x26
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e8       	ldi	r20, 0x80	; 128
    242e:	5f e3       	ldi	r21, 0x3F	; 63
    2430:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2434:	88 23       	and	r24, r24
    2436:	2c f4       	brge	.+10     	; 0x2442 <LCD_displayCharacter+0x176>
		__ticks = 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9a a3       	std	Y+34, r25	; 0x22
    243e:	89 a3       	std	Y+33, r24	; 0x21
    2440:	3f c0       	rjmp	.+126    	; 0x24c0 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2442:	6b a1       	ldd	r22, Y+35	; 0x23
    2444:	7c a1       	ldd	r23, Y+36	; 0x24
    2446:	8d a1       	ldd	r24, Y+37	; 0x25
    2448:	9e a1       	ldd	r25, Y+38	; 0x26
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	3f ef       	ldi	r19, 0xFF	; 255
    244e:	4f e7       	ldi	r20, 0x7F	; 127
    2450:	57 e4       	ldi	r21, 0x47	; 71
    2452:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2456:	18 16       	cp	r1, r24
    2458:	4c f5       	brge	.+82     	; 0x24ac <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245a:	6f a1       	ldd	r22, Y+39	; 0x27
    245c:	78 a5       	ldd	r23, Y+40	; 0x28
    245e:	89 a5       	ldd	r24, Y+41	; 0x29
    2460:	9a a5       	ldd	r25, Y+42	; 0x2a
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e2       	ldi	r20, 0x20	; 32
    2468:	51 e4       	ldi	r21, 0x41	; 65
    246a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	9a a3       	std	Y+34, r25	; 0x22
    2480:	89 a3       	std	Y+33, r24	; 0x21
    2482:	0f c0       	rjmp	.+30     	; 0x24a2 <LCD_displayCharacter+0x1d6>
    2484:	89 e1       	ldi	r24, 0x19	; 25
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	98 a3       	std	Y+32, r25	; 0x20
    248a:	8f 8f       	std	Y+31, r24	; 0x1f
    248c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    248e:	98 a1       	ldd	r25, Y+32	; 0x20
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_displayCharacter+0x1c4>
    2494:	98 a3       	std	Y+32, r25	; 0x20
    2496:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2498:	89 a1       	ldd	r24, Y+33	; 0x21
    249a:	9a a1       	ldd	r25, Y+34	; 0x22
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	9a a3       	std	Y+34, r25	; 0x22
    24a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	89 a1       	ldd	r24, Y+33	; 0x21
    24a4:	9a a1       	ldd	r25, Y+34	; 0x22
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	69 f7       	brne	.-38     	; 0x2484 <LCD_displayCharacter+0x1b8>
    24aa:	14 c0       	rjmp	.+40     	; 0x24d4 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ac:	6b a1       	ldd	r22, Y+35	; 0x23
    24ae:	7c a1       	ldd	r23, Y+36	; 0x24
    24b0:	8d a1       	ldd	r24, Y+37	; 0x25
    24b2:	9e a1       	ldd	r25, Y+38	; 0x26
    24b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9a a3       	std	Y+34, r25	; 0x22
    24be:	89 a3       	std	Y+33, r24	; 0x21
    24c0:	89 a1       	ldd	r24, Y+33	; 0x21
    24c2:	9a a1       	ldd	r25, Y+34	; 0x22
    24c4:	9e 8f       	std	Y+30, r25	; 0x1e
    24c6:	8d 8f       	std	Y+29, r24	; 0x1d
    24c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <LCD_displayCharacter+0x200>
    24d0:	9e 8f       	std	Y+30, r25	; 0x1e
    24d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    24d4:	e5 e3       	ldi	r30, 0x35	; 53
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	89 ad       	ldd	r24, Y+57	; 0x39
    24da:	80 83       	st	Z, r24
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	a0 e8       	ldi	r26, 0x80	; 128
    24e2:	bf e3       	ldi	r27, 0x3F	; 63
    24e4:	89 8f       	std	Y+25, r24	; 0x19
    24e6:	9a 8f       	std	Y+26, r25	; 0x1a
    24e8:	ab 8f       	std	Y+27, r26	; 0x1b
    24ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ec:	69 8d       	ldd	r22, Y+25	; 0x19
    24ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	4a e7       	ldi	r20, 0x7A	; 122
    24fa:	53 e4       	ldi	r21, 0x43	; 67
    24fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	8d 8b       	std	Y+21, r24	; 0x15
    2506:	9e 8b       	std	Y+22, r25	; 0x16
    2508:	af 8b       	std	Y+23, r26	; 0x17
    250a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    250c:	6d 89       	ldd	r22, Y+21	; 0x15
    250e:	7e 89       	ldd	r23, Y+22	; 0x16
    2510:	8f 89       	ldd	r24, Y+23	; 0x17
    2512:	98 8d       	ldd	r25, Y+24	; 0x18
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e8       	ldi	r20, 0x80	; 128
    251a:	5f e3       	ldi	r21, 0x3F	; 63
    251c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2520:	88 23       	and	r24, r24
    2522:	2c f4       	brge	.+10     	; 0x252e <LCD_displayCharacter+0x262>
		__ticks = 1;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9c 8b       	std	Y+20, r25	; 0x14
    252a:	8b 8b       	std	Y+19, r24	; 0x13
    252c:	3f c0       	rjmp	.+126    	; 0x25ac <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    252e:	6d 89       	ldd	r22, Y+21	; 0x15
    2530:	7e 89       	ldd	r23, Y+22	; 0x16
    2532:	8f 89       	ldd	r24, Y+23	; 0x17
    2534:	98 8d       	ldd	r25, Y+24	; 0x18
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	3f ef       	ldi	r19, 0xFF	; 255
    253a:	4f e7       	ldi	r20, 0x7F	; 127
    253c:	57 e4       	ldi	r21, 0x47	; 71
    253e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2542:	18 16       	cp	r1, r24
    2544:	4c f5       	brge	.+82     	; 0x2598 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2546:	69 8d       	ldd	r22, Y+25	; 0x19
    2548:	7a 8d       	ldd	r23, Y+26	; 0x1a
    254a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e2       	ldi	r20, 0x20	; 32
    2554:	51 e4       	ldi	r21, 0x41	; 65
    2556:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9c 8b       	std	Y+20, r25	; 0x14
    256c:	8b 8b       	std	Y+19, r24	; 0x13
    256e:	0f c0       	rjmp	.+30     	; 0x258e <LCD_displayCharacter+0x2c2>
    2570:	89 e1       	ldi	r24, 0x19	; 25
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9a 8b       	std	Y+18, r25	; 0x12
    2576:	89 8b       	std	Y+17, r24	; 0x11
    2578:	89 89       	ldd	r24, Y+17	; 0x11
    257a:	9a 89       	ldd	r25, Y+18	; 0x12
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	f1 f7       	brne	.-4      	; 0x257c <LCD_displayCharacter+0x2b0>
    2580:	9a 8b       	std	Y+18, r25	; 0x12
    2582:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2584:	8b 89       	ldd	r24, Y+19	; 0x13
    2586:	9c 89       	ldd	r25, Y+20	; 0x14
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	9c 8b       	std	Y+20, r25	; 0x14
    258c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258e:	8b 89       	ldd	r24, Y+19	; 0x13
    2590:	9c 89       	ldd	r25, Y+20	; 0x14
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	69 f7       	brne	.-38     	; 0x2570 <LCD_displayCharacter+0x2a4>
    2596:	14 c0       	rjmp	.+40     	; 0x25c0 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2598:	6d 89       	ldd	r22, Y+21	; 0x15
    259a:	7e 89       	ldd	r23, Y+22	; 0x16
    259c:	8f 89       	ldd	r24, Y+23	; 0x17
    259e:	98 8d       	ldd	r25, Y+24	; 0x18
    25a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9c 8b       	std	Y+20, r25	; 0x14
    25aa:	8b 8b       	std	Y+19, r24	; 0x13
    25ac:	8b 89       	ldd	r24, Y+19	; 0x13
    25ae:	9c 89       	ldd	r25, Y+20	; 0x14
    25b0:	98 8b       	std	Y+16, r25	; 0x10
    25b2:	8f 87       	std	Y+15, r24	; 0x0f
    25b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b6:	98 89       	ldd	r25, Y+16	; 0x10
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <LCD_displayCharacter+0x2ec>
    25bc:	98 8b       	std	Y+16, r25	; 0x10
    25be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    25c0:	a8 e3       	ldi	r26, 0x38	; 56
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e8 e3       	ldi	r30, 0x38	; 56
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	87 7f       	andi	r24, 0xF7	; 247
    25cc:	8c 93       	st	X, r24
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	a0 e8       	ldi	r26, 0x80	; 128
    25d4:	bf e3       	ldi	r27, 0x3F	; 63
    25d6:	8b 87       	std	Y+11, r24	; 0x0b
    25d8:	9c 87       	std	Y+12, r25	; 0x0c
    25da:	ad 87       	std	Y+13, r26	; 0x0d
    25dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25de:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	4a e7       	ldi	r20, 0x7A	; 122
    25ec:	53 e4       	ldi	r21, 0x43	; 67
    25ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	8f 83       	std	Y+7, r24	; 0x07
    25f8:	98 87       	std	Y+8, r25	; 0x08
    25fa:	a9 87       	std	Y+9, r26	; 0x09
    25fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2600:	78 85       	ldd	r23, Y+8	; 0x08
    2602:	89 85       	ldd	r24, Y+9	; 0x09
    2604:	9a 85       	ldd	r25, Y+10	; 0x0a
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e8       	ldi	r20, 0x80	; 128
    260c:	5f e3       	ldi	r21, 0x3F	; 63
    260e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2612:	88 23       	and	r24, r24
    2614:	2c f4       	brge	.+10     	; 0x2620 <LCD_displayCharacter+0x354>
		__ticks = 1;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
    261e:	3f c0       	rjmp	.+126    	; 0x269e <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2620:	6f 81       	ldd	r22, Y+7	; 0x07
    2622:	78 85       	ldd	r23, Y+8	; 0x08
    2624:	89 85       	ldd	r24, Y+9	; 0x09
    2626:	9a 85       	ldd	r25, Y+10	; 0x0a
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	3f ef       	ldi	r19, 0xFF	; 255
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	57 e4       	ldi	r21, 0x47	; 71
    2630:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2634:	18 16       	cp	r1, r24
    2636:	4c f5       	brge	.+82     	; 0x268a <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2638:	6b 85       	ldd	r22, Y+11	; 0x0b
    263a:	7c 85       	ldd	r23, Y+12	; 0x0c
    263c:	8d 85       	ldd	r24, Y+13	; 0x0d
    263e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e2       	ldi	r20, 0x20	; 32
    2646:	51 e4       	ldi	r21, 0x41	; 65
    2648:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	9e 83       	std	Y+6, r25	; 0x06
    265e:	8d 83       	std	Y+5, r24	; 0x05
    2660:	0f c0       	rjmp	.+30     	; 0x2680 <LCD_displayCharacter+0x3b4>
    2662:	89 e1       	ldi	r24, 0x19	; 25
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9c 83       	std	Y+4, r25	; 0x04
    2668:	8b 83       	std	Y+3, r24	; 0x03
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	9c 81       	ldd	r25, Y+4	; 0x04
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <LCD_displayCharacter+0x3a2>
    2672:	9c 83       	std	Y+4, r25	; 0x04
    2674:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	9e 83       	std	Y+6, r25	; 0x06
    267e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2680:	8d 81       	ldd	r24, Y+5	; 0x05
    2682:	9e 81       	ldd	r25, Y+6	; 0x06
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	69 f7       	brne	.-38     	; 0x2662 <LCD_displayCharacter+0x396>
    2688:	14 c0       	rjmp	.+40     	; 0x26b2 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268a:	6f 81       	ldd	r22, Y+7	; 0x07
    268c:	78 85       	ldd	r23, Y+8	; 0x08
    268e:	89 85       	ldd	r24, Y+9	; 0x09
    2690:	9a 85       	ldd	r25, Y+10	; 0x0a
    2692:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	9e 83       	std	Y+6, r25	; 0x06
    269c:	8d 83       	std	Y+5, r24	; 0x05
    269e:	8d 81       	ldd	r24, Y+5	; 0x05
    26a0:	9e 81       	ldd	r25, Y+6	; 0x06
    26a2:	9a 83       	std	Y+2, r25	; 0x02
    26a4:	89 83       	std	Y+1, r24	; 0x01
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	9a 81       	ldd	r25, Y+2	; 0x02
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <LCD_displayCharacter+0x3de>
    26ae:	9a 83       	std	Y+2, r25	; 0x02
    26b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    26b2:	e9 96       	adiw	r28, 0x39	; 57
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <LCD_displayString+0x6>
    26ca:	0f 92       	push	r0
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	9b 83       	std	Y+3, r25	; 0x03
    26d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26d4:	19 82       	std	Y+1, r1	; 0x01
    26d6:	0e c0       	rjmp	.+28     	; 0x26f4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	9b 81       	ldd	r25, Y+3	; 0x03
    26e2:	fc 01       	movw	r30, r24
    26e4:	e2 0f       	add	r30, r18
    26e6:	f3 1f       	adc	r31, r19
    26e8:	80 81       	ld	r24, Z
    26ea:	0e 94 66 11 	call	0x22cc	; 0x22cc <LCD_displayCharacter>
		i++;
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	9b 81       	ldd	r25, Y+3	; 0x03
    26fe:	fc 01       	movw	r30, r24
    2700:	e2 0f       	add	r30, r18
    2702:	f3 1f       	adc	r31, r19
    2704:	80 81       	ld	r24, Z
    2706:	88 23       	and	r24, r24
    2708:	39 f7       	brne	.-50     	; 0x26d8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	00 d0       	rcall	.+0      	; 0x271c <LCD_goToRowColumn+0x6>
    271c:	00 d0       	rcall	.+0      	; 0x271e <LCD_goToRowColumn+0x8>
    271e:	0f 92       	push	r0
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	8a 83       	std	Y+2, r24	; 0x02
    2726:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	3d 83       	std	Y+5, r19	; 0x05
    2730:	2c 83       	std	Y+4, r18	; 0x04
    2732:	8c 81       	ldd	r24, Y+4	; 0x04
    2734:	9d 81       	ldd	r25, Y+5	; 0x05
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	91 05       	cpc	r25, r1
    273a:	c1 f0       	breq	.+48     	; 0x276c <LCD_goToRowColumn+0x56>
    273c:	2c 81       	ldd	r18, Y+4	; 0x04
    273e:	3d 81       	ldd	r19, Y+5	; 0x05
    2740:	22 30       	cpi	r18, 0x02	; 2
    2742:	31 05       	cpc	r19, r1
    2744:	2c f4       	brge	.+10     	; 0x2750 <LCD_goToRowColumn+0x3a>
    2746:	8c 81       	ldd	r24, Y+4	; 0x04
    2748:	9d 81       	ldd	r25, Y+5	; 0x05
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	61 f0       	breq	.+24     	; 0x2766 <LCD_goToRowColumn+0x50>
    274e:	19 c0       	rjmp	.+50     	; 0x2782 <LCD_goToRowColumn+0x6c>
    2750:	2c 81       	ldd	r18, Y+4	; 0x04
    2752:	3d 81       	ldd	r19, Y+5	; 0x05
    2754:	22 30       	cpi	r18, 0x02	; 2
    2756:	31 05       	cpc	r19, r1
    2758:	69 f0       	breq	.+26     	; 0x2774 <LCD_goToRowColumn+0x5e>
    275a:	8c 81       	ldd	r24, Y+4	; 0x04
    275c:	9d 81       	ldd	r25, Y+5	; 0x05
    275e:	83 30       	cpi	r24, 0x03	; 3
    2760:	91 05       	cpc	r25, r1
    2762:	61 f0       	breq	.+24     	; 0x277c <LCD_goToRowColumn+0x66>
    2764:	0e c0       	rjmp	.+28     	; 0x2782 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	0b c0       	rjmp	.+22     	; 0x2782 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	80 5c       	subi	r24, 0xC0	; 192
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	07 c0       	rjmp	.+14     	; 0x2782 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	80 5f       	subi	r24, 0xF0	; 240
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	80 5b       	subi	r24, 0xB0	; 176
    2780:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	80 68       	ori	r24, 0x80	; 128
    2786:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_sendCommand>
}
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <LCD_displayStringRowColumn+0x6>
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <LCD_displayStringRowColumn+0x8>
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	6a 83       	std	Y+2, r22	; 0x02
    27aa:	5c 83       	std	Y+4, r21	; 0x04
    27ac:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	6a 81       	ldd	r22, Y+2	; 0x02
    27b2:	0e 94 8b 13 	call	0x2716	; 0x2716 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	0e 94 62 13 	call	0x26c4	; 0x26c4 <LCD_displayString>
}
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    27cc:	df 93       	push	r29
    27ce:	cf 93       	push	r28
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	62 97       	sbiw	r28, 0x12	; 18
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	9a 8b       	std	Y+18, r25	; 0x12
    27e2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    27e4:	89 89       	ldd	r24, Y+17	; 0x11
    27e6:	9a 89       	ldd	r25, Y+18	; 0x12
    27e8:	9e 01       	movw	r18, r28
    27ea:	2f 5f       	subi	r18, 0xFF	; 255
    27ec:	3f 4f       	sbci	r19, 0xFF	; 255
    27ee:	b9 01       	movw	r22, r18
    27f0:	4a e0       	ldi	r20, 0x0A	; 10
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <itoa>
   LCD_displayString(buff);
    27f8:	ce 01       	movw	r24, r28
    27fa:	01 96       	adiw	r24, 0x01	; 1
    27fc:	0e 94 62 13 	call	0x26c4	; 0x26c4 <LCD_displayString>
}
    2800:	62 96       	adiw	r28, 0x12	; 18
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_sendCommand>
}
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <timer_init>:
#include "micro_config.h"
#include "std_types.h"
#include "common_macros.h"

void timer_init(void)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
	OCR1A = 15625; //1sec
    282e:	ea e4       	ldi	r30, 0x4A	; 74
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	89 e0       	ldi	r24, 0x09	; 9
    2834:	9d e3       	ldi	r25, 0x3D	; 61
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12);
    283a:	ee e4       	ldi	r30, 0x4E	; 78
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	88 e0       	ldi	r24, 0x08	; 8
    2840:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11) | (1<<CS10);
    2842:	ae e4       	ldi	r26, 0x4E	; 78
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	ee e4       	ldi	r30, 0x4E	; 78
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	83 60       	ori	r24, 0x03	; 3
    284e:	8c 93       	st	X, r24
}
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <start_timer>:

void start_timer(uint8 secs)
{
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	00 d0       	rcall	.+0      	; 0x285c <start_timer+0x6>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	8a 83       	std	Y+2, r24	; 0x02
	TCNT1 = 0; //Initialize Counter
    2862:	ec e4       	ldi	r30, 0x4C	; 76
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	11 82       	std	Z+1, r1	; 0x01
    2868:	10 82       	st	Z, r1
	for(uint8 i = 0; i<secs; i++)
    286a:	19 82       	std	Y+1, r1	; 0x01
    286c:	13 c0       	rjmp	.+38     	; 0x2894 <start_timer+0x3e>
	{
		while(! (TIFR & 1<<OCF1A)); //Wait For Match Flag
    286e:	e8 e5       	ldi	r30, 0x58	; 88
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	80 71       	andi	r24, 0x10	; 16
    287a:	90 70       	andi	r25, 0x00	; 0
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	b9 f3       	breq	.-18     	; 0x286e <start_timer+0x18>

		TIFR |= (1<<OCF1A);//Clear Compare Match Flag
    2880:	a8 e5       	ldi	r26, 0x58	; 88
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	e8 e5       	ldi	r30, 0x58	; 88
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	80 61       	ori	r24, 0x10	; 16
    288c:	8c 93       	st	X, r24
}

void start_timer(uint8 secs)
{
	TCNT1 = 0; //Initialize Counter
	for(uint8 i = 0; i<secs; i++)
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	8f 5f       	subi	r24, 0xFF	; 255
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	99 81       	ldd	r25, Y+1	; 0x01
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	98 17       	cp	r25, r24
    289a:	48 f3       	brcs	.-46     	; 0x286e <start_timer+0x18>
	{
		while(! (TIFR & 1<<OCF1A)); //Wait For Match Flag

		TIFR |= (1<<OCF1A);//Clear Compare Match Flag
	}
}
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <Enable_Timer>:

void Enable_Timer(void)
{
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1<<CS11) | (1<<CS10);
    28ae:	ae e4       	ldi	r26, 0x4E	; 78
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	ee e4       	ldi	r30, 0x4E	; 78
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	83 60       	ori	r24, 0x03	; 3
    28ba:	8c 93       	st	X, r24
}
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <Disable_Timer>:

void Disable_Timer(void)
{
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = TCCR1B = (1<<WGM12);
    28ca:	ae e4       	ldi	r26, 0x4E	; 78
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	ee e4       	ldi	r30, 0x4E	; 78
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	88 e0       	ldi	r24, 0x08	; 8
    28d4:	80 83       	st	Z, r24
    28d6:	80 81       	ld	r24, Z
    28d8:	8c 93       	st	X, r24
}
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    28e8:	eb e2       	ldi	r30, 0x2B	; 43
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    28f0:	ea e2       	ldi	r30, 0x2A	; 42
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	88 e1       	ldi	r24, 0x18	; 24
    28f6:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    28f8:	e0 e4       	ldi	r30, 0x40	; 64
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	86 e8       	ldi	r24, 0x86	; 134
    28fe:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2900:	e0 e4       	ldi	r30, 0x40	; 64
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2906:	e9 e2       	ldi	r30, 0x29	; 41
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	8c e0       	ldi	r24, 0x0C	; 12
    290c:	80 83       	st	Z, r24
}
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	0f 92       	push	r0
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2920:	eb e2       	ldi	r30, 0x2B	; 43
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	88 2f       	mov	r24, r24
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	80 72       	andi	r24, 0x20	; 32
    292c:	90 70       	andi	r25, 0x00	; 0
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	b9 f3       	breq	.-18     	; 0x2920 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2932:	ec e2       	ldi	r30, 0x2C	; 44
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    294a:	eb e2       	ldi	r30, 0x2B	; 43
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	88 23       	and	r24, r24
    2952:	dc f7       	brge	.-10     	; 0x294a <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2954:	ec e2       	ldi	r30, 0x2C	; 44
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
}
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	00 d0       	rcall	.+0      	; 0x2966 <UART_sendString+0x6>
    2966:	0f 92       	push	r0
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	9b 83       	std	Y+3, r25	; 0x03
    296e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2970:	19 82       	std	Y+1, r1	; 0x01
    2972:	0e c0       	rjmp	.+28     	; 0x2990 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	9b 81       	ldd	r25, Y+3	; 0x03
    297e:	fc 01       	movw	r30, r24
    2980:	e2 0f       	add	r30, r18
    2982:	f3 1f       	adc	r31, r19
    2984:	80 81       	ld	r24, Z
    2986:	0e 94 8a 14 	call	0x2914	; 0x2914 <UART_sendByte>
		i++;
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	8f 5f       	subi	r24, 0xFF	; 255
    298e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	28 2f       	mov	r18, r24
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	9b 81       	ldd	r25, Y+3	; 0x03
    299a:	fc 01       	movw	r30, r24
    299c:	e2 0f       	add	r30, r18
    299e:	f3 1f       	adc	r31, r19
    29a0:	80 81       	ld	r24, Z
    29a2:	88 23       	and	r24, r24
    29a4:	39 f7       	brne	.-50     	; 0x2974 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	cf 91       	pop	r28
    29ae:	df 91       	pop	r29
    29b0:	08 95       	ret

000029b2 <UART_recieveString>:

void UART_recieveString(uint8 *Str)
{
    29b2:	0f 93       	push	r16
    29b4:	1f 93       	push	r17
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	00 d0       	rcall	.+0      	; 0x29bc <UART_recieveString+0xa>
    29bc:	0f 92       	push	r0
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	9b 83       	std	Y+3, r25	; 0x03
    29c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29c6:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	9b 81       	ldd	r25, Y+3	; 0x03
    29d2:	8c 01       	movw	r16, r24
    29d4:	02 0f       	add	r16, r18
    29d6:	13 1f       	adc	r17, r19
    29d8:	0e 94 a1 14 	call	0x2942	; 0x2942 <UART_recieveByte>
    29dc:	f8 01       	movw	r30, r16
    29de:	80 83       	st	Z, r24
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <UART_recieveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	8f 5f       	subi	r24, 0xFF	; 255
    29e6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	9b 81       	ldd	r25, Y+3	; 0x03
    29f2:	8c 01       	movw	r16, r24
    29f4:	02 0f       	add	r16, r18
    29f6:	13 1f       	adc	r17, r19
    29f8:	0e 94 a1 14 	call	0x2942	; 0x2942 <UART_recieveByte>
    29fc:	f8 01       	movw	r30, r16
    29fe:	80 83       	st	Z, r24

void UART_recieveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	28 2f       	mov	r18, r24
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	8a 81       	ldd	r24, Y+2	; 0x02
    2a08:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	e2 0f       	add	r30, r18
    2a0e:	f3 1f       	adc	r31, r19
    2a10:	80 81       	ld	r24, Z
    2a12:	83 32       	cpi	r24, 0x23	; 35
    2a14:	31 f7       	brne	.-52     	; 0x29e2 <UART_recieveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	28 2f       	mov	r18, r24
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a20:	fc 01       	movw	r30, r24
    2a22:	e2 0f       	add	r30, r18
    2a24:	f3 1f       	adc	r31, r19
    2a26:	10 82       	st	Z, r1
}
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	1f 91       	pop	r17
    2a34:	0f 91       	pop	r16
    2a36:	08 95       	ret

00002a38 <__prologue_saves__>:
    2a38:	2f 92       	push	r2
    2a3a:	3f 92       	push	r3
    2a3c:	4f 92       	push	r4
    2a3e:	5f 92       	push	r5
    2a40:	6f 92       	push	r6
    2a42:	7f 92       	push	r7
    2a44:	8f 92       	push	r8
    2a46:	9f 92       	push	r9
    2a48:	af 92       	push	r10
    2a4a:	bf 92       	push	r11
    2a4c:	cf 92       	push	r12
    2a4e:	df 92       	push	r13
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	ca 1b       	sub	r28, r26
    2a62:	db 0b       	sbc	r29, r27
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	f8 94       	cli
    2a68:	de bf       	out	0x3e, r29	; 62
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	cd bf       	out	0x3d, r28	; 61
    2a6e:	09 94       	ijmp

00002a70 <__epilogue_restores__>:
    2a70:	2a 88       	ldd	r2, Y+18	; 0x12
    2a72:	39 88       	ldd	r3, Y+17	; 0x11
    2a74:	48 88       	ldd	r4, Y+16	; 0x10
    2a76:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a78:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a80:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a82:	b9 84       	ldd	r11, Y+9	; 0x09
    2a84:	c8 84       	ldd	r12, Y+8	; 0x08
    2a86:	df 80       	ldd	r13, Y+7	; 0x07
    2a88:	ee 80       	ldd	r14, Y+6	; 0x06
    2a8a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a8c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a8e:	1b 81       	ldd	r17, Y+3	; 0x03
    2a90:	aa 81       	ldd	r26, Y+2	; 0x02
    2a92:	b9 81       	ldd	r27, Y+1	; 0x01
    2a94:	ce 0f       	add	r28, r30
    2a96:	d1 1d       	adc	r29, r1
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	ed 01       	movw	r28, r26
    2aa4:	08 95       	ret

00002aa6 <strcmp>:
    2aa6:	fb 01       	movw	r30, r22
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	8d 91       	ld	r24, X+
    2aac:	01 90       	ld	r0, Z+
    2aae:	80 19       	sub	r24, r0
    2ab0:	01 10       	cpse	r0, r1
    2ab2:	d9 f3       	breq	.-10     	; 0x2aaa <strcmp+0x4>
    2ab4:	99 0b       	sbc	r25, r25
    2ab6:	08 95       	ret

00002ab8 <itoa>:
    2ab8:	fb 01       	movw	r30, r22
    2aba:	9f 01       	movw	r18, r30
    2abc:	e8 94       	clt
    2abe:	42 30       	cpi	r20, 0x02	; 2
    2ac0:	c4 f0       	brlt	.+48     	; 0x2af2 <itoa+0x3a>
    2ac2:	45 32       	cpi	r20, 0x25	; 37
    2ac4:	b4 f4       	brge	.+44     	; 0x2af2 <itoa+0x3a>
    2ac6:	4a 30       	cpi	r20, 0x0A	; 10
    2ac8:	29 f4       	brne	.+10     	; 0x2ad4 <itoa+0x1c>
    2aca:	97 fb       	bst	r25, 7
    2acc:	1e f4       	brtc	.+6      	; 0x2ad4 <itoa+0x1c>
    2ace:	90 95       	com	r25
    2ad0:	81 95       	neg	r24
    2ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad4:	64 2f       	mov	r22, r20
    2ad6:	77 27       	eor	r23, r23
    2ad8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__udivmodhi4>
    2adc:	80 5d       	subi	r24, 0xD0	; 208
    2ade:	8a 33       	cpi	r24, 0x3A	; 58
    2ae0:	0c f0       	brlt	.+2      	; 0x2ae4 <itoa+0x2c>
    2ae2:	89 5d       	subi	r24, 0xD9	; 217
    2ae4:	81 93       	st	Z+, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	a1 f7       	brne	.-24     	; 0x2ad4 <itoa+0x1c>
    2aec:	16 f4       	brtc	.+4      	; 0x2af2 <itoa+0x3a>
    2aee:	5d e2       	ldi	r21, 0x2D	; 45
    2af0:	51 93       	st	Z+, r21
    2af2:	10 82       	st	Z, r1
    2af4:	c9 01       	movw	r24, r18
    2af6:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <strrev>

00002afa <strrev>:
    2afa:	dc 01       	movw	r26, r24
    2afc:	fc 01       	movw	r30, r24
    2afe:	67 2f       	mov	r22, r23
    2b00:	71 91       	ld	r23, Z+
    2b02:	77 23       	and	r23, r23
    2b04:	e1 f7       	brne	.-8      	; 0x2afe <strrev+0x4>
    2b06:	32 97       	sbiw	r30, 0x02	; 2
    2b08:	04 c0       	rjmp	.+8      	; 0x2b12 <strrev+0x18>
    2b0a:	7c 91       	ld	r23, X
    2b0c:	6d 93       	st	X+, r22
    2b0e:	70 83       	st	Z, r23
    2b10:	62 91       	ld	r22, -Z
    2b12:	ae 17       	cp	r26, r30
    2b14:	bf 07       	cpc	r27, r31
    2b16:	c8 f3       	brcs	.-14     	; 0x2b0a <strrev+0x10>
    2b18:	08 95       	ret

00002b1a <__udivmodhi4>:
    2b1a:	aa 1b       	sub	r26, r26
    2b1c:	bb 1b       	sub	r27, r27
    2b1e:	51 e1       	ldi	r21, 0x11	; 17
    2b20:	07 c0       	rjmp	.+14     	; 0x2b30 <__udivmodhi4_ep>

00002b22 <__udivmodhi4_loop>:
    2b22:	aa 1f       	adc	r26, r26
    2b24:	bb 1f       	adc	r27, r27
    2b26:	a6 17       	cp	r26, r22
    2b28:	b7 07       	cpc	r27, r23
    2b2a:	10 f0       	brcs	.+4      	; 0x2b30 <__udivmodhi4_ep>
    2b2c:	a6 1b       	sub	r26, r22
    2b2e:	b7 0b       	sbc	r27, r23

00002b30 <__udivmodhi4_ep>:
    2b30:	88 1f       	adc	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	5a 95       	dec	r21
    2b36:	a9 f7       	brne	.-22     	; 0x2b22 <__udivmodhi4_loop>
    2b38:	80 95       	com	r24
    2b3a:	90 95       	com	r25
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	08 95       	ret

00002b42 <_exit>:
    2b42:	f8 94       	cli

00002b44 <__stop_program>:
    2b44:	ff cf       	rjmp	.-2      	; 0x2b44 <__stop_program>
